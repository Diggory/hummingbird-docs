{"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"metadata":{"role":"collection","externalID":"HummingbirdJobs","roleHeading":"Framework","title":"HummingbirdJobs","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}]},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference","isActive":true},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}]},{"text":"Setting up Jobs","type":"heading","anchor":"Setting-up-Jobs","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to add a jobs driver to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference","isActive":true},{"type":"text","text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first."}]},{"syntax":"swift","type":"codeListing","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"]},{"type":"paragraph","inlineContent":[{"text":"In this example I called ","type":"text"},{"code":"addJob","type":"codeVoice"},{"type":"text","text":" with "},{"code":"numWorkers","type":"codeVoice"},{"type":"text","text":" set to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the "},{"code":"numWorkers","type":"codeVoice"},{"type":"text","text":" set to the number of threads you want to process the jobs on the queue."}]},{"text":"Creating a Job","type":"heading","anchor":"Creating-a-Job","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"code":"HBJob","type":"codeVoice"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"code":"name","type":"codeVoice"},{"type":"text","text":" and a function "},{"code":"func execute(on:logger)","type":"codeVoice"},{"type":"text","text":". The "},{"code":"name","type":"codeVoice"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" function does the work of the job and returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"code":"sendEmail()","type":"codeVoice"},{"type":"text","text":" function."}]},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"syntax":"swift","type":"codeListing","code":["SendEmailJob.register()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":". You can access the job queue via "},{"type":"codeVoice","code":"HBApplication.jobs.queue"},{"type":"text","text":". There is a helper object attached to "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" that reduces this to "},{"type":"codeVoice","code":"HBRequest.jobs.enqueue"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that will be fulfilled once the job has been added to the queue."}]},{"text":"Multiple Job Queues","type":"heading","anchor":"Multiple-Job-Queues","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id."}]},{"syntax":"swift","type":"codeListing","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have the new queue id you can register your new queue with this id"}]},{"syntax":"swift","type":"codeListing","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"]},{"type":"paragraph","inlineContent":[{"text":"Then when adding jobs you add the queue id to the ","type":"text"},{"code":"enqueue","type":"codeVoice"},{"text":" function","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["request.jobs.enqueue(job: job, queue: .newQueue)"]},{"text":"Managing Job Queues outside HBApplication","type":"heading","anchor":"Managing-Job-Queues-outside-HBApplication","level":3},{"type":"paragraph","inlineContent":[{"text":"If you prefer you can create your job queue separate from ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},{"text":". Both the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue"},{"text":" are available. You could set this up as follows.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ setup Redis connection and job queue. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let jobQueue = HBRedisJobQueue(redisConnectionPoolGroup: redisConnectionPoolGroup)","let jobQueueHandler = HBJobQueueHandler(","    queue: jobQueue, ","    numWorkers: 4, ","    eventLoopGroup: app.eventLoopGroup, ","    logger: app.logger",")","jobQueueHandler.start()","","\/\/ add routes to application","app.put(\"email\") { request -> HTTPResponseStatus in","    let job = SendEmailJob(","        to: \"joe@email.com\",","        subject: \"Testing Jobs\",","        message: \"...\"","    )","    try await jobQueue.enqueue(job: job)","    return .ok","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you do setup a job queue as above. You will need to manage the job queue lifecycle and call "},{"code":"jobQueueHandler.shutdown","type":"codeVoice"},{"type":"text","text":", to shutdown the job queue and its workers, when you shutdown your application."}]}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]},{"title":"Classes","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","abstract":[{"type":"text","text":"Holder for all data related to a job"}],"title":"HBJobContainer","type":"topic","navigatorTitle":[{"text":"HBJobContainer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobContainer"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"abstract":[{"type":"text","text":"Application class. Brings together all the components of Hummingbird together"}],"role":"symbol","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"title":"HBApplication","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbapplication","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"url":"\/documentation\/hummingbirdjobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"role":"collection","title":"HummingbirdJobs","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","title":"HBJobQueueId","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueId","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueueid","type":"topic","abstract":[{"type":"text","text":"Job queue id"}],"role":"symbol","navigatorTitle":[{"text":"HBJobQueueId","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"abstract":[{"type":"text","text":"Queued job. Includes job, plus the id for the job"}],"navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"title":"HBQueuedJob","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"role":"collection","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"topic","url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","title":"HBJobQueueHandler","kind":"symbol","navigatorTitle":[{"text":"HBJobQueueHandler","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueHandler","kind":"identifier"}],"abstract":[{"text":"Object handling a single job queue","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"abstract":[{"type":"text","text":"Protocol for job description"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"title":"HBJob","url":"\/documentation\/hummingbirdjobs\/hbjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"abstract":[{"type":"text","text":"Factory class for Job Queue drivers"}],"role":"symbol","navigatorTitle":[{"text":"HBJobQueueFactory","kind":"identifier"}],"title":"HBJobQueueFactory","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueFactory","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","title":"HBRedisJobQueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisJobQueue","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","type":"topic","abstract":[{"text":"Redis implementation of job queues","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"HBRedisJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncJob","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","abstract":[{"text":"Job with asynchronous handler","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbasyncjob","navigatorTitle":[{"text":"HBAsyncJob","kind":"identifier"}],"title":"HBAsyncJob","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"abstract":[{"text":"Job queue protocol.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"HBJobQueue","kind":"identifier"}],"title":"HBJobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueue","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueue","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"abstract":[{"type":"text","text":"Job Queue Error type"}],"role":"symbol","navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"title":"JobQueueError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobQueueError"}],"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","title":"JobIdentifier","abstract":[{"type":"text","text":"Identifier for Job"}],"navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryJobQueue","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","title":"HBMemoryJobQueue","abstract":[{"text":"In memory implementation of job queue driver. Stores jobs in a circular buffer","type":"text"}],"navigatorTitle":[{"text":"HBMemoryJobQueue","kind":"identifier"}]}}}