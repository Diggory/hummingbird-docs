{"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"roleHeading":"Framework","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}],"externalID":"HummingbirdJobs","role":"collection","title":"HummingbirdJobs"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],"title":"Related Documentation"}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"hierarchy":{"paths":[[]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"],"title":"Jobs"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"],"title":"Queues"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"],"title":"Error"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"],"title":"Classes"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"},{"type":"text","text":" that comes with the hummingbird-redis package that stores jobs in a Redis database."}]},{"text":"Setting up Jobs","anchor":"Setting-up-Jobs","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to add a jobs driver to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBApplication","isActive":true,"type":"reference"},{"type":"text","text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first."}]},{"syntax":"swift","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In this example I called ","type":"text"},{"type":"codeVoice","code":"addJob"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" set to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" set to the number of threads you want to process the jobs on the queue.","type":"text"}]},{"text":"Creating a Job","anchor":"Creating-a-Job","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"First you must define your job. Create an object that inherits from ","type":"text"},{"code":"HBJob","type":"codeVoice"},{"text":". This protocol requires you to implement a static variable ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" and a function ","type":"text"},{"code":"func execute(on:logger)","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" variable should be unique to this job definition. It is used in the serialisation of the job. The ","type":"text"},{"code":"execute","type":"codeVoice"},{"text":" function does the work of the job and returns an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a ","type":"text"},{"code":"sendEmail()","type":"codeVoice"},{"text":" function.","type":"text"}]},{"syntax":"swift","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Before you can use this job you have to register it.","type":"text"}]},{"syntax":"swift","code":["SendEmailJob.register()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" on "},{"code":"HBJobQueue","type":"codeVoice"},{"type":"text","text":". You can access the job queue via "},{"code":"HBApplication.jobs.queue","type":"codeVoice"},{"type":"text","text":". There is a helper object attached to "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" that reduces this to "},{"code":"HBRequest.jobs.enqueue","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that will be fulfilled once the job has been added to the queue."}]},{"text":"Multiple Job Queues","anchor":"Multiple-Job-Queues","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id.","type":"text"}]},{"syntax":"swift","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Once you have the new queue id you can register your new queue with this id","type":"text"}]},{"syntax":"swift","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when adding jobs you add the queue id to the "},{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" function"}]},{"syntax":"swift","code":["request.jobs.enqueue(job: job, queue: .newQueue)"],"type":"codeListing"},{"text":"Managing Job Queues outside HBApplication","anchor":"Managing-Job-Queues-outside-HBApplication","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you prefer you can create your job queue separate from ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBApplication"},{"text":". Both the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue"},{"text":" are available. You could set this up as follows.","type":"text"}]},{"syntax":"swift","code":["\/\/ setup Redis connection and job queue. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let jobQueue = HBRedisJobQueue(redisConnectionPoolGroup: redisConnectionPoolGroup)","let jobQueueHandler = HBJobQueueHandler(","    queue: jobQueue, ","    numWorkers: 4, ","    eventLoopGroup: app.eventLoopGroup, ","    logger: app.logger",")","jobQueueHandler.start()","","\/\/ add routes to application","app.put(\"email\") { request -> HTTPResponseStatus in","    let job = SendEmailJob(","        to: \"joe@email.com\",","        subject: \"Testing Jobs\",","        message: \"...\"","    )","    try await jobQueue.enqueue(job: job)","    return .ok","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you do setup a job queue as above. You will need to manage the job queue lifecycle and call ","type":"text"},{"code":"jobQueueHandler.shutdown","type":"codeVoice"},{"text":", to shutdown the job queue and its workers, when you shutdown your application.","type":"text"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"abstract":[{"text":"Job queue protocol.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"title":"HBJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueFactory","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"HBJobQueueFactory","url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","abstract":[{"type":"text","text":"Factory class for Job Queue drivers"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","navigatorTitle":[{"text":"HBJobQueueFactory","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"abstract":[{"type":"text","text":"Redis implementation of job queues"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBRedisJobQueue","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisJobQueue","kind":"identifier"}],"title":"HBRedisJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"abstract":[],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","url":"\/documentation\/hummingbirdjobsredis","type":"topic","role":"collection","title":"HummingbirdJobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"role":"symbol","abstract":[{"type":"text","text":"Job Queue Error type"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueueError","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","type":"topic","title":"JobQueueError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"abstract":[{"text":"Identifier for Job","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"title":"JobIdentifier"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","type":"topic","role":"symbol","abstract":[{"text":"Job with asynchronous handler","type":"text"}],"title":"HBAsyncJob","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncJob"}],"url":"\/documentation\/hummingbirdjobs\/hbasyncjob","navigatorTitle":[{"kind":"identifier","text":"HBAsyncJob"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBJobQueueHandler","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","kind":"symbol","navigatorTitle":[{"text":"HBJobQueueHandler","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","title":"HBJobQueueHandler","type":"topic","abstract":[{"type":"text","text":"Object handling a single job queue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","kind":"symbol","title":"HBMemoryJobQueue","type":"topic","role":"symbol","abstract":[{"text":"In memory implementation of job queue driver. Stores jobs in a circular buffer","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBMemoryJobQueue","kind":"identifier"}],"navigatorTitle":[{"text":"HBMemoryJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","type":"topic","role":"collection","title":"HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"abstract":[{"text":"Protocol for job description","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","url":"\/documentation\/hummingbirdjobs\/hbjob","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}],"title":"HBJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBApplication":{"abstract":[{"type":"text","text":"Application class. Brings together all the components of Hummingbird together"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBApplication","url":"\/documentation\/hummingbirdfoundation\/hbapplication","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}],"title":"HBApplication"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","title":"HBJobQueueId","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}],"abstract":[{"text":"Job queue id","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueueid","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueId"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"type":"topic","title":"HBQueuedJob","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}],"abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"navigatorTitle":[{"text":"HBJobContainer","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","kind":"symbol","title":"HBJobContainer","abstract":[{"text":"Holder for all data related to a job","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobContainer","kind":"identifier"}]}}}