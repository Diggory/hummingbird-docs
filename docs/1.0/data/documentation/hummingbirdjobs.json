{"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference","isActive":true},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}]},{"type":"heading","anchor":"Setting-up-Jobs","level":3,"text":"Setting up Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to add a jobs driver to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},{"type":"text","text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first."}]},{"code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this example I called ","type":"text"},{"type":"codeVoice","code":"addJob"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" set to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" set to the number of threads you want to process the jobs on the queue.","type":"text"}]},{"type":"heading","anchor":"Creating-a-Job","level":3,"text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"text":"First you must define your job. Create an object that inherits from ","type":"text"},{"type":"codeVoice","code":"HBJob"},{"text":". This protocol requires you to implement a static variable ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" and a function ","type":"text"},{"type":"codeVoice","code":"func execute(on:logger)"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" variable should be unique to this job definition. It is used in the serialisation of the job. The ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" function does the work of the job and returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a ","type":"text"},{"type":"codeVoice","code":"sendEmail()"},{"text":" function.","type":"text"}]},{"code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"code":["SendEmailJob.register()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":". You can access the job queue via "},{"type":"codeVoice","code":"HBApplication.jobs.queue"},{"type":"text","text":". There is a helper object attached to "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" that reduces this to "},{"type":"codeVoice","code":"HBRequest.jobs.enqueue"},{"type":"text","text":"."}]},{"code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"enqueue","type":"codeVoice"},{"text":" returns an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that will be fulfilled once the job has been added to the queue.","type":"text"}]},{"type":"heading","anchor":"Multiple-Job-Queues","level":3,"text":"Multiple Job Queues"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id."}]},{"code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have the new queue id you can register your new queue with this id"}]},{"code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then when adding jobs you add the queue id to the ","type":"text"},{"code":"enqueue","type":"codeVoice"},{"text":" function","type":"text"}]},{"code":["request.jobs.enqueue(job: job, queue: .newQueue)"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Managing-Job-Queues-outside-HBApplication","level":3,"text":"Managing Job Queues outside HBApplication"},{"type":"paragraph","inlineContent":[{"text":"If you prefer you can create your job queue separate from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference","isActive":true},{"text":". Both the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","type":"reference","isActive":true},{"text":" are available. You could set this up as follows.","type":"text"}]},{"code":["\/\/ setup Redis connection and job queue. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let jobQueue = HBRedisJobQueue(redisConnectionPoolGroup: redisConnectionPoolGroup)","let jobQueueHandler = HBJobQueueHandler(","    queue: jobQueue, ","    numWorkers: 4, ","    eventLoopGroup: app.eventLoopGroup, ","    logger: app.logger",")","jobQueueHandler.start()","","\/\/ add routes to application","app.put(\"email\") { request -> HTTPResponseStatus in","    let job = SendEmailJob(","        to: \"joe@email.com\",","        subject: \"Testing Jobs\",","        message: \"...\"","    )","    try await jobQueue.enqueue(job: job)","    return .ok","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you do setup a job queue as above. You will need to manage the job queue lifecycle and call ","type":"text"},{"type":"codeVoice","code":"jobQueueHandler.shutdown"},{"text":", to shutdown the job queue and its workers, when you shutdown your application.","type":"text"}]}],"kind":"content"}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]},{"title":"Classes","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"HummingbirdJobs","externalID":"HummingbirdJobs","modules":[{"name":"HummingbirdJobs"}],"symbolKind":"module","roleHeading":"Framework","role":"collection"},"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobContainer","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"HBJobContainer","kind":"identifier"}],"abstract":[{"text":"Holder for all data related to a job","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","title":"HBJobContainer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"abstract":[{"text":"Factory class for Job Queue drivers","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueFactory"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","role":"symbol","title":"HBJobQueueFactory"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"title":"HBJobQueueId","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBJobQueueId","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","kind":"symbol","role":"symbol","abstract":[{"text":"Job queue id","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueueid"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"url":"\/documentation\/hummingbirdjobs\/hbjob","title":"HBJob","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","abstract":[{"type":"text","text":"Protocol for job description"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"role":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/jobidentifier","abstract":[{"text":"Identifier for Job","type":"text"}],"title":"JobIdentifier","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"title":"HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"abstract":[{"type":"text","text":"Job queue protocol."}],"navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","url":"\/documentation\/hummingbirdjobs\/jobqueueerror","title":"JobQueueError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobQueueError"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"abstract":[{"type":"text","text":"Job Queue Error type"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"kind":"symbol","title":"HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","kind":"symbol","url":"\/documentation\/hummingbirdjobsredis","abstract":[],"role":"collection","type":"topic","title":"HummingbirdJobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"kind":"symbol","title":"HBMemoryJobQueue","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBMemoryJobQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBAsyncJob"}],"abstract":[{"type":"text","text":"Job with asynchronous handler"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbasyncjob","title":"HBAsyncJob","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncJob"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"title":"HBRedisJobQueue","url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisJobQueue"}],"abstract":[{"text":"Redis implementation of job queues","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBRedisJobQueue"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"title":"HBJobQueueHandler","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","role":"symbol","navigatorTitle":[{"text":"HBJobQueueHandler","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","abstract":[{"type":"text","text":"Object handling a single job queue"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJobQueueHandler"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"title":"HBApplication","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}],"url":"\/documentation\/hummingbird\/hbapplication","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBQueuedJob","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"HBQueuedJob","kind":"identifier"}],"abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","title":"HBQueuedJob"}}}