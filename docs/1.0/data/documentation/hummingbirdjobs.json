{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference"},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Setting up Jobs","anchor":"Setting-up-Jobs","level":3},{"inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to add a jobs driver to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBApplication","type":"reference","isActive":true},{"type":"text","text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"]},{"inlineContent":[{"text":"In this example I called ","type":"text"},{"code":"addJob","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"numWorkers","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the ","type":"text"},{"code":"numWorkers","type":"codeVoice"},{"text":" set to the number of threads you want to process the jobs on the queue.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Creating a Job","anchor":"Creating-a-Job","level":3},{"inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"code":"HBJob","type":"codeVoice"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"code":"name","type":"codeVoice"},{"type":"text","text":" and a function "},{"code":"func execute(on:logger)","type":"codeVoice"},{"type":"text","text":". The "},{"code":"name","type":"codeVoice"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" function does the work of the job and returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"code":"sendEmail()","type":"codeVoice"},{"type":"text","text":" function."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["SendEmailJob.register()"]},{"inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":". You can access the job queue via "},{"type":"codeVoice","code":"HBApplication.jobs.queue"},{"type":"text","text":". There is a helper object attached to "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" that reduces this to "},{"type":"codeVoice","code":"HBRequest.jobs.enqueue"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"]},{"inlineContent":[{"type":"codeVoice","code":"enqueue"},{"text":" returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that will be fulfilled once the job has been added to the queue.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Multiple Job Queues","anchor":"Multiple-Job-Queues","level":3},{"inlineContent":[{"text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"]},{"inlineContent":[{"text":"Once you have the new queue id you can register your new queue with this id","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"]},{"inlineContent":[{"type":"text","text":"Then when adding jobs you add the queue id to the "},{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" function"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["request.jobs.enqueue(job: job, queue: .newQueue)"]},{"type":"heading","text":"Managing Job Queues outside HBApplication","anchor":"Managing-Job-Queues-outside-HBApplication","level":3},{"inlineContent":[{"type":"text","text":"If you prefer you can create your job queue separate from "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBApplication","isActive":true},{"type":"text","text":". Both the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","isActive":true},{"type":"text","text":" are available. You could set this up as follows."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ setup Redis connection and job queue. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let jobQueue = HBRedisJobQueue(redisConnectionPoolGroup: redisConnectionPoolGroup)","let jobQueueHandler = HBJobQueueHandler(","    queue: jobQueue, ","    numWorkers: 4, ","    eventLoopGroup: app.eventLoopGroup, ","    logger: app.logger",")","jobQueueHandler.start()","","\/\/ add routes to application","app.put(\"email\") { request -> HTTPResponseStatus in","    let job = SendEmailJob(","        to: \"joe@email.com\",","        subject: \"Testing Jobs\",","        message: \"...\"","    )","    try await jobQueue.enqueue(job: job)","    return .ok","}"]},{"inlineContent":[{"type":"text","text":"If you do setup a job queue as above. You will need to manage the job queue lifecycle and call "},{"type":"codeVoice","code":"jobQueueHandler.shutdown"},{"type":"text","text":", to shutdown the job queue and its workers, when you shutdown your application."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdjobs"]}],"kind":"symbol","topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]},{"title":"Classes","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"roleHeading":"Framework","title":"HummingbirdJobs","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}],"externalID":"HummingbirdJobs","role":"collection"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","title":"HBQueuedJob","role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueHandler"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueHandler"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","abstract":[{"type":"text","text":"Object handling a single job queue"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","title":"HBJobQueueHandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","title":"HBJobQueueFactory","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Factory class for Job Queue drivers","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJobQueueFactory"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","title":"HBJobQueue","role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","abstract":[{"text":"Job queue protocol.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBApplication":{"navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBApplication","title":"HBApplication","role":"symbol","url":"\/documentation\/hummingbirdauth\/hbapplication","abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMemoryJobQueue"}],"role":"symbol","kind":"symbol","title":"HBMemoryJobQueue","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","abstract":[{"text":"In memory implementation of job queue driver. Stores jobs in a circular buffer","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}],"title":"HBJob","url":"\/documentation\/hummingbirdjobs\/hbjob","kind":"symbol","abstract":[{"type":"text","text":"Protocol for job description"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"kind":"symbol","abstract":[{"type":"text","text":"Job Queue Error type"}],"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueueError","kind":"identifier"}],"navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","type":"topic","role":"symbol","title":"JobQueueError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobIdentifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"url":"\/documentation\/hummingbirdjobs\/jobidentifier","abstract":[{"text":"Identifier for Job","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","title":"JobIdentifier"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"abstract":[{"text":"Holder for all data related to a job","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobContainer","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","navigatorTitle":[{"text":"HBJobContainer","kind":"identifier"}],"role":"symbol","title":"HBJobContainer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueId"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueueid","abstract":[{"text":"Job queue id","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","title":"HBJobQueueId"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","title":"HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRedisJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisJobQueue"}],"role":"symbol","title":"HBRedisJobQueue","type":"topic","url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","abstract":[{"type":"text","text":"Redis implementation of job queues"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"role":"collection","title":"HummingbirdJobsRedis","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"topic","url":"\/documentation\/hummingbirdjobsredis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"kind":"symbol","navigatorTitle":[{"text":"HBAsyncJob","kind":"identifier"}],"type":"topic","title":"HBAsyncJob","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncJob","kind":"identifier"}],"abstract":[{"text":"Job with asynchronous handler","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/hbasyncjob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob"}}}