{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},{"type":"text","text":" is a lightweight, flexible server framework designed to require the minimum number of dependencies."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, support for adding channel handlers to extend the HTTP server, extending the core "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest"},{"type":"text","text":" types and providing custom encoding\/decoding of "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" objects."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The interface is fairly standard. Anyone who has had experience of Vapor, Express.js etc will recognise most of the APIs. Simple setup is as follows"}],"type":"paragraph"},{"code":["import Hummingbird","","let app = HBApplication(configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080)))","app.router.get(\"hello\") { request -> String in","    return \"Hello\"","}","try app.start()","app.wait()"],"type":"codeListing","syntax":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"sections":[],"kind":"symbol","metadata":{"roleHeading":"Framework","symbolKind":"module","title":"Hummingbird","modules":[{"name":"Hummingbird"}],"role":"collection","externalID":"Hummingbird"},"abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"topicSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]},{"title":"Application","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/ServiceLifecycleProvider"]},{"title":"Router","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncCallbackResponder"]},{"title":"Request\/Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBURL","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponse"]},{"title":"Encoding\/Decoding","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable"]},{"title":"Middleware","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware"]},{"title":"Extending the Application","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensible","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensions"]},{"title":"Connection Pool","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPool","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionSource","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnectionSource","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolError"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError"]},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FlatDictionary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParser"]}],"variants":[{"paths":["\/documentation\/hummingbird"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBExtensions":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBExtensions"}],"type":"topic","title":"HBExtensions","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hbextensions","abstract":[{"text":"Extend objects with additional member variables","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensions"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnection":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbconnection","abstract":[{"type":"text","text":"Protocol describing a single connection"}],"type":"topic","title":"HBConnection","navigatorTitle":[{"kind":"identifier","text":"HBConnection"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnection"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/FlatDictionary":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlatDictionary"}],"url":"\/documentation\/hummingbirdlambda\/flatdictionary","title":"FlatDictionary","abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"text":"value pairs, plus an array of hash keys for lookup for storage.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"FlatDictionary"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FlatDictionary"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddleware":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddleware","navigatorTitle":[{"text":"HBMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbmiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMiddleware","kind":"identifier"}],"abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"type":"topic","role":"symbol","title":"HBMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriver":{"url":"\/documentation\/hummingbirdlambda\/hbpersistdriver","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"role":"symbol","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"title":"HBPersistDriver","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBPersistDriver"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","kind":"article","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPoolGroup":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HBConnectionPoolGroup","kind":"identifier"}],"type":"topic","title":"HBConnectionPoolGroup","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hbconnectionpoolgroup","abstract":[{"text":"Array of connection pools associated with an EventLoopGroup.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPoolGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","url":"\/documentation\/hummingbirdredis","type":"topic","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPoolError":{"abstract":[{"text":"Errors generated by Connection Pool","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBConnectionPoolError","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionpoolerror","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolError","title":"HBConnectionPoolError","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPoolError"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBEnvironment":{"title":"HBEnvironment","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBEnvironment"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","url":"\/documentation\/hummingbirdlambda\/hbenvironment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBEnvironment"}],"type":"topic","abstract":[{"text":"Access environment variables","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncConnectionSource":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncConnectionSource","kind":"identifier"}],"type":"topic","title":"HBAsyncConnectionSource","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hbasyncconnectionsource","abstract":[{"text":"Source of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","type":"reference","isActive":true}],"role":"symbol","navigatorTitle":[{"text":"HBAsyncConnectionSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnectionSource"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncRouteHandler":{"url":"\/documentation\/hummingbirdlambda\/hbasyncroutehandler","navigatorTitle":[{"text":"HBAsyncRouteHandler","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Route Handler using async\/await methods"}],"title":"HBAsyncRouteHandler","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncRouteHandler","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncRouteHandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParameters":{"title":"HBParameters","role":"symbol","navigatorTitle":[{"text":"HBParameters","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","url":"\/documentation\/hummingbirdlambda\/hbparameters","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParameters","kind":"identifier"}],"type":"topic","abstract":[{"text":"Store for parameters key, value pairs extracted from URI","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBDateCache":{"abstract":[{"text":"Current date cache.","type":"text"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBDateCache","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","url":"\/documentation\/hummingbirdlambda\/hbdatecache","title":"HBDateCache","navigatorTitle":[{"text":"HBDateCache","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/ServiceLifecycleProvider":{"url":"\/documentation\/hummingbirdlambda\/servicelifecycleprovider","navigatorTitle":[{"text":"ServiceLifecycleProvider","kind":"identifier"}],"title":"ServiceLifecycleProvider","abstract":[{"text":"Define where we get the ServiceLifecycle from.","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServiceLifecycleProvider","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/ServiceLifecycleProvider","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncCallbackResponder":{"abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncCallbackResponder","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbasynccallbackresponder","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncCallbackResponder","title":"HBAsyncCallbackResponder","navigatorTitle":[{"text":"HBAsyncCallbackResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistError":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbpersisterror","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBPersistError"}],"abstract":[{"type":"text","text":"Errors return by persist framework"}],"type":"topic","role":"symbol","title":"HBPersistError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecodable":{"url":"\/documentation\/hummingbirdlambda\/hbrequestdecodable","navigatorTitle":[{"text":"HBRequestDecodable","kind":"identifier"}],"role":"symbol","abstract":[{"type":"codeVoice","code":"HBRouteHandler"},{"type":"text","text":" which uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to initialize it"}],"title":"HBRequestDecodable","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecodable","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecodable"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"role":"collection","title":"HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket","abstract":[{"text":"Adds support for upgrading HTTP connections to WebSocket.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMediaType":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMediaType","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","title":"HBMediaType","navigatorTitle":[{"text":"HBMediaType","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbmediatype","abstract":[{"type":"text","text":"Define media type of file"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParser":{"title":"HBParser","role":"symbol","navigatorTitle":[{"text":"HBParser","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParser","url":"\/documentation\/hummingbirdlambda\/hbparser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParser","kind":"identifier"}],"type":"topic","abstract":[{"text":"Reader object for parsing String buffers","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriverFactory":{"kind":"symbol","title":"HBPersistDriverFactory","url":"\/documentation\/hummingbirdlambda\/hbpersistdriverfactory","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriverFactory","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"abstract":[{"text":"Factory class for persist drivers","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLogRequestsMiddleware":{"navigatorTitle":[{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"abstract":[{"text":"Middleware outputting to log for every call to server","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","url":"\/documentation\/hummingbirdlambda\/hblogrequestsmiddleware","title":"HBLogRequestsMiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterGroup":{"title":"HBRouterGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"kind":"symbol","abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"text":" ","type":"text"},{"text":"suffix to the endpoint path","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbroutergroup","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestContext":{"title":"HBRequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRequestContext"}],"kind":"symbol","abstract":[{"type":"text","text":"Context that created HBRequest."}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbrequestcontext","navigatorTitle":[{"kind":"identifier","text":"HBRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"type":"topic","title":"HummingbirdXCT","kind":"symbol","url":"\/documentation\/hummingbirdxct","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest":{"title":"HBRequest","role":"symbol","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","url":"\/documentation\/hummingbirdlambda\/hbrequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}],"type":"topic","abstract":[{"text":"Holds all the values required to process a request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPool":{"abstract":[{"type":"text","text":"Connection Pool"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionPool"}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionpool","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPool","title":"HBConnectionPool","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPool"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionSource":{"abstract":[{"type":"text","text":"Source of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionSource","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionSource"}],"title":"HBConnectionSource","navigatorTitle":[{"kind":"identifier","text":"HBConnectionSource"}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionsource","role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCallbackResponder":{"title":"HBCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"kind":"symbol","abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbcallbackresponder","navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","title":"HBResponder","navigatorTitle":[{"text":"HBResponder","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbresponder","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation":{"title":"HummingbirdFoundation","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","type":"topic","url":"\/documentation\/hummingbirdfoundation","abstract":[{"type":"text","text":"Hummingbird features that require Foundation."}],"kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/extendinghummingbird","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","title":"Extending Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethodOptions":{"title":"HBRouterMethodOptions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBRouterMethodOptions","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Options available to routes","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbroutermethodoptions","navigatorTitle":[{"text":"HBRouterMethodOptions","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCORSMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","title":"HBCORSMiddleware","url":"\/documentation\/hummingbirdlambda\/hbcorsmiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCORSMiddleware"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBCORSMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","title":"HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"role":"collection","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouteHandler":{"abstract":[{"text":"Object for handling requests.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbroutehandler","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","title":"HBRouteHandler","navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"url":"\/documentation\/hummingbirdauth","role":"collection","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"title":"HummingbirdAuth","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddlewareGroup":{"navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareGroup"}],"abstract":[{"type":"text","text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareGroup"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","url":"\/documentation\/hummingbirdlambda\/hbmiddlewaregroup","title":"HBMiddlewareGroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","role":"collectionGroup","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplication":{"title":"HBApplication","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","url":"\/documentation\/hummingbirdlambda\/hbapplication","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}],"type":"topic","abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponse":{"title":"HBResponse","role":"symbol","navigatorTitle":[{"text":"HBResponse","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponse","url":"\/documentation\/hummingbirdlambda\/hbresponse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponse","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecoder":{"navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"type":"topic","kind":"symbol","title":"HBRequestDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"url":"\/documentation\/hummingbirdlambda\/hbrequestdecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"url":"\/documentation\/hummingbird\/errorhandling","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethods":{"url":"\/documentation\/hummingbirdlambda\/hbroutermethods","navigatorTitle":[{"text":"HBRouterMethods","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Conform to ","type":"text"},{"code":"HBRouterMethods","type":"codeVoice"},{"text":" to add standard router verb (get, post …) methods","type":"text"}],"title":"HBRouterMethods","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethods","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"url":"\/documentation\/hummingbirdcore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcompression","role":"collection","title":"HummingbirdCompression"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncConnection":{"abstract":[{"text":"Connection that supports async close","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBAsyncConnection"}],"url":"\/documentation\/hummingbirdlambda\/hbasyncconnection","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","title":"HBAsyncConnection","navigatorTitle":[{"text":"HBAsyncConnection","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncoder":{"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}],"type":"topic","kind":"symbol","title":"HBResponseEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"url":"\/documentation\/hummingbirdlambda\/hbresponseencoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncodable":{"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncodable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncodable"}],"type":"topic","kind":"symbol","title":"HBResponseEncodable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"type":"codeVoice","code":"HBApplication.encoder"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbirdlambda\/hbresponseencodable","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBURL":{"title":"HBURL","role":"symbol","navigatorTitle":[{"text":"HBURL","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBURL","url":"\/documentation\/hummingbirdlambda\/hburl","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBURL","kind":"identifier"}],"type":"topic","abstract":[{"text":"Simple URL parser","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncMiddleware":{"role":"symbol","title":"HBAsyncMiddleware","navigatorTitle":[{"text":"HBAsyncMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbasyncmiddleware","abstract":[{"text":"Middleware using async\/await","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncMiddleware","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncMiddleware","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HTTPHeadersPatch":{"title":"HTTPHeadersPatch","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPHeadersPatch"}],"kind":"symbol","abstract":[{"text":"Used to Patch HTTPHeaders. Remembers if a header was added in with ","type":"text"},{"code":"add","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"replaceOrAdd","type":"codeVoice"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","type":"topic","url":"\/documentation\/hummingbirdlambda\/httpheaderspatch","navigatorTitle":[{"kind":"identifier","text":"HTTPHeadersPatch"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseGenerator":{"title":"HBResponseGenerator","role":"symbol","navigatorTitle":[{"text":"HBResponseGenerator","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","url":"\/documentation\/hummingbirdlambda\/hbresponsegenerator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseGenerator","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Object that can generate a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdlambda","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterBuilder":{"title":"HBRouterBuilder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterBuilder"}],"kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterBuilder","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbrouterbuilder","navigatorTitle":[{"kind":"identifier","text":"HBRouterBuilder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMetricsMiddleware":{"title":"HBMetricsMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMetricsMiddleware"}],"kind":"symbol","abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbmetricsmiddleware","navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseCodable":{"navigatorTitle":[{"kind":"identifier","text":"HBResponseCodable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseCodable"}],"type":"topic","kind":"symbol","title":"HBResponseCodable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable","abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"url":"\/documentation\/hummingbirdlambda\/hbresponsecodable","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBExtensible":{"type":"topic","url":"\/documentation\/hummingbirdlambda\/hbextensible","navigatorTitle":[{"kind":"identifier","text":"HBExtensible"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensible"}],"role":"symbol","title":"HBExtensible","abstract":[{"type":"text","text":"Protocol for extensible classes"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensible","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"title":"HummingbirdFluent","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","type":"topic","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}]}}}