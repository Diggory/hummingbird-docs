{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"],"title":"Related Documentation"}],"sections":[],"primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},{"type":"text","text":" is a lightweight, flexible server framework designed to require the minimum number of dependencies."}]},{"type":"paragraph","inlineContent":[{"text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, support for adding channel handlers to extend the HTTP server, extending the core ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","type":"reference","isActive":true},{"text":" types and providing custom encoding\/decoding of ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" objects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The interface is fairly standard. Anyone who has had experience of Vapor, Express.js etc will recognise most of the APIs. Simple setup is as follows","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["import Hummingbird","","let app = HBApplication(configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080)))","app.router.get(\"hello\") { request -> String in","    return \"Hello\"","}","try app.start()","app.wait()"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird"]}],"hierarchy":{"paths":[[]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"kind":"symbol","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/ServiceLifecycleProvider"],"title":"Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncCallbackResponder"],"title":"Router"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBURL","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponse"],"title":"Request\/Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable"],"title":"Encoding\/Decoding"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware"],"title":"Middleware"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensible","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensions"],"title":"Extending the Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPool","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionSource","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnectionSource","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolError"],"title":"Connection Pool"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError"],"title":"Storage"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FlatDictionary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParser"],"title":"Miscellaneous"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver"],"title":"Classes"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensible"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensions"],"title":"Structures"}],"metadata":{"symbolKind":"module","modules":[{"name":"Hummingbird"}],"role":"collection","title":"Hummingbird","externalID":"Hummingbird","roleHeading":"Framework"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMetricsMiddleware":{"navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}],"abstract":[{"text":"Middleware recording metrics for each request","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/hbmetricsmiddleware","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMetricsMiddleware"}],"role":"symbol","title":"HBMetricsMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPool":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionPool"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPool"}],"title":"HBConnectionPool","abstract":[{"text":"Connection Pool","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPool","url":"\/documentation\/hummingbirdlambda\/hbconnectionpool","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCORSMiddleware":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBCORSMiddleware","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBCORSMiddleware","kind":"identifier"}],"title":"HBCORSMiddleware","abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","url":"\/documentation\/hummingbirdlambda\/hbcorsmiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethods":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"title":"HBRouterMethods","abstract":[{"type":"text","text":"Conform to "},{"code":"HBRouterMethods","type":"codeVoice"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","url":"\/documentation\/hummingbirdlambda\/hbroutermethods","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBSendableExtensible":{"title":"HBSendableExtensible","url":"\/documentation\/hummingbirdlambda\/hbsendableextensible","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HBSendableExtensible","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensible","type":"topic","abstract":[{"type":"text","text":"Protocol for extensible classes"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBSendableExtensible","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"title":"HummingbirdXCT","url":"\/documentation\/hummingbirdxct","abstract":[{"type":"text","text":"Test framework for Hummingbird"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"article","title":"Error Handling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseGenerator":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseGenerator"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponseGenerator"}],"title":"HBResponseGenerator","abstract":[{"type":"text","text":"Object that can generate a "},{"code":"Response","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","url":"\/documentation\/hummingbirdlambda\/hbresponsegenerator","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriverFactory":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriverFactory","url":"\/documentation\/hummingbirdlambda\/hbpersistdriverfactory","role":"symbol","abstract":[{"text":"Factory class for persist drivers","type":"text"}],"navigatorTitle":[{"text":"HBPersistDriverFactory","kind":"identifier"}],"kind":"symbol","title":"HBPersistDriverFactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBPersistDriverFactory"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncoder":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","url":"\/documentation\/hummingbirdlambda\/hbresponseencoder","type":"topic","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"title":"HBResponseEncoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"url":"\/documentation\/hummingbirdwebsocket","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","title":"HummingbirdWebSocket","role":"collection","type":"topic","abstract":[{"text":"Adds support for upgrading HTTP connections to WebSocket.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouteHandler":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"title":"HBRouteHandler","abstract":[{"type":"text","text":"Object for handling requests."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","url":"\/documentation\/hummingbirdlambda\/hbroutehandler","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncCallbackResponder":{"kind":"symbol","type":"topic","title":"HBAsyncCallbackResponder","role":"symbol","navigatorTitle":[{"text":"HBAsyncCallbackResponder","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbasynccallbackresponder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncCallbackResponder","kind":"identifier"}],"abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncCallbackResponder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncRouteHandler":{"abstract":[{"text":"Route Handler using async\/await methods","type":"text"}],"navigatorTitle":[{"text":"HBAsyncRouteHandler","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbasyncroutehandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncRouteHandler","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBAsyncRouteHandler","kind":"identifier"}],"title":"HBAsyncRouteHandler","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCallbackResponder":{"url":"\/documentation\/hummingbirdlambda\/hbcallbackresponder","title":"HBCallbackResponder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCallbackResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"text":"HBCallbackResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionSource":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBConnectionSource"}],"abstract":[{"text":"Source of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","isActive":true,"type":"reference"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBConnectionSource"}],"title":"HBConnectionSource","url":"\/documentation\/hummingbirdlambda\/hbconnectionsource","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionSource"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplication":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"title":"HBApplication","abstract":[{"type":"text","text":"Application class. Brings together all the components of Hummingbird together"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","url":"\/documentation\/hummingbirdlambda\/hbapplication","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecodable":{"type":"topic","navigatorTitle":[{"text":"HBRequestDecodable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecodable","role":"symbol","title":"HBRequestDecodable","kind":"symbol","abstract":[{"code":"HBRouteHandler","type":"codeVoice"},{"text":" which uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to initialize it","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/hbrequestdecodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecodable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBSendableExtensions":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBSendableExtensions"}],"abstract":[{"text":"Version of ","type":"text"},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" that requires all extensions are sendable"}],"title":"HBSendableExtensions","navigatorTitle":[{"kind":"identifier","text":"HBSendableExtensions"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensions","url":"\/documentation\/hummingbirdlambda\/hbsendableextensions"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPoolError":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBConnectionPoolError","kind":"identifier"}],"abstract":[{"type":"text","text":"Errors generated by Connection Pool"}],"title":"HBConnectionPoolError","navigatorTitle":[{"text":"HBConnectionPoolError","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolError","url":"\/documentation\/hummingbirdlambda\/hbconnectionpoolerror"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParameters":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParameters","kind":"identifier"}],"abstract":[{"type":"text","text":"Store for parameters key, value pairs extracted from URI"}],"title":"HBParameters","navigatorTitle":[{"text":"HBParameters","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","url":"\/documentation\/hummingbirdlambda\/hbparameters"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncMiddleware":{"title":"HBAsyncMiddleware","url":"\/documentation\/hummingbirdlambda\/hbasyncmiddleware","navigatorTitle":[{"kind":"identifier","text":"HBAsyncMiddleware"}],"abstract":[{"type":"text","text":"Middleware using async\/await"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncMiddleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncMiddleware"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/AsyncSequenceResponseBodyStreamer":{"title":"AsyncSequenceResponseBodyStreamer","abstract":[{"type":"text","text":"Response body streamer which uses an AsyncSequence as its input."}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceResponseBodyStreamer"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceResponseBodyStreamer"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseBodyStreamer","url":"\/documentation\/hummingbirdlambda\/asyncsequenceresponsebodystreamer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponse":{"title":"HBResponse","url":"\/documentation\/hummingbirdlambda\/hbresponse","navigatorTitle":[{"kind":"identifier","text":"HBResponse"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponse"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponder":{"title":"HBResponder","url":"\/documentation\/hummingbirdlambda\/hbresponder","navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"title":"Router","type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterBuilder":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterBuilder"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"type":"text","text":" that will follow these rules."}],"title":"HBRouterBuilder","navigatorTitle":[{"kind":"identifier","text":"HBRouterBuilder"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterBuilder","url":"\/documentation\/hummingbirdlambda\/hbrouterbuilder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","role":"collection","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"url":"\/documentation\/hummingbirdlambda","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"title":"HummingbirdCore","type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncConnectionSource":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncConnectionSource","kind":"identifier"}],"navigatorTitle":[{"text":"HBAsyncConnectionSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnectionSource","url":"\/documentation\/hummingbirdlambda\/hbasyncconnectionsource","type":"topic","abstract":[{"text":"Source of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","isActive":true,"type":"reference"}],"title":"HBAsyncConnectionSource","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncConnection":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","navigatorTitle":[{"text":"HBAsyncConnection","kind":"identifier"}],"kind":"symbol","type":"topic","title":"HBAsyncConnection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncConnection","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbasyncconnection","role":"symbol","abstract":[{"type":"text","text":"Connection that supports async close"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","role":"article","title":"Extending Hummingbird","kind":"article","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"url":"\/documentation\/hummingbird\/extendinghummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HTTPHeadersPatch":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPHeadersPatch","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPHeadersPatch"}],"title":"HTTPHeadersPatch","abstract":[{"text":"Used to Patch HTTPHeaders. Remembers if a header was added in with ","type":"text"},{"type":"codeVoice","code":"add"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"replaceOrAdd"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","url":"\/documentation\/hummingbirdlambda\/httpheaderspatch","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddlewareGroup":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareGroup"}],"abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}],"title":"HBMiddlewareGroup","navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareGroup"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","url":"\/documentation\/hummingbirdlambda\/hbmiddlewaregroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBEnvironment":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBEnvironment","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","navigatorTitle":[{"text":"HBEnvironment","kind":"identifier"}],"abstract":[{"type":"text","text":"Access environment variables"}],"url":"\/documentation\/hummingbirdlambda\/hbenvironment","type":"topic","role":"symbol","title":"HBEnvironment","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"url":"\/documentation\/hummingbirdcompression","role":"collection","title":"HummingbirdCompression","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","kind":"symbol","abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBExtensions":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"url":"\/documentation\/hummingbirdlambda\/hbextensions","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensions","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"abstract":[{"type":"text","text":"Extend objects with additional member variables"}],"title":"HBExtensions"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMemoryPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"kind":"symbol","type":"topic","title":"HBMemoryPersistDriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbmemorypersistdriver","role":"symbol","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLogRequestsMiddleware":{"abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"navigatorTitle":[{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"url":"\/documentation\/hummingbirdlambda\/hblogrequestsmiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"title":"HBLogRequestsMiddleware","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/FlatDictionary":{"title":"FlatDictionary","url":"\/documentation\/hummingbirdlambda\/flatdictionary","navigatorTitle":[{"kind":"identifier","text":"FlatDictionary"}],"abstract":[{"type":"text","text":"Provides Dictionary like indexing, but uses a flat array of key"},{"type":"text","text":" "},{"type":"text","text":"value pairs, plus an array of hash keys for lookup for storage."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FlatDictionary","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlatDictionary"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncodable":{"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncodable"}],"type":"topic","title":"HBResponseEncodable","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"code":"HBApplication.encoder","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncodable"}],"url":"\/documentation\/hummingbirdlambda\/hbresponseencodable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBDateCache":{"title":"HBDateCache","url":"\/documentation\/hummingbirdlambda\/hbdatecache","navigatorTitle":[{"text":"HBDateCache","kind":"identifier"}],"abstract":[{"type":"text","text":"Current date cache."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBDateCache","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPoolGroup":{"type":"topic","navigatorTitle":[{"text":"HBConnectionPoolGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolGroup","role":"symbol","title":"HBConnectionPoolGroup","kind":"symbol","abstract":[{"type":"text","text":"Array of connection pools associated with an EventLoopGroup."}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionpoolgroup","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBConnectionPoolGroup","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnection":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","navigatorTitle":[{"text":"HBConnection","kind":"identifier"}],"kind":"symbol","type":"topic","title":"HBConnection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBConnection","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbconnection","role":"symbol","abstract":[{"type":"text","text":"Protocol describing a single connection"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddleware":{"title":"HBMiddleware","url":"\/documentation\/hummingbirdlambda\/hbmiddleware","navigatorTitle":[{"kind":"identifier","text":"HBMiddleware"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddleware"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethodOptions":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"title":"HBRouterMethodOptions","abstract":[{"type":"text","text":"Options available to routes"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","url":"\/documentation\/hummingbirdlambda\/hbroutermethodoptions","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"title":"HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest":{"title":"HBRequest","url":"\/documentation\/hummingbirdlambda\/hbrequest","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","role":"collectionGroup","type":"topic","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterGroup":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"title":"HBRouterGroup","abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"text":" ","type":"text"},{"text":"suffix to the endpoint path","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","url":"\/documentation\/hummingbirdlambda\/hbroutergroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestContext":{"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Context that created HBRequest."}],"title":"HBRequestContext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","url":"\/documentation\/hummingbirdlambda\/hbrequestcontext","navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/ServiceLifecycleProvider":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/ServiceLifecycleProvider","title":"ServiceLifecycleProvider","url":"\/documentation\/hummingbirdlambda\/servicelifecycleprovider","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ServiceLifecycleProvider"}],"abstract":[{"type":"text","text":"Define where we get the ServiceLifecycle from."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ServiceLifecycleProvider"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation":{"title":"HummingbirdFoundation","url":"\/documentation\/hummingbirdfoundation","abstract":[{"type":"text","text":"Hummingbird features that require Foundation."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseCodable":{"navigatorTitle":[{"kind":"identifier","text":"HBResponseCodable"}],"type":"topic","title":"HBResponseCodable","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable","abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseCodable"}],"url":"\/documentation\/hummingbirdlambda\/hbresponsecodable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/AsyncSequenceResponseGenerator":{"navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceResponseGenerator"}],"type":"topic","title":"AsyncSequenceResponseGenerator","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseGenerator","abstract":[{"type":"text","text":"Wrapper object for AsyncSequence that conforms to "},{"code":"HBResponseGenerator","type":"codeVoice"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceResponseGenerator"}],"url":"\/documentation\/hummingbirdlambda\/asyncsequenceresponsegenerator","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","url":"\/documentation\/hummingbirdauth"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecoder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","url":"\/documentation\/hummingbirdlambda\/hbrequestdecoder","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"role":"symbol","title":"HBRequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriver":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","role":"symbol","title":"HBPersistDriver","kind":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"url":"\/documentation\/hummingbirdlambda\/hbpersistdriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParser":{"title":"HBParser","url":"\/documentation\/hummingbirdlambda\/hbparser","navigatorTitle":[{"text":"HBParser","kind":"identifier"}],"abstract":[{"type":"text","text":"Reader object for parsing String buffers"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParser","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBExtensible":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensible","kind":"symbol","abstract":[{"text":"Protocol for extensible classes","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensible"}],"navigatorTitle":[{"kind":"identifier","text":"HBExtensible"}],"title":"HBExtensible","type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbextensible"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBURL":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBURL"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBURL"}],"title":"HBURL","abstract":[{"text":"Simple URL parser","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBURL","url":"\/documentation\/hummingbirdlambda\/hburl","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistError":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError","url":"\/documentation\/hummingbirdlambda\/hbpersisterror","role":"symbol","abstract":[{"type":"text","text":"Errors return by persist framework"}],"navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"kind":"symbol","title":"HBPersistError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMediaType":{"title":"HBMediaType","url":"\/documentation\/hummingbirdlambda\/hbmediatype","navigatorTitle":[{"text":"HBMediaType","kind":"identifier"}],"abstract":[{"type":"text","text":"Define media type of file"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMediaType","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"url":"\/documentation\/hummingbirdfluent","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","role":"collection","type":"topic","abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}]}}}