{"metadata":{"role":"collection","symbolKind":"module","modules":[{"name":"HummingbirdMustache"}],"externalID":"HummingbirdMustache","title":"HummingbirdMustache","roleHeading":"Framework"},"abstract":[{"type":"text","text":"Mustache template engine."}],"kind":"symbol","seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[[]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about Mustache "},{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"While Hummingbird Mustache has been designed to be used with the Hummingbird server framework it has no dependencies and can be used as a standalone library.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Usage","anchor":"Usage","type":"heading"},{"inlineContent":[{"text":"Load your templates from the filesystem","type":"text"}],"type":"paragraph"},{"code":["let library = HBMustacheLibrary(\"folder\/my\/templates\/are\/in\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will look for all the files with the extension “.mustache” in the specified folder and subfolders and attempt to load them. Each file is registed with the name of the file (with subfolder, if inside a subfolder) minus the “mustache” extension."}],"type":"paragraph"},{"inlineContent":[{"text":"Render an object with a template","type":"text"}],"type":"paragraph"},{"code":["let output = library.render(object, withTemplate: \"myTemplate\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"code":"HummingbirdMustache","type":"codeVoice"},{"text":" treats an object as a set of key\/value pairs when rendering and will render both dictionaries and objects via ","type":"text"},{"code":"Mirror","type":"codeVoice"},{"text":" reflection. Find out more on how Mustache renders objects ","type":"text"},{"isActive":true,"identifier":"https:\/\/hummingbird-project.github.io\/hummingbird\/current\/hummingbird-mustache\/mustache-syntax.html","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"text":"Using with Hummingbird","anchor":"Using-with-Hummingbird","type":"heading"},{"inlineContent":[{"type":"text","text":"HummingbirdMustache doesn’t have any integration with Hummingbird as I wanted to keep the library dependency free. But if you are going to use the library with Hummingbird it is recommended you extend "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" to store an instance of your library."}],"type":"paragraph"},{"code":["extension HBApplication {","    var mustache: HBMustacheLibrary {","        get { self.extensions.get(\\.mustache) }","        set { self.extensions.set(\\.mustache, value: newValue) }","    }","}","","extension HBRequest {","    var mustache: HBMustacheLibrary { self.application.mustache }","}","\/\/ load mustache templates from templates folder","application.mustache = try .init(directory: \"templates\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can now access your mustache templates via "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" eg "},{"code":"HBRequest.mustache.render(obj, withTemplate: \"myTemplate\")","type":"codeVoice"}],"type":"paragraph"},{"level":2,"text":"Support","anchor":"Support","type":"heading"},{"inlineContent":[{"text":"Hummingbird Mustache supports all standard Mustache tags and is fully compliant with the Mustache ","type":"text"},{"identifier":"https:\/\/github.com\/mustache\/spec","type":"reference","isActive":true},{"text":" with the exception of the Lambda support.","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/hummingbirdmustache"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"title":"Additional Features"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTemplate"],"title":"Template Library"},{"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda"]},{"title":"Content Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheContentTypes"]},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBParser"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheTransformable":{"type":"topic","url":"\/documentation\/hummingbirdmustache\/hbmustachetransformable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheTransformable"}],"kind":"symbol","role":"symbol","title":"HBMustacheTransformable","navigatorTitle":[{"kind":"identifier","text":"HBMustacheTransformable"}],"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","type":"topic","url":"\/documentation\/hummingbird\/lambdas","abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"title":"Lambdas"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBParser":{"navigatorTitle":[{"text":"HBParser","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParser","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbparser","abstract":[{"text":"Reader object for parsing String buffers","type":"text"}],"role":"symbol","title":"HBParser","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBParser","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheCustomRenderable":{"abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"text":"HBMustacheCustomRenderable","kind":"identifier"}],"title":"HBMustacheCustomRenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheCustomRenderable","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecustomrenderable","kind":"symbol"},"https://github.com/mustache/spec":{"type":"link","url":"https:\/\/github.com\/mustache\/spec","identifier":"https:\/\/github.com\/mustache\/spec","title":"spec","titleInlineContent":[{"type":"text","text":"spec"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","title":"Transforms","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/transforms","role":"article","abstract":[{"text":"Transforming objects during render","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"abstract":[{"text":"Setting template render configuration settings.","type":"text"}],"title":"Pragmas\/Configuration variables","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","type":"topic","url":"\/documentation\/hummingbird\/pragmas","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheContentTypes":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheContentTypes","title":"HBMustacheContentTypes","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheContentTypes","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecontenttypes","type":"topic","abstract":[{"type":"text","text":"Map of strings to content types."}],"role":"symbol","navigatorTitle":[{"text":"HBMustacheContentTypes","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLibrary":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLibrary","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HBMustacheLibrary","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdmustache\/hbmustachelibrary","abstract":[{"type":"text","text":"Class holding a collection of mustache templates."}],"title":"HBMustacheLibrary","navigatorTitle":[{"kind":"identifier","text":"HBMustacheLibrary"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheContentType":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheContentType","title":"HBMustacheContentType","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheContentType","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecontenttype","type":"topic","abstract":[{"type":"text","text":"Protocol for content types"}],"role":"symbol","navigatorTitle":[{"text":"HBMustacheContentType","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheParent":{"url":"\/documentation\/hummingbirdmustache\/hbmustacheparent","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"title":"HBMustacheParent","navigatorTitle":[{"kind":"identifier","text":"HBMustacheParent"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheParent"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","title":"HummingbirdMustache","url":"\/documentation\/hummingbirdmustache","type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection"},"http://mustache.github.io/mustache.5.html":{"type":"link","url":"http:\/\/mustache.github.io\/mustache.5.html","identifier":"http:\/\/mustache.github.io\/mustache.5.html","title":"here","titleInlineContent":[{"type":"text","text":"here"}]},"https://hummingbird-project.github.io/hummingbird/current/hummingbird-mustache/mustache-syntax.html":{"type":"link","url":"https:\/\/hummingbird-project.github.io\/hummingbird\/current\/hummingbird-mustache\/mustache-syntax.html","identifier":"https:\/\/hummingbird-project.github.io\/hummingbird\/current\/hummingbird-mustache\/mustache-syntax.html","title":"here","titleInlineContent":[{"type":"text","text":"here"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMustacheLambda"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheLambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"type":"topic","kind":"symbol","title":"HBMustacheLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheTemplate":{"navigatorTitle":[{"text":"HBMustacheTemplate","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheTemplate","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachetemplate","abstract":[{"text":"Class holding Mustache template","type":"text"}],"role":"symbol","title":"HBMustacheTemplate","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTemplate","kind":"symbol"}}}