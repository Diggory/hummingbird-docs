{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles","generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" has two member variables "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"decode(_:from)"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" must conform to "},{"code":"HBResponseEncoder","type":"codeVoice"},{"type":"text","text":" which requires a "},{"code":"encode(_:from)","type":"codeVoice"},{"type":"text","text":" function that creates a "},{"code":"HBResponse","type":"codeVoice"},{"type":"text","text":" from a "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"]},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol that come with the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}],"type":"paragraph"},{"anchor":"Setting-up-HBApplication","text":"Setting up HBApplication","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The default implementations of "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" are "},{"type":"codeVoice","code":"Null"},{"type":"text","text":" implementations that will assert if used. So you have to setup your "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" before you can use "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" in Hummingbird. "},{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" includes two such implementations. "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"]},{"inlineContent":[{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"]},{"anchor":"Decoding-Requests","text":"Decoding Requests","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"code":"HBRequest.decode","type":"codeVoice"},{"type":"text","text":" method in the following manner"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"]},{"inlineContent":[{"text":"Like the standard ","type":"text"},{"code":"Decoder.decode","type":"codeVoice"},{"text":" functions ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". I use the function ","type":"text"},{"code":"HBRequest.failure","type":"codeVoice"},{"text":" to generate the failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Encoding-Responses","text":"Encoding Responses","type":"heading","level":2},{"inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"type":"codeVoice","code":"HBResponseEncodable"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" object from the above example we can do this","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"anchor":"DecodingEncoding-based-on-Request-headers","text":"Decoding\/Encoding based on Request headers","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","isActive":true},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","isActive":true},{"type":"text","text":" based on the “content-type” header."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"]},{"inlineContent":[{"text":"Using a similar manner you could also create a ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" based on the “accepts” header in the request.","type":"text"}],"type":"paragraph"}]}],"metadata":{"modules":[{"name":"Hummingbird"}],"title":"Encoding and Decoding","role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"],"title":"Reference"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"kind":"article","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"url":"\/documentation\/hummingbird\/hbresponseencoder","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","title":"HBResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBResponseEncoder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"title":"URLEncodedFormDecoder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","url":"\/documentation\/hummingbird\/router","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/extendinghummingbird","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"title":"Extending Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","url":"\/documentation\/index","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"role":"symbol","url":"\/documentation\/hummingbird\/hbrequestdecoder","kind":"symbol","title":"HBRequestDecoder","type":"topic","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}]}}}