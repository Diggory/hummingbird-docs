{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Encoding and Decoding"},"sections":[],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" has two member variables "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"decode(_:from)"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":"."}]},{"code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"encode(_:from)","type":"codeVoice"},{"text":" function that creates a ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value and the original request that generated it.","type":"text"}]},{"code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol that come with the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}]},{"type":"heading","anchor":"Setting-up-HBApplication","level":2,"text":"Setting up HBApplication"},{"type":"paragraph","inlineContent":[{"text":"The default implementations of ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"Null","type":"codeVoice"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" before you can use ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" in Hummingbird. ","type":"text"},{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" includes two such implementations. ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}]},{"code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}]},{"code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Decoding-Requests","level":2,"text":"Decoding Requests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"code":"HBRequest.decode","type":"codeVoice"},{"type":"text","text":" method in the following manner"}]},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Like the standard ","type":"text"},{"code":"Decoder.decode","type":"codeVoice"},{"text":" functions ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". I use the function ","type":"text"},{"code":"HBRequest.failure","type":"codeVoice"},{"text":" to generate the failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","anchor":"Encoding-Responses","level":2,"text":"Encoding Responses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}]},{"code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"DecodingEncoding-based-on-Request-headers","level":2,"text":"Decoding\/Encoding based on Request headers"},{"type":"paragraph","inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder","isActive":true},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","isActive":true},{"text":" based on the “content-type” header.","type":"text"}]},{"code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Using a similar manner you could also create a ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" based on the “accepts” header in the request.","type":"text"}]}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBResponseEncoder"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBResponseEncoder":{"role":"symbol","title":"HBResponseEncoder","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBResponseEncoder","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}],"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"url":"\/documentation\/hummingbirdauth\/hbresponseencoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"title":"URLEncodedFormDecoder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","role":"collection","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","kind":"article","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBRequestDecoder":{"title":"HBRequestDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdauth\/hbrequestdecoder","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"type":"topic","role":"article","url":"\/documentation\/hummingbird\/extendinghummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","title":"Extending Hummingbird","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"kind":"article"}}}