{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"],"title":"Reference"}],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles","generated":true}],"metadata":{"role":"collectionGroup","title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"code":"HBApplication","type":"codeVoice"},{"text":" has two member variables ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" which define how requests\/responses are decoded\/encoded. The ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBRequestDecoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"decode(_:from)","type":"codeVoice"},{"text":" function that decodes a ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" must conform to ","type":"text"},{"type":"codeVoice","code":"HBResponseEncoder"},{"text":" which requires a ","type":"text"},{"type":"codeVoice","code":"encode(_:from)"},{"text":" function that creates a ","type":"text"},{"type":"codeVoice","code":"HBResponse"},{"text":" from a ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" value and the original request that generated it.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"]},{"inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" protocol that come with the "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system except you have additional information from the "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" class on how you might want to decode\/encode your data."}],"type":"paragraph"},{"anchor":"Setting-up-HBApplication","level":2,"text":"Setting up HBApplication","type":"heading"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" are ","type":"text"},{"type":"codeVoice","code":"Null"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" before you can use ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" in Hummingbird. ","type":"text"},{"type":"codeVoice","code":"HummingbirdFoundation"},{"text":" includes two such implementations. ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"]},{"inlineContent":[{"code":"HummingbirdFoundation","type":"codeVoice"},{"type":"text","text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"]},{"anchor":"Decoding-Requests","level":2,"text":"Decoding Requests","type":"heading"},{"inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" method in the following manner","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"]},{"inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Decoder.decode"},{"type":"text","text":" functions "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". I use the function "},{"type":"codeVoice","code":"HBRequest.failure"},{"type":"text","text":" to generate the failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Encoding-Responses","level":2,"text":"Encoding Responses","type":"heading"},{"inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"anchor":"DecodingEncoding-based-on-Request-headers","level":2,"text":"Decoding\/Encoding based on Request headers","type":"heading"},{"inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"]},{"inlineContent":[{"text":"Using a similar manner you could also create a ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" based on the “accepts” header in the request.","type":"text"}],"type":"paragraph"}]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","url":"\/documentation\/index","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"title":"URLEncodedFormDecoder","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","type":"topic","url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","url":"\/documentation\/hummingbird\/router","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"title":"HBResponseEncoder","type":"topic","url":"\/documentation\/hummingbird\/hbresponseencoder","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","role":"symbol","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBResponseEncoder"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrequestdecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","type":"topic","title":"HBRequestDecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","type":"topic","kind":"article","role":"article","title":"Extending Hummingbird","url":"\/documentation\/hummingbird\/extendinghummingbird"}}}