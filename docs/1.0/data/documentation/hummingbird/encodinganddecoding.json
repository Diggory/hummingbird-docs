{"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBResponseEncoder"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"text":" has two member variables ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" which define how requests\/responses are decoded\/encoded. The ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" must conform to ","type":"text"},{"type":"codeVoice","code":"HBRequestDecoder"},{"text":" which requires a ","type":"text"},{"type":"codeVoice","code":"decode(_:from)"},{"text":" function that decodes a ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"encode(_:from)"},{"type":"text","text":" function that creates a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system except you have additional information from the "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" class on how you might want to decode\/encode your data."}],"type":"paragraph"},{"anchor":"Setting-up-HBApplication","level":2,"type":"heading","text":"Setting up HBApplication"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"Null","type":"codeVoice"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" before you can use ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" in Hummingbird. ","type":"text"},{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" includes two such implementations. ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"type":"codeListing","syntax":"swift"},{"anchor":"Decoding-Requests","level":2,"type":"heading","text":"Decoding Requests"},{"inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"code":"HBRequest.decode","type":"codeVoice"},{"type":"text","text":" method in the following manner"}],"type":"paragraph"},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Like the standard ","type":"text"},{"code":"Decoder.decode","type":"codeVoice"},{"text":" functions ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". I use the function ","type":"text"},{"code":"HBRequest.failure","type":"codeVoice"},{"text":" to generate the failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Encoding-Responses","level":2,"type":"heading","text":"Encoding Responses"},{"inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"code":"HBResponseEncodable","type":"codeVoice"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"code":"User","type":"codeVoice"},{"type":"text","text":" object from the above example we can do this"}],"type":"paragraph"},{"code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"anchor":"DecodingEncoding-based-on-Request-headers","level":2,"type":"heading","text":"Decoding\/Encoding based on Request headers"},{"inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}],"type":"paragraph"},{"code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Encoding and Decoding"},"kind":"article","sections":[],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","kind":"article","role":"collectionGroup","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","url":"\/documentation\/hummingbird\/router","kind":"article","role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBResponseEncoder":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}],"abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBResponseEncoder","title":"HBResponseEncoder","url":"\/documentation\/hummingbirdauth\/hbresponseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","role":"collection","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"url":"\/documentation\/hummingbird\/extendinghummingbird","abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","type":"topic","title":"Extending Hummingbird","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","url":"\/documentation\/index","kind":"article","role":"collection","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"type":"topic","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"title":"URLEncodedFormDecoder","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBRequestDecoder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder","title":"HBRequestDecoder","type":"topic","url":"\/documentation\/hummingbirdauth\/hbrequestdecoder","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"role":"symbol","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]}}}