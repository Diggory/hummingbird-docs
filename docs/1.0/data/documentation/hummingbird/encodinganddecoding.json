{"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Encoding and Decoding"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBResponseEncoder"]}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" has two member variables "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" must conform to "},{"code":"HBRequestDecoder","type":"codeVoice"},{"type":"text","text":" which requires a "},{"code":"decode(_:from)","type":"codeVoice"},{"type":"text","text":" function that decodes a "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"encode(_:from)"},{"type":"text","text":" function that creates a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" protocol that come with the ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system except you have additional information from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}],"type":"paragraph"},{"text":"Setting up HBApplication","level":2,"type":"heading","anchor":"Setting-up-HBApplication"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"Null","type":"codeVoice"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" before you can use ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" in Hummingbird. ","type":"text"},{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" includes two such implementations. ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"syntax":"swift","type":"codeListing"},{"text":"Decoding Requests","level":2,"type":"heading","anchor":"Decoding-Requests"},{"inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" method in the following manner","type":"text"}],"type":"paragraph"},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Decoder.decode","type":"codeVoice"},{"type":"text","text":" functions "},{"code":"HBRequest.decode","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":". I use the function "},{"code":"HBRequest.failure","type":"codeVoice"},{"type":"text","text":" to generate the failed "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Encoding Responses","level":2,"type":"heading","anchor":"Encoding-Responses"},{"inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"type":"codeVoice","code":"HBResponseEncodable"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" object from the above example we can do this","type":"text"}],"type":"paragraph"},{"code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"syntax":"swift","type":"codeListing"},{"text":"Decoding\/Encoding based on Request headers","level":2,"type":"heading","anchor":"DecodingEncoding-based-on-Request-headers"},{"inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequestDecoder","type":"reference"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","type":"reference"},{"text":" based on the “content-type” header.","type":"text"}],"type":"paragraph"},{"code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","url":"\/documentation\/hummingbird\/extendinghummingbird","title":"Extending Hummingbird","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBResponseEncoder":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/hbresponseencoder","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBResponseEncoder","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"kind":"symbol","title":"HBResponseEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRequestDecoder":{"url":"\/documentation\/hummingbirdfoundation\/hbrequestdecoder","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"role":"symbol","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequestDecoder","title":"HBRequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","kind":"article","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","title":"Router","url":"\/documentation\/hummingbird\/router","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"kind":"symbol","url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","title":"URLEncodedFormDecoder","navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"role":"symbol"}}}