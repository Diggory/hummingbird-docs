{"metadata":{"title":"Extending Hummingbird","role":"article","roleHeading":"Article","modules":[{"name":"Hummingbird"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" types both contain an ","type":"text"},{"code":"HBExtensions","type":"codeVoice"},{"text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The code above adds the member variable "},{"type":"codeVoice","code":"myExt"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" class. I use the "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" to the variable as the key. While it would be possible to use another "},{"code":"KeyPath","type":"codeVoice"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing ","type":"text"},{"code":"HBApplication.myExt","type":"codeVoice"},{"text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For extensions to "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" to include a "},{"type":"codeVoice","code":"AWSClient"},{"type":"text","text":" from the package "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/soto-project\/soto"},{"type":"text","text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you."}],"type":"paragraph"},{"syntax":"swift","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Note, In this example I have placed everything inside a containing struct ","type":"text"},{"code":"AWS","type":"codeVoice"},{"text":", so the KeyPath ","type":"text"},{"code":"\\.aws.client","type":"codeVoice"},{"text":" needs to include the name of containing member variable ","type":"text"},{"code":"aws","type":"codeVoice"},{"text":" in it as well.","type":"text"}],"type":"paragraph"},{"text":"Reference","anchor":"Reference","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"}],"kind":"content"}],"kind":"article","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","role":"collection","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","kind":"article","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBExtensions":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","navigatorTitle":[{"text":"HBExtensions","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdauth\/hbextensions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"kind":"symbol","title":"HBExtensions","abstract":[{"type":"text","text":"Extend objects with additional member variables"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"https://github.com/soto-project/soto":{"title":"Soto","url":"https:\/\/github.com\/soto-project\/soto","identifier":"https:\/\/github.com\/soto-project\/soto","titleInlineContent":[{"type":"codeVoice","code":"Soto"}],"type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","kind":"article"}}}