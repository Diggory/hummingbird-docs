{"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","metadata":{"title":"Extending Hummingbird","role":"article","roleHeading":"Article","modules":[{"name":"Hummingbird"}]},"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" and "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" types both contain an "},{"code":"HBExtensions","type":"codeVoice"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"code":"myExt","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" class. I use the ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"code":"HBApplication.myExt","type":"codeVoice"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"inlineContent":[{"type":"text","text":"For extensions to "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" to include a "},{"type":"codeVoice","code":"AWSClient"},{"type":"text","text":" from the package "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/soto-project\/soto"},{"type":"text","text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"]},{"inlineContent":[{"text":"Note, In this example I have placed everything inside a containing struct ","type":"text"},{"code":"AWS","type":"codeVoice"},{"text":", so the KeyPath ","type":"text"},{"code":"\\.aws.client","type":"codeVoice"},{"text":" needs to include the name of containing member variable ","type":"text"},{"code":"aws","type":"codeVoice"},{"text":" in it as well.","type":"text"}],"type":"paragraph"},{"anchor":"Reference","level":3,"text":"Reference","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","kind":"article","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","title":"Error Handling","role":"article","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","kind":"article","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBExtensions":{"url":"\/documentation\/hummingbirdauth\/hbextensions","title":"HBExtensions","role":"symbol","abstract":[{"type":"text","text":"Extend objects with additional member variables"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensions"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions"},"https://github.com/soto-project/soto":{"titleInlineContent":[{"code":"Soto","type":"codeVoice"}],"type":"link","title":"Soto","url":"https:\/\/github.com\/soto-project\/soto","identifier":"https:\/\/github.com\/soto-project\/soto"}}}