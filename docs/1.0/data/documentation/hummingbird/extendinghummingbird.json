{"metadata":{"modules":[{"name":"Hummingbird"}],"role":"article","title":"Extending Hummingbird","roleHeading":"Article"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" and "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" types both contain an "},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}]},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"code":"myExt","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" class. I use the ","type":"text"},{"type":"codeVoice","code":"KeyPath"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"type":"codeVoice","code":"KeyPath"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"type":"codeVoice","code":"HBApplication.myExt"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}]},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For extensions to "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" to include a "},{"code":"AWSClient","type":"codeVoice"},{"type":"text","text":" from the package "},{"identifier":"https:\/\/github.com\/soto-project\/soto","isActive":true,"type":"reference"},{"type":"text","text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you."}]},{"code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, In this example I have placed everything inside a containing struct "},{"code":"AWS","type":"codeVoice"},{"type":"text","text":", so the KeyPath "},{"code":"\\.aws.client","type":"codeVoice"},{"type":"text","text":" needs to include the name of containing member variable "},{"code":"aws","type":"codeVoice"},{"type":"text","text":" in it as well."}]},{"level":3,"anchor":"Reference","type":"heading","text":"Reference"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBExtensions"}]}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBExtensions":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBExtensions","url":"\/documentation\/hummingbirdfoundation\/hbextensions","role":"symbol","abstract":[{"type":"text","text":"Extend objects with additional member variables"}],"navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"type":"topic","title":"HBExtensions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensions"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","type":"topic","role":"collectionGroup","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router","type":"topic","role":"collectionGroup","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","kind":"article","type":"topic","role":"article","title":"Error Handling"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","type":"topic","role":"collection","kind":"article","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/index"},"https://github.com/soto-project/soto":{"identifier":"https:\/\/github.com\/soto-project\/soto","title":"Soto","type":"link","titleInlineContent":[{"code":"Soto","type":"codeVoice"}],"url":"https:\/\/github.com\/soto-project\/soto"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","role":"collection","kind":"symbol","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"}}}