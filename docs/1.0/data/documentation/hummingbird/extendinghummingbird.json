{"metadata":{"title":"Extending Hummingbird","modules":[{"name":"Hummingbird"}],"role":"article","roleHeading":"Article"},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" and "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" types both contain an "},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}]},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"type":"codeVoice","code":"myExt"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" class. I use the ","type":"text"},{"type":"codeVoice","code":"KeyPath"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"type":"codeVoice","code":"KeyPath"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing ","type":"text"},{"code":"HBApplication.myExt","type":"codeVoice"},{"text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"For extensions to ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" to include a ","type":"text"},{"code":"AWSClient","type":"codeVoice"},{"text":" from the package ","type":"text"},{"identifier":"https:\/\/github.com\/soto-project\/soto","isActive":true,"type":"reference"},{"text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, In this example I have placed everything inside a containing struct "},{"type":"codeVoice","code":"AWS"},{"type":"text","text":", so the KeyPath "},{"type":"codeVoice","code":"\\.aws.client"},{"type":"text","text":" needs to include the name of containing member variable "},{"type":"codeVoice","code":"aws"},{"type":"text","text":" in it as well."}]},{"level":3,"type":"heading","text":"Reference","anchor":"Reference"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","type":"reference","isActive":true}],"type":"paragraph"}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","references":{"https://github.com/soto-project/soto":{"url":"https:\/\/github.com\/soto-project\/soto","identifier":"https:\/\/github.com\/soto-project\/soto","title":"Soto","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Soto"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","kind":"article","role":"collectionGroup","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","url":"\/documentation\/hummingbird\/router","kind":"article","role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBExtensions":{"abstract":[{"text":"Extend objects with additional member variables","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbextensions","title":"HBExtensions","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HBExtensions","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","title":"Encoding and Decoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","role":"collection","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","url":"\/documentation\/index","kind":"article","role":"collection","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]}}}