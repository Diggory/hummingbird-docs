{"metadata":{"modules":[{"name":"Hummingbird"}],"title":"Extending Hummingbird","roleHeading":"Article","role":"article"},"primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" types both contain an ","type":"text"},{"type":"codeVoice","code":"HBExtensions"},{"text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"code":"myExt","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" class. I use the ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing ","type":"text"},{"type":"codeVoice","code":"HBApplication.myExt"},{"text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For extensions to "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" to include a "},{"type":"codeVoice","code":"AWSClient"},{"type":"text","text":" from the package "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/soto-project\/soto"},{"type":"text","text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you."}]},{"syntax":"swift","type":"codeListing","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, In this example I have placed everything inside a containing struct "},{"type":"codeVoice","code":"AWS"},{"type":"text","text":", so the KeyPath "},{"type":"codeVoice","code":"\\.aws.client"},{"type":"text","text":" needs to include the name of containing member variable "},{"type":"codeVoice","code":"aws"},{"type":"text","text":" in it as well."}]},{"anchor":"Reference","type":"heading","level":3,"text":"Reference"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","type":"reference"}]}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","role":"collectionGroup"},"https://github.com/soto-project/soto":{"title":"Soto","url":"https:\/\/github.com\/soto-project\/soto","identifier":"https:\/\/github.com\/soto-project\/soto","type":"link","titleInlineContent":[{"code":"Soto","type":"codeVoice"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBExtensions":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","url":"\/documentation\/hummingbird\/hbextensions","abstract":[{"text":"Extend objects with additional member variables","type":"text"}],"title":"HBExtensions","navigatorTitle":[{"text":"HBExtensions","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","url":"\/documentation\/hummingbird\/router","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","url":"\/documentation\/index","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling"}}}