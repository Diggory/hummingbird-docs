{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","interfaceLanguage":"swift"},"sections":[],"kind":"article","abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" and "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" types both contain an "},{"code":"HBExtensions","type":"codeVoice"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}],"type":"paragraph"},{"type":"codeListing","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"code":"myExt","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" class. I use the ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"type":"codeVoice","code":"HBApplication.myExt"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}],"type":"paragraph"},{"type":"codeListing","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"For extensions to ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" to include a ","type":"text"},{"code":"AWSClient","type":"codeVoice"},{"text":" from the package ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/soto-project\/soto"},{"text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Note, In this example I have placed everything inside a containing struct ","type":"text"},{"type":"codeVoice","code":"AWS"},{"text":", so the KeyPath ","type":"text"},{"type":"codeVoice","code":"\\.aws.client"},{"text":" needs to include the name of containing member variable ","type":"text"},{"type":"codeVoice","code":"aws"},{"text":" in it as well.","type":"text"}],"type":"paragraph"},{"anchor":"Reference","text":"Reference","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","isActive":true}]}]}],"type":"unorderedList"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Article","title":"Extending Hummingbird","role":"article","modules":[{"name":"Hummingbird"}]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true,"title":"Articles"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","url":"\/documentation\/hummingbird\/errorhandling","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","role":"collectionGroup","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","title":"Logging, Metrics and Tracing"},"https://github.com/soto-project/soto":{"identifier":"https:\/\/github.com\/soto-project\/soto","url":"https:\/\/github.com\/soto-project\/soto","type":"link","title":"Soto","titleInlineContent":[{"type":"codeVoice","code":"Soto"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"url":"\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBExtensions":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBExtensions"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"role":"symbol","abstract":[{"text":"Extend objects with additional member variables","type":"text"}],"url":"\/documentation\/hummingbird\/hbextensions","kind":"symbol","title":"HBExtensions"}}}