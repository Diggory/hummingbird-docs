{"metadata":{"modules":[{"name":"Hummingbird"}],"role":"article","roleHeading":"Article","title":"Extending Hummingbird"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" and "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" types both contain an "},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}]},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"code":"myExt","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" class. I use the ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"code":"KeyPath","type":"codeVoice"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"code":"HBApplication.myExt","type":"codeVoice"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}]},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For extensions to ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" to include a ","type":"text"},{"type":"codeVoice","code":"AWSClient"},{"text":" from the package ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/soto-project\/soto"},{"text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you.","type":"text"}]},{"code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, In this example I have placed everything inside a containing struct "},{"type":"codeVoice","code":"AWS"},{"type":"text","text":", so the KeyPath "},{"type":"codeVoice","code":"\\.aws.client"},{"type":"text","text":" needs to include the name of containing member variable "},{"type":"codeVoice","code":"aws"},{"type":"text","text":" in it as well."}]},{"anchor":"Reference","level":3,"type":"heading","text":"Reference"},{"items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBExtensions"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","role":"collectionGroup","title":"Encoding and Decoding"},"https://github.com/soto-project/soto":{"type":"link","titleInlineContent":[{"code":"Soto","type":"codeVoice"}],"title":"Soto","url":"https:\/\/github.com\/soto-project\/soto","identifier":"https:\/\/github.com\/soto-project\/soto"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","role":"collectionGroup","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","type":"topic","role":"collectionGroup","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBExtensions":{"abstract":[{"type":"text","text":"Extend objects with additional member variables"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBExtensions","url":"\/documentation\/hummingbirdfoundation\/hbextensions","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensions"}],"title":"HBExtensions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","role":"article","title":"Error Handling"}}}