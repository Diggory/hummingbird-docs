{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"Hummingbird"}],"title":"Extending Hummingbird","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" and "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" types both contain an "},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"inlineContent":[{"type":"text","text":"The code above adds the member variable "},{"type":"codeVoice","code":"myExt"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" class. I use the "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" to the variable as the key. While it would be possible to use another "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" as the key in most situations it doesnâ€™t really make sense."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"type":"codeVoice","code":"HBApplication.myExt"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"inlineContent":[{"text":"For extensions to ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" to include a ","type":"text"},{"type":"codeVoice","code":"AWSClient"},{"text":" from the package ","type":"text"},{"identifier":"https:\/\/github.com\/soto-project\/soto","type":"reference","isActive":true},{"text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"]},{"inlineContent":[{"text":"Note, In this example I have placed everything inside a containing struct ","type":"text"},{"code":"AWS","type":"codeVoice"},{"text":", so the KeyPath ","type":"text"},{"code":"\\.aws.client","type":"codeVoice"},{"text":" needs to include the name of containing member variable ","type":"text"},{"code":"aws","type":"codeVoice"},{"text":" in it as well.","type":"text"}],"type":"paragraph"},{"text":"Reference","type":"heading","level":3,"anchor":"Reference"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","isActive":true}]}]}],"type":"unorderedList"}]}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles"}],"abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"url":"\/documentation\/hummingbird\/errorhandling","kind":"article","type":"topic","role":"article","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","role":"collectionGroup","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBExtensions":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdauth\/hbextensions","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","abstract":[{"text":"Extend objects with additional member variables","type":"text"}],"title":"HBExtensions","navigatorTitle":[{"text":"HBExtensions","kind":"identifier"}]},"https://github.com/soto-project/soto":{"titleInlineContent":[{"type":"codeVoice","code":"Soto"}],"type":"link","title":"Soto","identifier":"https:\/\/github.com\/soto-project\/soto","url":"https:\/\/github.com\/soto-project\/soto"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","type":"topic","url":"\/documentation\/index","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","title":"Logging, Metrics and Tracing","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}]}}}