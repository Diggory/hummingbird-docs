{"metadata":{"roleHeading":"Article","title":"Authenticators","role":"article","modules":[{"name":"HummingbirdAuth"}]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Request authentication middleware"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"]},{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then augment the request with the authentication data. Authenticators should conform to protocol "},{"type":"codeVoice","code":"HBAuthenticator"},{"type":"text","text":". This requires you implement the function "},{"type":"codeVoice","code":"authenticate(request: HBRequest) -> EventLoopFuture<Value?>"},{"type":"text","text":" where "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is the authentication data and conforms to the protocol "},{"type":"codeVoice","code":"HBAuthenticatable"},{"type":"text","text":"."}]},{"anchor":"Usage","text":"Usage","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"code":"User","type":"codeVoice"},{"type":"text","text":" struct, otherwise it returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate(request: HBRequest) -> EventLoopFuture<User?> {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.auth.basic","        guard let basic = request.authBasic else { return request.success(nil) }","","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        return database.getUserWithUsername(basic.username, on: request.eventLoop).flatMap { user in","            \/\/ did we find a user","            guard let user = user else { return request.success(nil) }","            \/\/ verify password against password hash stored in database. If valid","            \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt. ","            return Bcrypt.verify(basic.password, hash: user.passwordHash, for: request).map { success in","                guard success else { return nil }","                return user","            }","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"syntax":"swift","code":["app.middleware.add(BasicAuthenticator())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"request.authGet"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = request.authGet(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"reference","isActive":true},{"type":"text","text":" after your authentication middleware"}]},{"syntax":"swift","type":"codeListing","code":["app.middleware.add(BasicAuthenticator())","app.middleware.add(IsAuthenticatedMiddleware<User>())"]},{"type":"paragraph","inlineContent":[{"text":"Or you can use ","type":"text"},{"code":"request.requireAuth","type":"codeVoice"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}]}]}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"title":"Sessions","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","type":"topic","kind":"article","abstract":[{"text":"Session based authentication","type":"text"}],"url":"\/documentation\/hummingbird\/sessions","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","url":"\/documentation\/hummingbirdauth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"title":"IsAuthenticatedMiddleware","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"type":"topic","title":"One Time Passwords","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","abstract":[{"type":"text","text":"A one time password (OTP) valid for only one login session."}],"url":"\/documentation\/hummingbird\/onetimepasswords","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"title":"HBAuthenticator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","type":"topic","kind":"symbol","navigatorTitle":[{"text":"HBAuthenticator","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthenticator","kind":"identifier"}],"abstract":[{"text":"Middleware to check if a request is authenticated and then augment the request with","type":"text"},{"text":" ","type":"text"},{"text":"authentication data.","type":"text"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticator","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"title":"HBAuthenticatable","role":"symbol","abstract":[{"type":"text","text":"Protocol for objects that can be returned by an "},{"type":"codeVoice","code":"HBAuthenticator"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"HBAuthenticatable"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticatable"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","url":"\/documentation\/hummingbirdauth\/hbauthenticatable"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAsyncAuthenticator":{"url":"\/documentation\/hummingbirdauth\/hbasyncauthenticator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncAuthenticator","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBAsyncAuthenticator","kind":"identifier"}],"abstract":[{"text":"Async version of Middleware to check if a request is authenticated and then augment the request with","type":"text"},{"text":" ","type":"text"},{"text":"authentication data.","type":"text"}],"title":"HBAsyncAuthenticator"}}}