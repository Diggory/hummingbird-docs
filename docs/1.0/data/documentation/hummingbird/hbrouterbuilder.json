{"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncCallbackResponder"],"title":"Router","generated":true}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]]},"relationshipsSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"variants":[{"paths":["\/documentation\/hummingbird\/hbrouterbuilder"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}],"metadata":{"title":"HBRouterBuilder","externalID":"s:11Hummingbird15HBRouterBuilderC","role":"symbol","roleHeading":"Class","navigatorTitle":[{"text":"HBRouterBuilder","kind":"identifier"}],"modules":[{"name":"HummingbirdLambda"}],"symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterBuilder","kind":"identifier"}]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/init()"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/middlewares"],"title":"Instance Properties"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/add(_:method:responder:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/buildRouter()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/group(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/on(_:method:options:use:)-3277t","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/on(_:method:options:use:)-4t19t"],"title":"Instance Methods"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/HBRouterMethods-Implementations"],"title":"Default Implementations","generated":true}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterBuilder"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"code":"HBRouterBuilder","type":"codeVoice"},{"type":"text","text":" requires an implementation of  the "},{"code":"on(path:method:use)","type":"codeVoice"},{"type":"text","text":" functions but because it"},{"type":"text","text":" "},{"type":"text","text":"also conforms to "},{"code":"HBRouterMethods","type":"codeVoice"},{"type":"text","text":" it is also possible to call the method specific functions "},{"code":"get","type":"codeVoice"},{"type":"text","text":", "},{"code":"put","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"head","type":"codeVoice"},{"type":"text","text":", "},{"code":"post","type":"codeVoice"},{"type":"text","text":" and "},{"code":"patch","type":"codeVoice"},{"type":"text","text":".  The route handler closures all return objects conforming to"},{"type":"text","text":" "},{"code":"HBResponseGenerator","type":"codeVoice"},{"type":"text","text":".  This allows us to support routes which return a multitude of types eg"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["app.router.get(\"string\") { _ -> String in","    return \"string\"","}","app.router.post(\"status\") { _ -> HTTPResponseStatus in","    return .ok","}","app.router.data(\"data\") { request -> ByteBuffer in","    return request.allocator.buffer(string: \"buffer\")","}"]},{"inlineContent":[{"type":"text","text":"Routes can also return "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":"’s. So you can support returning values from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous processes."}],"type":"paragraph"},{"inlineContent":[{"text":"The default ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" setup in ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" is the ","type":"text"},{"code":"TrieRouter","type":"codeVoice"},{"text":" . This uses a","type":"text"},{"text":" ","type":"text"},{"text":"trie to partition all the routes for faster access. It also supports wildcards and parameter extraction","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["app.router.get(\"user\/*\", use: anyUser)","app.router.get(\"user\/:id\", use: userWithId)"]},{"inlineContent":[{"type":"text","text":"Both of these match routes which start with “\/user” and the next path segment being anything."},{"type":"text","text":" "},{"type":"text","text":"The second version extracts the path segment out and adds it to "},{"type":"codeVoice","code":"HBRequest.parameters"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"text","text":"key “id”."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecodable":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable","title":"HBRequestDecodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecodable","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbrequestdecodable","type":"topic","abstract":[{"code":"HBRouteHandler","type":"codeVoice"},{"type":"text","text":" which uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to initialize it"}],"role":"symbol","navigatorTitle":[{"text":"HBRequestDecodable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder","title":"HBRouterBuilder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterBuilder"}],"url":"\/documentation\/hummingbird\/hbrouterbuilder","type":"topic","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterBuilder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/on(_:method:options:use:)-4t19t":{"title":"on(_:method:options:use:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/on(_:method:options:use:)-4t19t","abstract":[{"type":"text","text":"Add path for closure returning type conforming to ResponseFutureEncodable"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder\/on(_:method:options:use:)-4t19t","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"on","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"method","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8NIOHTTP110HTTPMethodO","text":"HTTPMethod","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird21HBRouterMethodOptionsV","text":"HBRouterMethodOptions","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"use","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:11Hummingbird9HBRequestV","text":"HBRequest","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","title":"HBCallbackResponder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCallbackResponder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbcallbackresponder","type":"topic","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"role":"symbol","navigatorTitle":[{"text":"HBCallbackResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/middlewares":{"title":"middlewares","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/middlewares","abstract":[],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder\/middlewares","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"middlewares","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird17HBMiddlewareGroupC","text":"HBMiddlewareGroup","kind":"typeIdentifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncCallbackResponder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncCallbackResponder","title":"HBAsyncCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"url":"\/documentation\/hummingbird\/hbasynccallbackresponder","type":"topic","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBAsyncCallbackResponder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","title":"HBRouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbird\/hbroutermethods","type":"topic","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/group(_:)":{"title":"group(_:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/group(_:)","abstract":[{"type":"text","text":"return new "},{"code":"RouterGroup","type":"codeVoice"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder\/group(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"group","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird13HBRouterGroupV","text":"HBRouterGroup","kind":"typeIdentifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/buildRouter()":{"type":"topic","url":"\/documentation\/hummingbird\/hbrouterbuilder\/buildrouter()","title":"buildRouter()","abstract":[{"type":"text","text":"build router"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/buildRouter()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buildRouter"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:11Hummingbird11HBResponderP","text":"HBResponder","kind":"typeIdentifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncRouteHandler":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","title":"HBAsyncRouteHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncRouteHandler","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbasyncroutehandler","type":"topic","abstract":[{"type":"text","text":"Route Handler using async\/await methods"}],"role":"symbol","navigatorTitle":[{"text":"HBAsyncRouteHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","url":"\/documentation\/index","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/on(_:method:options:use:)-3277t":{"title":"on(_:method:options:use:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/on(_:method:options:use:)-3277t","abstract":[{"type":"text","text":"Add path for closure returning type conforming to ResponseFutureEncodable"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder\/on(_:method:options:use:)-3277t","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"on","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"method","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8NIOHTTP110HTTPMethodO","text":"HTTPMethod","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird21HBRouterMethodOptionsV","text":"HBRouterMethodOptions","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"use","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:11Hummingbird9HBRequestV","text":"HBRequest","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/add(_:method:responder:)":{"title":"add(_:method:responder:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/add(_:method:responder:)","abstract":[{"type":"text","text":"Add route to router"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder\/add(_:method:responder:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"method","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8NIOHTTP110HTTPMethodO","text":"HTTPMethod","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"responder","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird11HBResponderP","text":"HBResponder","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/HBRouterMethods-Implementations":{"title":"HBRouterMethods Implementations","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/HBRouterMethods-Implementations","type":"topic","url":"\/documentation\/hummingbird\/hbrouterbuilder\/hbroutermethods-implementations","abstract":[],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","url":"\/documentation\/hummingbird\/router","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","type":"topic","navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutergroup","title":"HBRouterGroup","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBRouterGroup","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","title":"HBRouterMethodOptions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethodOptions","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutermethodoptions","type":"topic","abstract":[{"type":"text","text":"Options available to routes"}],"role":"symbol","navigatorTitle":[{"text":"HBRouterMethodOptions","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","title":"HBResponder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbresponder","type":"topic","abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"role":"symbol","navigatorTitle":[{"text":"HBResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","title":"HBRouteHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutehandler","type":"topic","abstract":[{"type":"text","text":"Object for handling requests."}],"role":"symbol","navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder/init()":{"title":"init()","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder\/init()","abstract":[],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic"}}}