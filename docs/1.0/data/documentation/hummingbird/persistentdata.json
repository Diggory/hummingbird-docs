{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true,"title":"Articles"}],"metadata":{"title":"Persistent data","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"],"title":"Reference"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"If you are looking to store data between requests to your server then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"code":"create","type":"codeVoice"}],"type":"paragraph"},{"code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" which will succeed once the value has been saved. If there is an entry for the key already then the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will fail with the error "},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}],"type":"paragraph"},{"code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"To access values in the ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which will succeed with the value associated with key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}],"type":"paragraph"},{"code":["let future request.persist.remove(key: \"mykey\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Drivers","text":"Drivers","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}],"type":"paragraph"},{"code":["app.addPersist(using: .memory)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down."}],"type":"paragraph"},{"anchor":"Redis","text":"Redis","level":2,"type":"heading"},{"inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with the ","type":"text"},{"code":"HummingbirdRedis","type":"codeVoice"},{"text":" library. You would setup ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well.","type":"text"}],"type":"paragraph"},{"code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"],"syntax":"swift","type":"codeListing"},{"anchor":"Fluent","text":"Fluent","level":2,"type":"heading"},{"inlineContent":[{"code":"HummingbirdFluent","type":"codeVoice"},{"type":"text","text":" also contains a "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"code":"fluent.migrate()","type":"codeVoice"},{"type":"text","text":" after the "},{"code":"addPersist","type":"codeVoice"},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Running-persist-outside-HBApplication","text":"Running persist outside HBApplication","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"If you prefer, the persist system can also be accessed separately from "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":". You need to create your own instance of your persist driver: "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","type":"reference","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","type":"reference","isActive":true},{"type":"text","text":". Then call the "},{"type":"codeVoice","code":"create"},{"type":"text","text":", "},{"type":"codeVoice","code":"set"},{"type":"text","text":", "},{"type":"codeVoice","code":"get"},{"type":"text","text":" and "},{"type":"codeVoice","code":"remove"},{"type":"text","text":" functions directly from the driver. Below is an example using the Redis driver."}],"type":"paragraph"},{"code":["\/\/ setup Redis connection and persist drive. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let persist = HBRedisPersistDriver(redisConnectionPoolGroup: redisConnectionPoolGroup)","","\/\/ add routes to application","app.put(\"key\") { request -> HTTPResponseStatus in","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(","        key: \"mykey\", ","        value: value, ","        expires: .minutes(30), ","        request: request","    )","    return .ok","}","","app.get(\"key\") { request -> String? in","    try await persist.get(","        key: \"mykey\", ","        request: request","    )","    return .ok","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you do setup a persist driver as above. You will need to manage its lifecycle and call "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver\/shutdown()-2jadt","type":"reference","isActive":true},{"type":"text","text":" when you shutdown your application."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/extendinghummingbird","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"title":"Extending Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"kind":"symbol","title":"HBPersistError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"abstract":[{"text":"Errors return by persist framework","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","url":"\/documentation\/hummingbird\/hbpersisterror"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"navigatorTitle":[{"kind":"identifier","text":"HBFluentPersistDriver"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBFluentPersistDriver"}],"url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","title":"HBFluentPersistDriver","kind":"symbol","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"url":"\/documentation\/hummingbird\/hbmemorypersistdriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"title":"HBMemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"kind":"symbol","type":"topic","title":"HBPersistDriver","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","url":"\/documentation\/hummingbird\/hbpersistdriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver/shutdown()-2jadt":{"title":"shutdown()","type":"topic","abstract":[{"text":"default implemenation of shutdown()","type":"text"}],"url":"\/documentation\/hummingbird\/hbpersistdriver\/shutdown()-2jadt","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"shutdown","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver\/shutdown()-2jadt","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriverFactory":{"title":"HBPersistDriverFactory","url":"\/documentation\/hummingbird\/hbpersistdriverfactory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBPersistDriverFactory"}],"abstract":[{"text":"Factory class for persist drivers","type":"text"}],"navigatorTitle":[{"text":"HBPersistDriverFactory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"role":"symbol","type":"topic","url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"title":"HBRedisPersistDriver","navigatorTitle":[{"kind":"identifier","text":"HBRedisPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisPersistDriver"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","url":"\/documentation\/hummingbird\/router","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","url":"\/documentation\/index","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","role":"collection"}}}