{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"If you are looking to store data between requests to your server then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"text":"This returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" which will succeed once the value has been saved. If there is an entry for the key already then the ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" will fail with the error ","type":"text"},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing"},{"inlineContent":[{"text":"To access values in the ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" which will succeed with the value associated with key or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future request.persist.remove(key: \"mykey\")"],"type":"codeListing"},{"anchor":"Drivers","type":"heading","level":2,"text":"Drivers"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"text":" comes with a memory based driver which will store these values in the memory of your server.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["app.addPersist(using: .memory)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down."}],"type":"paragraph"},{"anchor":"Redis","type":"heading","level":2,"text":"Redis"},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"code":"persists","type":"codeVoice"},{"type":"text","text":" key\/value pairs with the "},{"code":"HummingbirdRedis","type":"codeVoice"},{"type":"text","text":" library. You would setup "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"syntax":"swift","code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"],"type":"codeListing"},{"anchor":"Fluent","type":"heading","level":2,"text":"Fluent"},{"inlineContent":[{"code":"HummingbirdFluent","type":"codeVoice"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after the ","type":"text"},{"code":"addPersist","type":"codeVoice"},{"text":" call has been made.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"],"type":"codeListing"},{"anchor":"Running-persist-outside-HBApplication","type":"heading","level":2,"text":"Running persist outside HBApplication"},{"inlineContent":[{"type":"text","text":"If you prefer, the persist system can also be accessed separately from "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":". You need to create your own instance of your persist driver: "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBMemoryPersistDriver","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","isActive":true,"type":"reference"},{"type":"text","text":". Then call the "},{"code":"create","type":"codeVoice"},{"type":"text","text":", "},{"code":"set","type":"codeVoice"},{"type":"text","text":", "},{"code":"get","type":"codeVoice"},{"type":"text","text":" and "},{"code":"remove","type":"codeVoice"},{"type":"text","text":" functions directly from the driver. Below is an example using the Redis driver."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ setup Redis connection and persist drive. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let persist = HBRedisPersistDriver(redisConnectionPoolGroup: redisConnectionPoolGroup)","","\/\/ add routes to application","app.put(\"key\") { request -> HTTPResponseStatus in","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(","        key: \"mykey\", ","        value: value, ","        expires: .minutes(30), ","        request: request","    )","    return .ok","}","","app.get(\"key\") { request -> String? in","    try await persist.get(","        key: \"mykey\", ","        request: request","    )","    return .ok","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you do setup a persist driver as above. You will need to manage its lifecycle and call "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver\/shutdown()-2jadt","isActive":true},{"type":"text","text":" when you shutdown your application."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistError"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Persistent data"},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistDriverFactory":{"abstract":[{"type":"text","text":"Factory class for persist drivers"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriverFactory","url":"\/documentation\/hummingbirdfoundation\/hbpersistdriverfactory","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"title":"HBPersistDriverFactory"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistDriver/shutdown()-2jadt":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver\/shutdown()-2jadt","kind":"symbol","title":"shutdown()","abstract":[{"type":"text","text":"default implemenation of shutdown()"}],"url":"\/documentation\/hummingbirdfoundation\/hbpersistdriver\/shutdown()-2jadt","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shutdown"},{"kind":"text","text":"()"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistError":{"abstract":[{"type":"text","text":"Errors return by persist framework"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistError","url":"\/documentation\/hummingbirdfoundation\/hbpersisterror","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"title":"HBPersistError"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","role":"article","title":"Error Handling"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"kind":"symbol","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisPersistDriver","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","type":"topic","title":"HBRedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistDriver":{"abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver","url":"\/documentation\/hummingbirdfoundation\/hbpersistdriver","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriver","kind":"identifier"}],"title":"HBPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","url":"\/documentation\/hummingbird\/extendinghummingbird","type":"topic","role":"article","title":"Extending Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","role":"collectionGroup","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBMemoryPersistDriver":{"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBMemoryPersistDriver","url":"\/documentation\/hummingbirdfoundation\/hbmemorypersistdriver","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"title":"HBMemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"title":"HBFluentPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFluentPersistDriver","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBFluentPersistDriver","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","type":"topic","role":"collectionGroup","title":"Router"}}}