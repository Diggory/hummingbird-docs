{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"],"title":"Reference"}],"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"sections":[],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to store data between requests to your server then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"type":"codeVoice","code":"create"}]},{"type":"codeListing","syntax":"swift","code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which will succeed once the value has been saved. If there is an entry for the key already then the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will fail with the error "},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}]},{"type":"codeListing","syntax":"swift","code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"type":"paragraph","inlineContent":[{"text":"To access values in the ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" key\/value store you use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which will succeed with the value associated with key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}]},{"type":"paragraph","inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let future request.persist.remove(key: \"mykey\")"]},{"type":"heading","anchor":"Drivers","level":2,"text":"Drivers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}]},{"type":"codeListing","syntax":"swift","code":["app.addPersist(using: .memory)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down."}]},{"type":"heading","anchor":"Redis","level":2,"text":"Redis"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"code":"persists","type":"codeVoice"},{"type":"text","text":" key\/value pairs with the "},{"code":"HummingbirdRedis","type":"codeVoice"},{"type":"text","text":" library. You would setup "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}]},{"type":"codeListing","syntax":"swift","code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"]},{"type":"heading","anchor":"Fluent","level":2,"text":"Fluent"},{"type":"paragraph","inlineContent":[{"code":"HummingbirdFluent","type":"codeVoice"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after the ","type":"text"},{"code":"addPersist","type":"codeVoice"},{"text":" call has been made.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"]},{"type":"heading","anchor":"Running-persist-outside-HBApplication","level":2,"text":"Running persist outside HBApplication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you prefer, the persist system can also be accessed separately from "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":". You need to create your own instance of your persist driver: "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","isActive":true},{"type":"text","text":". Then call the "},{"type":"codeVoice","code":"create"},{"type":"text","text":", "},{"type":"codeVoice","code":"set"},{"type":"text","text":", "},{"type":"codeVoice","code":"get"},{"type":"text","text":" and "},{"type":"codeVoice","code":"remove"},{"type":"text","text":" functions directly from the driver. Below is an example using the Redis driver."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ setup Redis connection and persist drive. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let persist = HBRedisPersistDriver(redisConnectionPoolGroup: redisConnectionPoolGroup)","","\/\/ add routes to application","app.put(\"key\") { request -> HTTPResponseStatus in","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(","        key: \"mykey\", ","        value: value, ","        expires: .minutes(30), ","        request: request","    )","    return .ok","}","","app.get(\"key\") { request -> String? in","    try await persist.get(","        key: \"mykey\", ","        request: request","    )","    return .ok","}"]},{"type":"paragraph","inlineContent":[{"text":"If you do setup a persist driver as above. You will need to manage its lifecycle and call ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver\/shutdown()-2jadt","type":"reference"},{"text":" when you shutdown your application.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Persistent data"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true,"title":"Articles"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"url":"\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"url":"\/documentation\/hummingbird\/hbmemorypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"kind":"symbol","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"title":"HBMemoryPersistDriver","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriverFactory":{"url":"\/documentation\/hummingbird\/hbpersistdriverfactory","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","abstract":[{"text":"Factory class for persist drivers","type":"text"}],"title":"HBPersistDriverFactory","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFluentPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","type":"topic","navigatorTitle":[{"text":"HBFluentPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","kind":"symbol","title":"HBFluentPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","role":"collectionGroup","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"type":"topic","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","title":"HBRedisPersistDriver","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRedisPersistDriver"}],"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"url":"\/documentation\/hummingbird\/hbpersisterror","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistError"}],"abstract":[{"type":"text","text":"Errors return by persist framework"}],"title":"HBPersistError","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver/shutdown()-2jadt":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shutdown","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver\/shutdown()-2jadt","type":"topic","role":"symbol","abstract":[{"text":"default implemenation of shutdown()","type":"text"}],"url":"\/documentation\/hummingbird\/hbpersistdriver\/shutdown()-2jadt","kind":"symbol","title":"shutdown()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","type":"topic","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"url":"\/documentation\/hummingbird\/hbpersistdriver","kind":"symbol","title":"HBPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","url":"\/documentation\/hummingbird\/errorhandling","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","type":"topic","role":"article","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"url":"\/documentation\/hummingbird\/extendinghummingbird","kind":"article","title":"Extending Hummingbird"}}}