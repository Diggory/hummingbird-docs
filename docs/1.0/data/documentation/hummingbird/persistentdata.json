{"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Persistent data"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles","generated":true}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistError"],"title":"Reference"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"If you are looking to store data between requests to your server then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"code":"create","type":"codeVoice"}],"type":"paragraph"},{"type":"codeListing","code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" which will succeed once the value has been saved. If there is an entry for the key already then the "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" will fail with the error "},{"code":"HBPersistError.duplicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"type":"codeListing","code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"],"syntax":"swift"},{"inlineContent":[{"text":"This returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" which will succeed with the value associated with key or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if that value doesnâ€™t exist or is not of the type requested.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let future request.persist.remove(key: \"mykey\")"],"syntax":"swift"},{"anchor":"Drivers","type":"heading","level":2,"text":"Drivers"},{"inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}],"type":"paragraph"},{"type":"codeListing","code":["app.addPersist(using: .memory)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down."}],"type":"paragraph"},{"anchor":"Redis","type":"heading","level":2,"text":"Redis"},{"inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"type":"codeVoice","code":"persists"},{"text":" key\/value pairs with the ","type":"text"},{"type":"codeVoice","code":"HummingbirdRedis"},{"text":" library. You would setup ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"],"syntax":"swift"},{"anchor":"Fluent","type":"heading","level":2,"text":"Fluent"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdFluent"},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"type":"codeVoice","code":"fluent.migrate()"},{"type":"text","text":" after the "},{"type":"codeVoice","code":"addPersist"},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"type":"codeListing","code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"],"syntax":"swift"},{"anchor":"Running-persist-outside-HBApplication","type":"heading","level":2,"text":"Running persist outside HBApplication"},{"inlineContent":[{"type":"text","text":"If you prefer, the persist system can also be accessed separately from "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":". You need to create your own instance of your persist driver: "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBMemoryPersistDriver","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","isActive":true,"type":"reference"},{"type":"text","text":". Then call the "},{"code":"create","type":"codeVoice"},{"type":"text","text":", "},{"code":"set","type":"codeVoice"},{"type":"text","text":", "},{"code":"get","type":"codeVoice"},{"type":"text","text":" and "},{"code":"remove","type":"codeVoice"},{"type":"text","text":" functions directly from the driver. Below is an example using the Redis driver."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ setup Redis connection and persist drive. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let persist = HBRedisPersistDriver(redisConnectionPoolGroup: redisConnectionPoolGroup)","","\/\/ add routes to application","app.put(\"key\") { request -> HTTPResponseStatus in","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(","        key: \"mykey\", ","        value: value, ","        expires: .minutes(30), ","        request: request","    )","    return .ok","}","","app.get(\"key\") { request -> String? in","    try await persist.get(","        key: \"mykey\", ","        request: request","    )","    return .ok","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you do setup a persist driver as above. You will need to manage its lifecycle and call "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistDriver\/shutdown()-2jadt"},{"type":"text","text":" when you shutdown your application."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","url":"\/documentation\/hummingbird\/extendinghummingbird","kind":"article","title":"Extending Hummingbird","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBMemoryPersistDriver":{"abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"url":"\/documentation\/hummingbirdauth\/hbmemorypersistdriver","role":"symbol","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"title":"HBMemoryPersistDriver","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBMemoryPersistDriver","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","title":"Error Handling","role":"article","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBPersistDriver/shutdown()-2jadt":{"abstract":[{"type":"text","text":"default implemenation of shutdown()"}],"type":"topic","title":"shutdown()","role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdauth\/hbpersistdriver\/shutdown()-2jadt","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistDriver\/shutdown()-2jadt","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shutdown"},{"kind":"text","text":"()"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBPersistError":{"role":"symbol","url":"\/documentation\/hummingbirdauth\/hbpersisterror","abstract":[{"type":"text","text":"Errors return by persist framework"}],"title":"HBPersistError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistError"}],"navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistError","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"navigatorTitle":[{"text":"HBFluentPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"kind":"symbol","title":"HBFluentPersistDriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFluentPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","kind":"article","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBPersistDriver":{"title":"HBPersistDriver","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistDriver","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"url":"\/documentation\/hummingbirdauth\/hbpersistdriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"role":"symbol","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","title":"HBRedisPersistDriver","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBPersistDriverFactory":{"title":"HBPersistDriverFactory","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBPersistDriverFactory","abstract":[{"type":"text","text":"Factory class for persist drivers"}],"url":"\/documentation\/hummingbirdauth\/hbpersistdriverfactory"}}}