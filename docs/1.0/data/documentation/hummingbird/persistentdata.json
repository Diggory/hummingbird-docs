{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true,"title":"Articles"}],"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Persistent data"},"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistError"],"title":"Reference"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to store data between requests to your server then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"code":"create","type":"codeVoice"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"text":"This returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" which will succeed once the value has been saved. If there is an entry for the key already then the ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" will fail with the error ","type":"text"},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Both "},{"code":"create","type":"codeVoice"},{"type":"text","text":" and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" have an "},{"code":"expires","type":"codeVoice"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing"},{"inlineContent":[{"text":"This returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" which will succeed with the value associated with key or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if that value doesnâ€™t exist or is not of the type requested.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}],"type":"paragraph"},{"syntax":"swift","code":["let future request.persist.remove(key: \"mykey\")"],"type":"codeListing"},{"text":"Drivers","type":"heading","anchor":"Drivers","level":2},{"inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}],"type":"paragraph"},{"syntax":"swift","code":["app.addPersist(using: .memory)"],"type":"codeListing"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down.","type":"text"}],"type":"paragraph"},{"text":"Redis","type":"heading","anchor":"Redis","level":2},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with the "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"syntax":"swift","code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"],"type":"codeListing"},{"text":"Fluent","type":"heading","anchor":"Fluent","level":2},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdFluent"},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"type":"codeVoice","code":"fluent.migrate()"},{"type":"text","text":" after the "},{"type":"codeVoice","code":"addPersist"},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"syntax":"swift","code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"],"type":"codeListing"},{"text":"Running persist outside HBApplication","type":"heading","anchor":"Running-persist-outside-HBApplication","level":2},{"inlineContent":[{"type":"text","text":"If you prefer, the persist system can also be accessed separately from "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":". You need to create your own instance of your persist driver: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBMemoryPersistDriver"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"},{"type":"text","text":". Then call the "},{"type":"codeVoice","code":"create"},{"type":"text","text":", "},{"type":"codeVoice","code":"set"},{"type":"text","text":", "},{"type":"codeVoice","code":"get"},{"type":"text","text":" and "},{"type":"codeVoice","code":"remove"},{"type":"text","text":" functions directly from the driver. Below is an example using the Redis driver."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ setup Redis connection and persist drive. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let persist = HBRedisPersistDriver(redisConnectionPoolGroup: redisConnectionPoolGroup)","","\/\/ add routes to application","app.put(\"key\") { request -> HTTPResponseStatus in","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(","        key: \"mykey\", ","        value: value, ","        expires: .minutes(30), ","        request: request","    )","    return .ok","}","","app.get(\"key\") { request -> String? in","    try await persist.get(","        key: \"mykey\", ","        request: request","    )","    return .ok","}"],"type":"codeListing"},{"inlineContent":[{"text":"If you do setup a persist driver as above. You will need to manage its lifecycle and call ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver\/shutdown()-2jadt"},{"text":" when you shutdown your application.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"navigatorTitle":[{"text":"HBFluentPersistDriver","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","title":"HBFluentPersistDriver","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBFluentPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistDriver/shutdown()-2jadt":{"url":"\/documentation\/hummingbirdfoundation\/hbpersistdriver\/shutdown()-2jadt","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shutdown"},{"kind":"text","text":"()"}],"role":"symbol","abstract":[{"text":"default implemenation of shutdown()","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver\/shutdown()-2jadt","title":"shutdown()"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","kind":"article","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","title":"Router","url":"\/documentation\/hummingbird\/router","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistError":{"type":"topic","title":"HBPersistError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/hbpersisterror","role":"symbol","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistError","kind":"symbol","abstract":[{"text":"Errors return by persist framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistDriver":{"type":"topic","title":"HBPersistDriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"url":"\/documentation\/hummingbirdfoundation\/hbpersistdriver","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriver","kind":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","url":"\/documentation\/hummingbird\/extendinghummingbird","title":"Extending Hummingbird","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBMemoryPersistDriver":{"url":"\/documentation\/hummingbirdfoundation\/hbmemorypersistdriver","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"type":"topic","title":"HBMemoryPersistDriver","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBMemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"kind":"symbol","navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","title":"HBRedisPersistDriver","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisPersistDriver"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdredis\/hbredispersistdriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBPersistDriverFactory":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriverFactory","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/hbpersistdriverfactory","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBPersistDriverFactory","title":"HBPersistDriverFactory","navigatorTitle":[{"text":"HBPersistDriverFactory","kind":"identifier"}],"type":"topic","abstract":[{"text":"Factory class for persist drivers","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","type":"topic","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup"}}}