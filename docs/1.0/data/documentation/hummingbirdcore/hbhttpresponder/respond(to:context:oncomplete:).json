{"sections":[],"metadata":{"required":true,"modules":[{"name":"HummingbirdCore"}],"externalID":"s:15HummingbirdCore15HBHTTPResponderP7respond2to7context10onCompleteyAA13HBHTTPRequestV_7NIOCore21ChannelHandlerContextCys6ResultOyAA14HBHTTPResponseVs5Error_pGctF","roleHeading":"Instance Method","title":"respond(to:context:onComplete:)","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"respond"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore13HBHTTPRequestV","kind":"typeIdentifier","text":"HBHTTPRequest"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onComplete"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s6ResultO","kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:15HummingbirdCore14HBHTTPResponseV","kind":"typeIdentifier","text":"HBHTTPResponse"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder\/respond(to:context:onComplete:)","interfaceLanguage":"swift"},"abstract":[{"text":"Passes request to be responded to and function to call when response is ready. It is required your implementation","type":"text"},{"text":" ","type":"text"},{"text":"calls ","type":"text"},{"type":"codeVoice","code":"onComplete"},{"text":" otherwise the server will never receive a response","type":"text"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"respond","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"request","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"HBHTTPRequest","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore13HBHTTPRequestV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"text":", ","kind":"text"},{"text":"onComplete","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"text":" (","kind":"text"},{"text":"Result","kind":"typeIdentifier","preciseIdentifier":"s:s6ResultO"},{"text":"<","kind":"text"},{"text":"HBHTTPResponse","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore14HBHTTPResponseV"},{"text":", ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":">) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"platforms":["Linux"]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"HTTP request"}],"type":"paragraph"}],"name":"request"},{"content":[{"inlineContent":[{"text":"ChannelHandlerContext from channel that request was served on.","type":"text"}],"type":"paragraph"}],"name":"context"}],"kind":"parameters"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/hummingbirdcore\/hbhttpresponder\/respond(to:context:oncomplete:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder":{"title":"HBHTTPResponder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","abstract":[{"type":"text","text":"Protocol for objects generating a "},{"type":"codeVoice","code":"HBHTTPResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"HBHTTPRequest"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponder","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBHTTPResponder","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttpresponder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponse":{"abstract":[{"type":"text","text":"HTTP response"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","url":"\/documentation\/hummingbirdcore\/hbhttpresponse","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBHTTPResponse","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponse","kind":"identifier"}],"title":"HBHTTPResponse"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder/respond(to:context:onComplete:)":{"title":"respond(to:context:onComplete:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder\/respond(to:context:onComplete:)","abstract":[{"text":"Passes request to be responded to and function to call when response is ready. It is required your implementation","type":"text"},{"text":" ","type":"text"},{"text":"calls ","type":"text"},{"code":"onComplete","type":"codeVoice"},{"text":" otherwise the server will never receive a response","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"respond"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore13HBHTTPRequestV","kind":"typeIdentifier","text":"HBHTTPRequest"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onComplete"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s6ResultO","kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:15HummingbirdCore14HBHTTPResponseV","kind":"typeIdentifier","text":"HBHTTPResponse"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttpresponder\/respond(to:context:oncomplete:)","role":"symbol","required":true,"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPRequest":{"title":"HBHTTPRequest","abstract":[{"text":"HTTP request","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBHTTPRequest"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttprequest","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPRequest","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","type":"topic","title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"role":"collection"}}}