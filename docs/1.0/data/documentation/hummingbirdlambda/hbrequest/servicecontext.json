{"metadata":{"platforms":[{"unavailable":false,"name":"iOS","deprecated":false,"beta":false,"introducedAt":"13.0"},{"unavailable":false,"name":"macOS","deprecated":false,"beta":false,"introducedAt":"10.15"},{"unavailable":false,"name":"tvOS","deprecated":false,"beta":false,"introducedAt":"13.0"},{"unavailable":false,"name":"watchOS","deprecated":false,"beta":false,"introducedAt":"6.0"}],"externalID":"s:11Hummingbird9HBRequestV14serviceContext07ServiceD6Module0eD0Vvp","modules":[{"name":"HummingbirdLambda","relatedModules":["Hummingbird"]}],"symbolKind":"property","title":"serviceContext","roleHeading":"Instance Property","extendedModule":"Hummingbird","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"serviceContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ServiceContext","preciseIdentifier":"s:20ServiceContextModule0aB0V"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"ServiceContext attached to request. Used to propagate serviceContext to child functions","type":"text"}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest\/serviceContext","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serviceContext","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ServiceContext","preciseIdentifier":"s:20ServiceContextModule0aB0V","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" ","kind":"text"},{"text":"set","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Attaching serviceContext to the request should be used when we arenâ€™t inside an async","type":"text"},{"text":" ","type":"text"},{"text":"function and serviceContext cannot be propagated via Task local variables. Otherwise","type":"text"},{"text":" ","type":"text"},{"text":"serviceContext should be propagated using Task local variables using ","type":"text"},{"code":"ServiceContext.$current.withValue(_)","type":"codeVoice"}]}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest"]]},"variants":[{"paths":["\/documentation\/hummingbirdlambda\/hbrequest\/servicecontext"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest":{"title":"HBRequest","url":"\/documentation\/hummingbirdlambda\/hbrequest","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest/serviceContext":{"abstract":[{"text":"ServiceContext attached to request. Used to propagate serviceContext to child functions","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/hbrequest\/servicecontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest\/serviceContext","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"serviceContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:20ServiceContextModule0aB0V","text":"ServiceContext"}],"type":"topic","title":"serviceContext","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"}}}