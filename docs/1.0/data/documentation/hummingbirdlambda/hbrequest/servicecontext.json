{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest\/serviceContext"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"serviceContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:20ServiceContextModule0aB0V","text":"ServiceContext"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" "},{"kind":"keyword","text":"set"},{"kind":"text","text":" }"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Attaching serviceContext to the request should be used when we arenâ€™t inside an async","type":"text"},{"text":" ","type":"text"},{"text":"function and serviceContext cannot be propagated via Task local variables. Otherwise","type":"text"},{"text":" ","type":"text"},{"text":"serviceContext should be propagated using Task local variables using ","type":"text"},{"code":"ServiceContext.$current.withValue(_)","type":"codeVoice"}]}]}],"abstract":[{"type":"text","text":"ServiceContext attached to request. Used to propagate serviceContext to child functions"}],"variants":[{"paths":["\/documentation\/hummingbirdlambda\/hbrequest\/servicecontext"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"extendedModule":"Hummingbird","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"serviceContext"},{"kind":"text","text":": "},{"preciseIdentifier":"s:20ServiceContextModule0aB0V","text":"ServiceContext","kind":"typeIdentifier"}],"roleHeading":"Instance Property","title":"serviceContext","symbolKind":"property","externalID":"s:11Hummingbird9HBRequestV14serviceContext07ServiceD6Module0eD0Vvp","platforms":[{"introducedAt":"13.0","deprecated":false,"beta":false,"unavailable":false,"name":"iOS"},{"beta":false,"unavailable":false,"introducedAt":"10.15","deprecated":false,"name":"macOS"},{"beta":false,"unavailable":false,"introducedAt":"13.0","deprecated":false,"name":"tvOS"},{"beta":false,"unavailable":false,"introducedAt":"6.0","deprecated":false,"name":"watchOS"}],"role":"symbol","modules":[{"relatedModules":["Hummingbird"],"name":"HummingbirdLambda"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest"]]},"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest/serviceContext":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest\/serviceContext","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serviceContext","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:20ServiceContextModule0aB0V","kind":"typeIdentifier","text":"ServiceContext"}],"abstract":[{"type":"text","text":"ServiceContext attached to request. Used to propagate serviceContext to child functions"}],"title":"serviceContext","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbrequest\/servicecontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest":{"title":"HBRequest","role":"symbol","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","url":"\/documentation\/hummingbirdlambda\/hbrequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}],"type":"topic","abstract":[{"text":"Holds all the values required to process a request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]}}}