{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch"]]},"sections":[],"abstract":[{"type":"text","text":"Add a sequence of header name\/value pairs to the block."}],"metadata":{"modules":[{"name":"HummingbirdFoundation"}],"roleHeading":"Instance Method","title":"add(contentsOf:)","externalID":"s:11Hummingbird16HTTPHeadersPatchV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"add"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"contentsOf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"symbolKind":"method","role":"symbol"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/hummingbirdlambda\/httpheaderspatch\/add(contentsof:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch\/add(contentsOf:)","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"other","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sequence","preciseIdentifier":"s:ST","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == (","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":")","kind":"text"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"name":"contentsOf","content":[{"inlineContent":[{"text":"The sequence of header name\/value pairs. For maximum compatibility","type":"text"},{"text":" ","type":"text"},{"text":"the header should be an ASCII string. For future-proofing with HTTP\/2 lowercase header","type":"text"},{"text":" ","type":"text"},{"text":"names are strongly recommended.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method is strictly additive: if there are other entries with the same header","type":"text"},{"text":" ","type":"text"},{"text":"name already in the block, this will add new entries.","type":"text"}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HTTPHeadersPatch":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","abstract":[{"text":"Used to Patch HTTPHeaders. Remembers if a header was added in with ","type":"text"},{"code":"add","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"replaceOrAdd","type":"codeVoice"}],"navigatorTitle":[{"text":"HTTPHeadersPatch","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/httpheaderspatch","title":"HTTPHeadersPatch","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPHeadersPatch","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HTTPHeadersPatch/add(contentsOf:)":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch\/add(contentsOf:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"add","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"contentsOf"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"add(contentsOf:)","abstract":[{"text":"Add a sequence of header name\/value pairs to the block.","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/httpheaderspatch\/add(contentsof:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"kind":"symbol","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","role":"collection"}}}