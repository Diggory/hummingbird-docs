{"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/hummingbirdcompression"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"externalID":"HummingbirdCompression","symbolKind":"module","title":"HummingbirdCompression","role":"collection","modules":[{"name":"HummingbirdCompression"}],"roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"],"title":"Structures"}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header "},{"type":"codeVoice","code":"accept-encoding"},{"type":"text","text":" set to "},{"code":"gzip","type":"codeVoice"},{"type":"text","text":" or "},{"code":"deflate","type":"codeVoice"},{"type":"text","text":" the server will compression the response body."}]},{"type":"codeListing","code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header "},{"type":"codeVoice","code":"content-encoding"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"gzip"},{"type":"text","text":" or "},{"type":"codeVoice","code":"deflate"},{"text":" the server will attempt to decompress the request body.","type":"text"}]},{"type":"codeListing","code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"syntax":"swift"}],"kind":"content"}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPDecompressionLimit","kind":"identifier"}],"type":"topic","title":"HTTPDecompressionLimit","url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit","abstract":[{"type":"text","text":"Limits for when decompressing HTTP request data"}],"navigatorTitle":[{"kind":"identifier","text":"HTTPDecompressionLimit"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","url":"\/documentation\/hummingbirdcompression","type":"topic","role":"collection","title":"HummingbirdCompression"}}}