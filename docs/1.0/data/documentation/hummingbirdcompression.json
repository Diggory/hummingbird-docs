{"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"hierarchy":{"paths":[[]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"variants":[{"paths":["\/documentation\/hummingbirdcompression"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header ","type":"text"},{"code":"accept-encoding","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"gzip","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"deflate","type":"codeVoice"},{"text":" the server will compression the response body.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"type":"codeListing"},{"inlineContent":[{"text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header ","type":"text"},{"code":"content-encoding","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"gzip","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"deflate","type":"codeVoice"},{"text":" the server will attempt to decompress the request body.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"type":"codeListing"}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"kind":"symbol","metadata":{"title":"HummingbirdCompression","roleHeading":"Framework","modules":[{"name":"HummingbirdCompression"}],"externalID":"HummingbirdCompression","role":"collection","symbolKind":"module"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"],"title":"Structures"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"abstract":[{"text":"Limits for when decompressing HTTP request data","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HTTPDecompressionLimit"}],"url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPDecompressionLimit"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit","title":"HTTPDecompressionLimit","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}],"url":"\/documentation\/hummingbirdcompression","type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","title":"HummingbirdCompression","kind":"symbol"}}}