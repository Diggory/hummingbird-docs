{"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcompression"]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}],"metadata":{"role":"collection","title":"HummingbirdCompression","modules":[{"name":"HummingbirdCompression"}],"symbolKind":"module","roleHeading":"Framework","externalID":"HummingbirdCompression"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header "},{"code":"accept-encoding","type":"codeVoice"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"gzip"},{"type":"text","text":" or "},{"type":"codeVoice","code":"deflate"},{"type":"text","text":" the server will compression the response body."}],"type":"paragraph"},{"code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header "},{"type":"codeVoice","code":"content-encoding"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"gzip"},{"type":"text","text":" or "},{"type":"codeVoice","code":"deflate"},{"type":"text","text":" the server will attempt to decompress the request body."}],"type":"paragraph"},{"code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"type":"codeListing","syntax":"swift"}]}],"hierarchy":{"paths":[[]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"kind":"symbol","title":"HummingbirdCompression","abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","type":"topic","url":"\/documentation\/hummingbirdcompression"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"role":"symbol","title":"HTTPDecompressionLimit","url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPDecompressionLimit"}],"abstract":[{"type":"text","text":"Limits for when decompressing HTTP request data"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit","navigatorTitle":[{"kind":"identifier","text":"HTTPDecompressionLimit"}]}}}