{"topicSections":[{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"]}],"sections":[],"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"kind":"symbol","seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"variants":[{"paths":["\/documentation\/hummingbirdcompression"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"module","title":"HummingbirdCompression","role":"collection","modules":[{"name":"HummingbirdCompression"}],"externalID":"HummingbirdCompression","roleHeading":"Framework"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header "},{"type":"codeVoice","code":"accept-encoding"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"gzip"},{"type":"text","text":" or "},{"type":"codeVoice","code":"deflate"},{"type":"text","text":" the server will compression the response body."}],"type":"paragraph"},{"code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header "},{"code":"content-encoding","type":"codeVoice"},{"type":"text","text":" set to "},{"code":"gzip","type":"codeVoice"},{"type":"text","text":" or "},{"code":"deflate","type":"codeVoice"},{"type":"text","text":" the server will attempt to decompress the request body."}],"type":"paragraph"},{"code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"syntax":"swift","type":"codeListing"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTPDecompressionLimit"}],"type":"topic","url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit","abstract":[{"text":"Limits for when decompressing HTTP request data","type":"text"}],"role":"symbol","kind":"symbol","title":"HTTPDecompressionLimit","navigatorTitle":[{"kind":"identifier","text":"HTTPDecompressionLimit"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcompression","role":"collection","title":"HummingbirdCompression"}}}