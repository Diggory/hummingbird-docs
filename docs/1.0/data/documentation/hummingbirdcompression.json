{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"kind":"symbol","sections":[],"metadata":{"title":"HummingbirdCompression","externalID":"HummingbirdCompression","roleHeading":"Framework","role":"collection","symbolKind":"module","modules":[{"name":"HummingbirdCompression"}]},"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"variants":[{"paths":["\/documentation\/hummingbirdcompression"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header ","type":"text"},{"code":"accept-encoding","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"gzip","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"deflate","type":"codeVoice"},{"text":" the server will compression the response body.","type":"text"}]},{"code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header ","type":"text"},{"code":"content-encoding","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"gzip","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"deflate","type":"codeVoice"},{"text":" the server will attempt to decompress the request body.","type":"text"}]},{"code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"syntax":"swift","type":"codeListing"}]}],"topicSections":[{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"kind":"symbol","title":"HummingbirdCompression","abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","type":"topic","url":"\/documentation\/hummingbirdcompression","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"abstract":[{"type":"text","text":"Limits for when decompressing HTTP request data"}],"title":"HTTPDecompressionLimit","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPDecompressionLimit"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit","role":"symbol","url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPDecompressionLimit"}],"type":"topic"}}}