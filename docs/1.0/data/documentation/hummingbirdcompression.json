{"variants":[{"paths":["\/documentation\/hummingbirdcompression"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"hierarchy":{"paths":[[]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"],"title":"Structures"}],"metadata":{"symbolKind":"module","roleHeading":"Framework","modules":[{"name":"HummingbirdCompression"}],"role":"collection","externalID":"HummingbirdCompression","title":"HummingbirdCompression"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header ","type":"text"},{"code":"accept-encoding","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"gzip","type":"codeVoice"},{"type":"text","text":" or "},{"code":"deflate","type":"codeVoice"},{"type":"text","text":" the server will compression the response body."}]},{"type":"codeListing","code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header "},{"type":"codeVoice","code":"content-encoding"},{"type":"text","text":" set to "},{"code":"gzip","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"deflate","type":"codeVoice"},{"text":" the server will attempt to decompress the request body.","type":"text"}]},{"type":"codeListing","code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"syntax":"swift"}],"kind":"content"}],"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","title":"HummingbirdCompression","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcompression","abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","role":"collection","kind":"symbol","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit","navigatorTitle":[{"text":"HTTPDecompressionLimit","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPDecompressionLimit","kind":"identifier"}],"title":"HTTPDecompressionLimit","type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"Limits for when decompressing HTTP request data","type":"text"}],"url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit"}}}