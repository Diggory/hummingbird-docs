{"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"sections":[],"metadata":{"modules":[{"name":"HummingbirdLambda"}],"symbolKind":"module","roleHeading":"Framework","externalID":"HummingbirdLambda","role":"collection","title":"HummingbirdLambda"},"hierarchy":{"paths":[[]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"primaryContentSections":[{"content":[{"anchor":"Usage","type":"heading","text":"Usage","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create struct conforming to "},{"type":"codeVoice","code":"HBLambda"},{"type":"text","text":". Setup your application in the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" function: add your middleware, add route handlers etc"}]},{"syntax":"swift","code":["struct MyHandler: HBLambda {","    \/\/ define input and output","    typealias In = APIGateway.Request","    typealias Out = APIGateway.Response","    ","    init(_ app: HBApplication) {","        app.middleware.add(HBLogRequestsMiddleware(.debug))","        app.router.get(\"hello\") { _ in","            return \"Hello\"","        }","    }","}","","Lambda.run { context in","    return HBLambdaHandler<MyHandler>(context: context)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"In"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Out"},{"text":" types define your input and output objects. If you are using an ","type":"text"},{"type":"codeVoice","code":"APIGateway"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"code":"APIGateway.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.Response","type":"codeVoice"},{"text":" respectively. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" HTML interface then set these to ","type":"text"},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.V2.Response","type":"codeVoice"},{"text":". If you are using any other ","type":"text"},{"code":"In","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Out","type":"codeVoice"},{"text":" types you will need to implement the ","type":"text"},{"code":"request(context:application:from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"output(from:)","type":"codeVoice"},{"text":" methods yourself.","type":"text"}]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AsyncSequenceResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBMemoryPersistDriver"],"title":"Classes"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBSendableExtensible","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AsyncSequenceResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBSendableExtensions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaHandler"],"title":"Structures"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdlambda","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBMemoryPersistDriver":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}],"url":"\/documentation\/hummingbirdauth\/hbmemorypersistdriver","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBMemoryPersistDriver","title":"HBMemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambda":{"kind":"symbol","abstract":[{"text":"Protocol for Hummingbird Lambdas. Define the ","type":"text"},{"type":"codeVoice","code":"In"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Out"},{"text":" types, how you convert from ","type":"text"},{"type":"codeVoice","code":"In"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" and ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"Out","type":"codeVoice"}],"url":"\/documentation\/hummingbirdlambda\/hblambda","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLambda"}],"navigatorTitle":[{"kind":"identifier","text":"HBLambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","type":"topic","role":"symbol","title":"HBLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBSendableExtensions":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBSendableExtensions","abstract":[{"text":"Version of ","type":"text"},{"code":"HBExtensions","type":"codeVoice"},{"text":" that requires all extensions are sendable","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/hummingbirdauth\/hbsendableextensions","navigatorTitle":[{"text":"HBSendableExtensions","kind":"identifier"}],"title":"HBSendableExtensions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBSendableExtensions","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AsyncSequenceResponseBodyStreamer":{"abstract":[{"text":"Response body streamer which uses an AsyncSequence as its input.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceResponseBodyStreamer"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceResponseBodyStreamer"}],"type":"topic","title":"AsyncSequenceResponseBodyStreamer","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AsyncSequenceResponseBodyStreamer","url":"\/documentation\/hummingbirdauth\/asyncsequenceresponsebodystreamer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AsyncSequenceResponseGenerator":{"url":"\/documentation\/hummingbirdauth\/asyncsequenceresponsegenerator","navigatorTitle":[{"text":"AsyncSequenceResponseGenerator","kind":"identifier"}],"abstract":[{"type":"text","text":"Wrapper object for AsyncSequence that conforms to "},{"code":"HBResponseGenerator","type":"codeVoice"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AsyncSequenceResponseGenerator","title":"AsyncSequenceResponseGenerator","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AsyncSequenceResponseGenerator","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBSendableExtensible":{"title":"HBSendableExtensible","role":"symbol","abstract":[{"text":"Protocol for extensible classes","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/hbsendableextensible","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBSendableExtensible","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBSendableExtensible"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBSendableExtensible"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambdaHandler":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBLambdaHandler","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"HBLambdaHandler","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hblambdahandler","abstract":[{"text":"Specialization of EventLoopLambdaHandler which runs an HBLambda","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaHandler","title":"HBLambdaHandler"}}}