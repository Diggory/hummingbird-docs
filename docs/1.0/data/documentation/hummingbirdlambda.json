{"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[[]]},"abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"text":"Usage","anchor":"Usage","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"code":"HBLambda","type":"codeVoice"},{"text":". Setup your application in the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" function: add your middleware, add route handlers etc","type":"text"}]},{"code":["struct MyHandler: HBLambda {","    \/\/ define input and output","    typealias In = APIGateway.Request","    typealias Out = APIGateway.Response","    ","    init(_ app: HBApplication) {","        app.middleware.add(HBLogRequestsMiddleware(.debug))","        app.router.get(\"hello\") { _ in","            return \"Hello\"","        }","    }","}","","Lambda.run { context in","    return HBLambdaHandler<MyHandler>(context: context)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"In","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Out","type":"codeVoice"},{"text":" types define your input and output objects. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"code":"APIGateway.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.Response","type":"codeVoice"},{"text":" respectively. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" HTML interface then set these to ","type":"text"},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.V2.Response","type":"codeVoice"},{"text":". If you are using any other ","type":"text"},{"code":"In","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Out","type":"codeVoice"},{"text":" types you will need to implement the ","type":"text"},{"code":"request(context:application:from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"output(from:)","type":"codeVoice"},{"text":" methods yourself.","type":"text"}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver"],"title":"Classes"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensible"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensions"],"title":"Structures"}],"metadata":{"modules":[{"name":"HummingbirdLambda"}],"roleHeading":"Framework","symbolKind":"module","role":"collection","title":"HummingbirdLambda","externalID":"HummingbirdLambda"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBSendableExtensible":{"url":"\/documentation\/hummingbirdlambda\/hbsendableextensible","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HBSendableExtensible","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for extensible classes"}],"navigatorTitle":[{"text":"HBSendableExtensible","kind":"identifier"}],"role":"symbol","title":"HBSendableExtensible","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensible"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLambda"}],"navigatorTitle":[{"kind":"identifier","text":"HBLambda"}],"role":"symbol","title":"HBLambda","url":"\/documentation\/hummingbirdlambda\/hblambda","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas. Define the "},{"type":"codeVoice","code":"In"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Out"},{"text":" types, how you convert from ","type":"text"},{"code":"In","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"Out","type":"codeVoice"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMemoryPersistDriver":{"url":"\/documentation\/hummingbirdlambda\/hbmemorypersistdriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}],"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"title":"HBMemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambdaHandler":{"title":"HBLambdaHandler","role":"symbol","type":"topic","url":"\/documentation\/hummingbirdlambda\/hblambdahandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaHandler","navigatorTitle":[{"kind":"identifier","text":"HBLambdaHandler"}],"abstract":[{"type":"text","text":"Specialization of EventLoopLambdaHandler which runs an HBLambda"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLambdaHandler"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/AsyncSequenceResponseBodyStreamer":{"url":"\/documentation\/hummingbirdlambda\/asyncsequenceresponsebodystreamer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceResponseBodyStreamer"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseBodyStreamer","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceResponseBodyStreamer"}],"abstract":[{"type":"text","text":"Response body streamer which uses an AsyncSequence as its input."}],"title":"AsyncSequenceResponseBodyStreamer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"title":"HummingbirdLambda","role":"collection","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","url":"\/documentation\/hummingbirdlambda"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBSendableExtensions":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBSendableExtensions"}],"title":"HBSendableExtensions","navigatorTitle":[{"kind":"identifier","text":"HBSendableExtensions"}],"abstract":[{"type":"text","text":"Version of "},{"type":"codeVoice","code":"HBExtensions"},{"text":" that requires all extensions are sendable","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensions","url":"\/documentation\/hummingbirdlambda\/hbsendableextensions","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/AsyncSequenceResponseGenerator":{"url":"\/documentation\/hummingbirdlambda\/asyncsequenceresponsegenerator","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequenceResponseGenerator","kind":"identifier"}],"abstract":[{"text":"Wrapper object for AsyncSequence that conforms to ","type":"text"},{"type":"codeVoice","code":"HBResponseGenerator"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseGenerator","navigatorTitle":[{"text":"AsyncSequenceResponseGenerator","kind":"identifier"}],"title":"AsyncSequenceResponseGenerator"}}}