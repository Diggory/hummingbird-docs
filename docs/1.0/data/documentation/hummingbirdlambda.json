{"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver"],"title":"Classes"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensible"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensions"],"title":"Structures"}],"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"anchor":"Usage","type":"heading","text":"Usage"},{"inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"code":"HBLambda","type":"codeVoice"},{"text":". Setup your application in the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" function: add your middleware, add route handlers etc","type":"text"}],"type":"paragraph"},{"code":["struct MyHandler: HBLambda {","    \/\/ define input and output","    typealias In = APIGateway.Request","    typealias Out = APIGateway.Response","    ","    init(_ app: HBApplication) {","        app.middleware.add(HBLogRequestsMiddleware(.debug))","        app.router.get(\"hello\") { _ in","            return \"Hello\"","        }","    }","}","","Lambda.run { context in","    return HBLambdaHandler<MyHandler>(context: context)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"In"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Out"},{"text":" types define your input and output objects. If you are using an ","type":"text"},{"type":"codeVoice","code":"APIGateway"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"type":"codeVoice","code":"APIGateway.Request"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"APIGateway.Response"},{"text":" respectively. If you are using an ","type":"text"},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". If you are using any other "},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Out"},{"type":"text","text":" types you will need to implement the "},{"type":"codeVoice","code":"request(context:application:from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"role":"collection","externalID":"HummingbirdLambda","title":"HummingbirdLambda","modules":[{"name":"HummingbirdLambda"}],"roleHeading":"Framework","symbolKind":"module"},"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBSendableExtensible":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBSendableExtensible","kind":"identifier"}],"kind":"symbol","type":"topic","title":"HBSendableExtensible","abstract":[{"type":"text","text":"Protocol for extensible classes"}],"url":"\/documentation\/hummingbirdlambda\/hbsendableextensible","navigatorTitle":[{"text":"HBSendableExtensible","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol","type":"topic","title":"HummingbirdLambda","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"url":"\/documentation\/hummingbirdlambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/AsyncSequenceResponseGenerator":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequenceResponseGenerator","kind":"identifier"}],"abstract":[{"type":"text","text":"Wrapper object for AsyncSequence that conforms to "},{"type":"codeVoice","code":"HBResponseGenerator"}],"kind":"symbol","navigatorTitle":[{"text":"AsyncSequenceResponseGenerator","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/asyncsequenceresponsegenerator","role":"symbol","type":"topic","title":"AsyncSequenceResponseGenerator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseGenerator"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambdaHandler":{"abstract":[{"text":"Specialization of EventLoopLambdaHandler which runs an HBLambda","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBLambdaHandler"}],"kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hblambdahandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaHandler","title":"HBLambdaHandler","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLambdaHandler"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMemoryPersistDriver":{"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hbmemorypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver","title":"HBMemoryPersistDriver","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"kind":"symbol","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBSendableExtensions":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBSendableExtensions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBSendableExtensions"}],"kind":"symbol","type":"topic","title":"HBSendableExtensions","abstract":[{"type":"text","text":"Version of "},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" that requires all extensions are sendable"}],"url":"\/documentation\/hummingbirdlambda\/hbsendableextensions","navigatorTitle":[{"kind":"identifier","text":"HBSendableExtensions"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/AsyncSequenceResponseBodyStreamer":{"url":"\/documentation\/hummingbirdlambda\/asyncsequenceresponsebodystreamer","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/AsyncSequenceResponseBodyStreamer","abstract":[{"text":"Response body streamer which uses an AsyncSequence as its input.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"AsyncSequenceResponseBodyStreamer","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"AsyncSequenceResponseBodyStreamer","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequenceResponseBodyStreamer","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambda":{"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas. Define the "},{"type":"codeVoice","code":"In"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Out"},{"type":"text","text":" types, how you convert from "},{"type":"codeVoice","code":"In"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"HBResponse"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Out"}],"navigatorTitle":[{"kind":"identifier","text":"HBLambda"}],"kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hblambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","title":"HBLambda","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLambda"}],"role":"symbol"}}}