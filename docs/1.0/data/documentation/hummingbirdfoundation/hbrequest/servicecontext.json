{"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/hummingbirdfoundation\/hbrequest\/servicecontext"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequest"]]},"kind":"symbol","metadata":{"roleHeading":"Instance Property","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serviceContext","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ServiceContext","preciseIdentifier":"s:20ServiceContextModule0aB0V","kind":"typeIdentifier"}],"externalID":"s:11Hummingbird9HBRequestV14serviceContext07ServiceD6Module0eD0Vvp","modules":[{"name":"Hummingbird"}],"platforms":[{"deprecated":false,"beta":false,"name":"iOS","unavailable":false,"introducedAt":"13.0"},{"deprecated":false,"beta":false,"name":"macOS","unavailable":false,"introducedAt":"10.15"},{"deprecated":false,"beta":false,"name":"tvOS","unavailable":false,"introducedAt":"13.0"},{"deprecated":false,"beta":false,"name":"watchOS","unavailable":false,"introducedAt":"6.0"}],"title":"serviceContext","extendedModule":"Hummingbird","symbolKind":"property"},"abstract":[{"type":"text","text":"ServiceContext attached to request. Used to propagate serviceContext to child functions"}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serviceContext","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ServiceContext","preciseIdentifier":"s:20ServiceContextModule0aB0V","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" ","kind":"text"},{"text":"set","kind":"keyword"},{"text":" }","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Attaching serviceContext to the request should be used when we arenâ€™t inside an async"},{"type":"text","text":" "},{"type":"text","text":"function and serviceContext cannot be propagated via Task local variables. Otherwise"},{"type":"text","text":" "},{"type":"text","text":"serviceContext should be propagated using Task local variables using "},{"code":"ServiceContext.$current.withValue(_)","type":"codeVoice"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequest\/serviceContext"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRequest/serviceContext":{"url":"\/documentation\/hummingbirdfoundation\/hbrequest\/servicecontext","abstract":[{"text":"ServiceContext attached to request. Used to propagate serviceContext to child functions","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"serviceContext"},{"kind":"text","text":": "},{"preciseIdentifier":"s:20ServiceContextModule0aB0V","kind":"typeIdentifier","text":"ServiceContext"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequest\/serviceContext","title":"serviceContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRequest":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequest"}],"url":"\/documentation\/hummingbirdfoundation\/hbrequest","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequest","navigatorTitle":[{"kind":"identifier","text":"HBRequest"}],"kind":"symbol","title":"HBRequest"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]}}}