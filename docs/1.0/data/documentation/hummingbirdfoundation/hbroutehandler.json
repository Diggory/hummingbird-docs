{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"variants":[{"paths":["\/documentation\/hummingbirdfoundation\/hbroutehandler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequestDecodable"],"title":"Inherited By","type":"inheritedBy"}],"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBAsyncCallbackResponder"],"generated":true,"title":"Router"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouteHandler\/init(from:)-9q5p0"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouteHandler\/handle(request:)-4ebzc"],"title":"Instance Methods"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"externalID":"s:11Hummingbird14HBRouteHandlerP","role":"symbol","modules":[{"name":"Hummingbird"}],"roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"title":"HBRouteHandler","navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"platforms":["Linux"]}]},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"Instead of passing a closure to the router you can provide an object it should try and","type":"text"},{"text":" ","type":"text"},{"text":"create before handling the request. This allows you to separate the extraction of data","type":"text"},{"text":" ","type":"text"},{"text":"from the request and the processing of the request. For example","type":"text"}],"type":"paragraph"},{"code":["struct UpdateReminder: HBRouteHandler {","    struct Request: Codable {","        let description: String","        let date: Date","    }","    let update: Request","    let id: String","","    init(from request: HBRequest) throws {","        self.update = try request.decode(as: Request.self)","        self.id = try request.parameters.require(\"id\")","    }","    func handle(request: HBRequest) -> EventLoopFuture<HTTPResponseStatus> {","        let reminder = Reminder(id: id, update: update)","        return reminder.update(on: request.db)","            .map { _ in .ok }","    }","}"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouteHandler"},"abstract":[{"text":"Object for handling requests.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBResponder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/hbresponder","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBResponder","title":"HBResponder","navigatorTitle":[{"text":"HBResponder","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouteHandler/handle(request:)-4ebzc":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdfoundation\/hbroutehandler\/handle(request:)-4ebzc","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handle","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird9HBRequestV","text":"HBRequest","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14HBRouteHandlerP7_OutputQa","text":"_Output","kind":"typeIdentifier"}],"required":true,"title":"handle(request:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouteHandler\/handle(request:)-4ebzc","role":"symbol","defaultImplementations":2,"abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBAsyncCallbackResponder":{"type":"topic","title":"HBAsyncCallbackResponder","abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"navigatorTitle":[{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"kind":"symbol","url":"\/documentation\/hummingbirdfoundation\/hbasynccallbackresponder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBAsyncCallbackResponder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouterGroup":{"type":"topic","title":"HBRouterGroup","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/hbroutergroup","role":"symbol","navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterGroup","kind":"symbol","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouterMethods":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterMethods","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"abstract":[{"text":"Conform to ","type":"text"},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post â€¦) methods"}],"title":"HBRouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbirdfoundation\/hbroutermethods"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouterBuilder":{"type":"topic","title":"HBRouterBuilder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterBuilder","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/hbrouterbuilder","role":"symbol","navigatorTitle":[{"text":"HBRouterBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterBuilder","kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouteHandler":{"title":"HBRouteHandler","navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouteHandler","url":"\/documentation\/hummingbirdfoundation\/hbroutehandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Object for handling requests.","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouterMethodOptions":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"url":"\/documentation\/hummingbirdfoundation\/hbroutermethodoptions","abstract":[{"type":"text","text":"Options available to routes"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouterMethodOptions","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"kind":"symbol","title":"HBRouterMethodOptions"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBAsyncRouteHandler":{"title":"HBAsyncRouteHandler","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBAsyncRouteHandler"}],"navigatorTitle":[{"kind":"identifier","text":"HBAsyncRouteHandler"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBAsyncRouteHandler","type":"topic","abstract":[{"text":"Route Handler using async\/await methods","type":"text"}],"url":"\/documentation\/hummingbirdfoundation\/hbasyncroutehandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRequestDecodable":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecodable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequestDecodable","abstract":[{"code":"HBRouteHandler","type":"codeVoice"},{"type":"text","text":" which uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to initialize it"}],"kind":"symbol","title":"HBRequestDecodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecodable"}],"url":"\/documentation\/hummingbirdfoundation\/hbrequestdecodable","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRouteHandler/init(from:)-9q5p0":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdfoundation\/hbroutehandler\/init(from:)-9q5p0","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird9HBRequestV","text":"HBRequest"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"required":true,"title":"init(from:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRouteHandler\/init(from:)-9q5p0","role":"symbol","defaultImplementations":2,"abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBCallbackResponder":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBCallbackResponder","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"kind":"symbol","title":"HBCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"url":"\/documentation\/hummingbirdfoundation\/hbcallbackresponder","type":"topic"}}}