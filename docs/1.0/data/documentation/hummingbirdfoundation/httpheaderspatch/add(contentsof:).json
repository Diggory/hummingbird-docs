{"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird16HTTPHeadersPatchV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF1SL_xmfp","text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"modules":[{"name":"Hummingbird"}],"role":"symbol","symbolKind":"method","title":"add(contentsOf:)","externalID":"s:11Hummingbird16HTTPHeadersPatchV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF","roleHeading":"Instance Method"},"variants":[{"paths":["\/documentation\/hummingbirdfoundation\/httpheaderspatch\/add(contentsof:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"add"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"contentsOf"},{"kind":"text","text":" "},{"kind":"internalParam","text":"other"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird16HTTPHeadersPatchV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF1SL_xmfp","text":"S"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","text":"Sequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == ("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":")"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequence of header name\/value pairs. For maximum compatibility"},{"type":"text","text":" "},{"type":"text","text":"the header should be an ASCII string. For future-proofing with HTTP\/2 lowercase header"},{"type":"text","text":" "},{"type":"text","text":"names are strongly recommended."}]}],"name":"contentsOf"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is strictly additive: if there are other entries with the same header"},{"type":"text","text":" "},{"type":"text","text":"name already in the block, this will add new entries."}]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HTTPHeadersPatch"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HTTPHeadersPatch\/add(contentsOf:)","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"Add a sequence of header name\/value pairs to the block."}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HTTPHeadersPatch/add(contentsOf:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"add"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird16HTTPHeadersPatchV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF1SL_xmfp","text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HTTPHeadersPatch\/add(contentsOf:)","url":"\/documentation\/hummingbirdfoundation\/httpheaderspatch\/add(contentsof:)","kind":"symbol","abstract":[{"type":"text","text":"Add a sequence of header name\/value pairs to the block."}],"title":"add(contentsOf:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HTTPHeadersPatch":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPHeadersPatch"}],"url":"\/documentation\/hummingbirdfoundation\/httpheaderspatch","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HTTPHeadersPatch","title":"HTTPHeadersPatch","navigatorTitle":[{"kind":"identifier","text":"HTTPHeadersPatch"}],"type":"topic","abstract":[{"type":"text","text":"Used to Patch HTTPHeaders. Remembers if a header was added in with "},{"type":"codeVoice","code":"add"},{"type":"text","text":" or "},{"type":"codeVoice","code":"replaceOrAdd"}]}}}