{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"],"title":"Related Documentation"}],"sections":[],"kind":"symbol","hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"collection","modules":[{"name":"HummingbirdCore"}],"roleHeading":"Framework","externalID":"HummingbirdCore","title":"HummingbirdCore","symbolKind":"module"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBBindAddress"],"title":"Server"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerOutput"],"title":"Request"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback"],"title":"Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError"],"title":"Errors"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBootstrap"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable"],"title":"Type Aliases"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdCore contains a Swift NIO based HTTP server. When starting the server you provide it with a struct that conforms to ","type":"text"},{"code":"HBHTTPResponder","type":"codeVoice"},{"text":" to define how the server should respond to requests. For example the following is a responder that always returns a response containing the word “Hello” in the body.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct HelloResponder: HBHTTPResponder {","    func respond(to request: HBHTTPRequest, context: ChannelHandlerContext, onComplete: @escaping (Result<HBHTTPResponse, Error>) -> Void) {","        let responseHead = HTTPResponseHead(version: .init(major: 1, minor: 1), status: .ok)","        let responseBody = context.channel.allocator.buffer(string: \"Hello\")","        let response = HBHTTPResponse(head: responseHead, body: .byteBuffer(responseBody))","        onComplete(.success(response))","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"You then initialise a ","type":"text"},{"type":"codeVoice","code":"HBHTTPServer"},{"text":", call ","type":"text"},{"type":"codeVoice","code":"start"},{"text":" on it and then ","type":"text"},{"type":"codeVoice","code":"wait"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)","let server = HBHTTPServer(","    group: eventLoopGroup, ","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try server.start(responder: HelloResponder()).wait()","\/\/ Wait until server closes which never happens as server channel is never closed","try server.wait()"]},{"anchor":"Swift-service-lifecycle","text":"Swift service lifecycle","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using HummingbirdCore outside of Hummingbird ideally you would use it along with the swift-server library "},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference","isActive":true},{"type":"text","text":". This gives you a framework for clean initialization and shutdown of your server. The following sets up a Lifecycle that initializes the HTTP server and stops it when the application shuts down."}]},{"syntax":"swift","type":"codeListing","code":["import Lifecycle","import LifecycleNIOCompat","","let lifecycle = ServiceLifecycle()","lifecycle.register(","    label: \"HTTP Server\",","    start: .eventLoopFuture { self.server.start(responder: MyResponder()) },","    shutdown: .eventLoopFuture(self.server.stop)",")","lifecycle.start { error in","    if let error = error {","        print(\"ERROR: \\(error)\")","    }","}","lifecycle.wait()"]}]}],"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"variants":[{"paths":["\/documentation\/hummingbirdcore"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamerProtocol":{"type":"topic","title":"HBStreamerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBStreamerProtocol","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbstreamerprotocol","role":"symbol","navigatorTitle":[{"text":"HBStreamerProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerProtocol","kind":"symbol","abstract":[{"text":"Protocol for objects providing a stream of ByteBuffers","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPServer":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPServer"}],"url":"\/documentation\/hummingbirdcore\/hbhttpserver","abstract":[{"type":"text","text":"HTTP server class"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","navigatorTitle":[{"kind":"identifier","text":"HBHTTPServer"}],"kind":"symbol","title":"HBHTTPServer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder":{"title":"HBHTTPResponder","navigatorTitle":[{"text":"HBHTTPResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","url":"\/documentation\/hummingbirdcore\/hbhttpresponder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponder","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Protocol for objects generating a "},{"type":"codeVoice","code":"HBHTTPResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"HBHTTPRequest"},{"type":"text","text":"."}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBBindAddress":{"title":"HBBindAddress","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBindAddress","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBBindAddress","url":"\/documentation\/hummingbirdcore\/hbbindaddress","type":"topic","navigatorTitle":[{"text":"HBBindAddress","kind":"identifier"}],"abstract":[{"text":"Address to bind server to","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBByteBufferStreamer":{"type":"topic","title":"HBByteBufferStreamer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBByteBufferStreamer"}],"url":"\/documentation\/hummingbirdcore\/hbbytebufferstreamer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBByteBufferStreamer"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","kind":"symbol","abstract":[{"text":"Request body streamer. ","type":"text"},{"code":"HBHTTPDecodeHandler","type":"codeVoice"},{"text":" feeds this with ByteBuffers while the Router consumes them","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamCallback":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBStreamCallback"}],"url":"\/documentation\/hummingbirdcore\/hbstreamcallback","kind":"symbol","abstract":[{"type":"text","text":"Function returning streamed byte buffer output"}],"type":"topic","title":"HBStreamCallback","navigatorTitle":[{"kind":"identifier","text":"HBStreamCallback"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponseError":{"url":"\/documentation\/hummingbirdcore\/hbhttpresponseerror","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponseError","kind":"identifier"}],"role":"symbol","abstract":[{"text":"An error that is capable of generating an HTTP response","type":"text"}],"navigatorTitle":[{"text":"HBHTTPResponseError","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError","title":"HBHTTPResponseError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1ChannelInitializer":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTP1ChannelInitializer","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/http1channelinitializer","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","title":"HTTP1ChannelInitializer","navigatorTitle":[{"text":"HTTP1ChannelInitializer","kind":"identifier"}],"type":"topic","abstract":[{"text":"Setup child channel for HTTP1","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBSendable":{"type":"topic","title":"HBSendable","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBSendable"}],"url":"\/documentation\/hummingbirdcore\/hbsendable","role":"symbol","deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"HBSendable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable","kind":"symbol","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBody":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBody","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBody","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbresponsebody","kind":"symbol","abstract":[{"text":"Response body. Can be a single ByteBuffer, a stream of ByteBuffers or empty","type":"text"}],"type":"topic","title":"HBResponseBody","navigatorTitle":[{"text":"HBResponseBody","kind":"identifier"}]},"https://github.com/swift-server/swift-service-lifecycle":{"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"swift-service-lifecycle","type":"link","titleInlineContent":[{"text":"swift-service-lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBodyStreamer":{"title":"HBResponseBodyStreamer","navigatorTitle":[{"text":"HBResponseBodyStreamer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyStreamer","url":"\/documentation\/hummingbirdcore\/hbresponsebodystreamer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBodyStreamer","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Object supplying ByteBuffers for a response body","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBChannelInitializer":{"type":"topic","title":"HBChannelInitializer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBChannelInitializer","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbchannelinitializer","role":"symbol","navigatorTitle":[{"text":"HBChannelInitializer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","kind":"symbol","abstract":[{"text":"HTTPServer child channel initializer protocol","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBootstrap":{"abstract":[{"text":"Protocol for bootstrap.","type":"text"}],"url":"\/documentation\/hummingbirdcore\/httpserverbootstrap","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerBootstrap"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPServerBootstrap"}],"type":"topic","title":"HTTPServerBootstrap","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBootstrap"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamerOutput":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBStreamerOutput"}],"url":"\/documentation\/hummingbirdcore\/hbstreameroutput","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerOutput","title":"HBStreamerOutput","navigatorTitle":[{"kind":"identifier","text":"HBStreamerOutput"}],"type":"topic","abstract":[{"text":"Values returned when we consume the contents of the streamer","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","role":"collection","url":"\/documentation\/hummingbirdtls","kind":"symbol","abstract":[{"text":"Add TLS support to Hummingbird server","type":"text"}],"type":"topic","title":"HummingbirdTLS"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPRequest":{"title":"HBHTTPRequest","navigatorTitle":[{"text":"HBHTTPRequest","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","url":"\/documentation\/hummingbirdcore\/hbhttprequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPRequest","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"HTTP request","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBody":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBody","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestBody","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbrequestbody","kind":"symbol","abstract":[{"text":"Request Body. Either a ByteBuffer or a ByteBuffer streamer","type":"text"}],"type":"topic","title":"HBRequestBody","navigatorTitle":[{"text":"HBRequestBody","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponse":{"type":"topic","title":"HBHTTPResponse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponse"}],"url":"\/documentation\/hummingbirdcore\/hbhttpresponse","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponse"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","kind":"symbol","abstract":[{"text":"HTTP response","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPError":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPError","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbhttperror","kind":"symbol","abstract":[{"text":"Default HTTP error. Provides an HTTP status and a message is so desired","type":"text"}],"type":"topic","title":"HBHTTPError","navigatorTitle":[{"text":"HBHTTPError","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"url":"\/documentation\/hummingbirdhttp2","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","title":"HummingbirdHTTP2","type":"topic","abstract":[{"text":"Add HTTP2 support to Hummingbird server","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBodyStreamerSequence":{"title":"HBRequestBodyStreamerSequence","navigatorTitle":[{"text":"HBRequestBodyStreamerSequence","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","url":"\/documentation\/hummingbirdcore\/hbrequestbodystreamersequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestBodyStreamerSequence","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"AsyncSequence providing ByteBuffers from a request body stream","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"role":"collection","kind":"symbol","type":"topic","title":"HummingbirdCore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]}}}