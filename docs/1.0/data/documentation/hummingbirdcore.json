{"metadata":{"externalID":"HummingbirdCore","symbolKind":"module","modules":[{"name":"HummingbirdCore"}],"role":"collection","title":"HummingbirdCore","roleHeading":"Framework"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBBindAddress"],"title":"Server"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerOutput"],"title":"Request"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback"],"title":"Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError"],"title":"Errors"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBootstrap"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable"],"title":"Type Aliases"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdCore contains a Swift NIO based HTTP server. When starting the server you provide it with a struct that conforms to ","type":"text"},{"type":"codeVoice","code":"HBHTTPResponder"},{"type":"text","text":" to define how the server should respond to requests. For example the following is a responder that always returns a response containing the word “Hello” in the body."}]},{"code":["struct HelloResponder: HBHTTPResponder {","    func respond(to request: HBHTTPRequest, context: ChannelHandlerContext, onComplete: @escaping (Result<HBHTTPResponse, Error>) -> Void) {","        let responseHead = HTTPResponseHead(version: .init(major: 1, minor: 1), status: .ok)","        let responseBody = context.channel.allocator.buffer(string: \"Hello\")","        let response = HBHTTPResponse(head: responseHead, body: .byteBuffer(responseBody))","        onComplete(.success(response))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You then initialise a ","type":"text"},{"code":"HBHTTPServer","type":"codeVoice"},{"text":", call ","type":"text"},{"code":"start","type":"codeVoice"},{"text":" on it and then ","type":"text"},{"code":"wait","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)","let server = HBHTTPServer(","    group: eventLoopGroup, ","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try server.start(responder: HelloResponder()).wait()","\/\/ Wait until server closes which never happens as server channel is never closed","try server.wait()"],"type":"codeListing","syntax":"swift"},{"anchor":"Swift-service-lifecycle","type":"heading","level":2,"text":"Swift service lifecycle"},{"type":"paragraph","inlineContent":[{"text":"If you are using HummingbirdCore outside of Hummingbird ideally you would use it along with the swift-server library ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true,"type":"reference"},{"text":". This gives you a framework for clean initialization and shutdown of your server. The following sets up a Lifecycle that initializes the HTTP server and stops it when the application shuts down.","type":"text"}]},{"code":["import Lifecycle","import LifecycleNIOCompat","","let lifecycle = ServiceLifecycle()","lifecycle.register(","    label: \"HTTP Server\",","    start: .eventLoopFuture { self.server.start(responder: MyResponder()) },","    shutdown: .eventLoopFuture(self.server.stop)",")","lifecycle.start { error in","    if let error = error {","        print(\"ERROR: \\(error)\")","    }","}","lifecycle.wait()"],"type":"codeListing","syntax":"swift"}]}],"sections":[],"variants":[{"paths":["\/documentation\/hummingbirdcore"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore"},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"],"title":"Related Documentation"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBSendable":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable","role":"symbol","url":"\/documentation\/hummingbirdcore\/hbsendable","abstract":[],"type":"topic","title":"HBSendable","navigatorTitle":[{"kind":"identifier","text":"HBSendable"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBSendable"}],"deprecated":true},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPServer":{"title":"HBHTTPServer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBHTTPServer"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","url":"\/documentation\/hummingbirdcore\/hbhttpserver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPServer"}],"type":"topic","abstract":[{"text":"HTTP server class","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamerOutput":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBStreamerOutput"}],"url":"\/documentation\/hummingbirdcore\/hbstreameroutput","title":"HBStreamerOutput","abstract":[{"text":"Values returned when we consume the contents of the streamer","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBStreamerOutput"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerOutput"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"url":"\/documentation\/hummingbirdcore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPError":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","role":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttperror","abstract":[{"text":"Default HTTP error. Provides an HTTP status and a message is so desired","type":"text"}],"type":"topic","title":"HBHTTPError","navigatorTitle":[{"text":"HBHTTPError","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBHTTPError","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBody":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestBody"}],"type":"topic","title":"HBRequestBody","kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbrequestbody","abstract":[{"text":"Request Body. Either a ByteBuffer or a ByteBuffer streamer","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestBody"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponse":{"url":"\/documentation\/hummingbirdcore\/hbhttpresponse","kind":"symbol","navigatorTitle":[{"text":"HBHTTPResponse","kind":"identifier"}],"abstract":[{"type":"text","text":"HTTP response"}],"type":"topic","role":"symbol","title":"HBHTTPResponse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponse","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPRequest":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPRequest"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","title":"HBHTTPRequest","navigatorTitle":[{"kind":"identifier","text":"HBHTTPRequest"}],"url":"\/documentation\/hummingbirdcore\/hbhttprequest","abstract":[{"type":"text","text":"HTTP request"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamCallback":{"url":"\/documentation\/hummingbirdcore\/hbstreamcallback","kind":"symbol","navigatorTitle":[{"text":"HBStreamCallback","kind":"identifier"}],"abstract":[{"text":"Function returning streamed byte buffer output","type":"text"}],"type":"topic","role":"symbol","title":"HBStreamCallback","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"HBStreamCallback","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBBindAddress":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBindAddress","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBBindAddress","title":"HBBindAddress","navigatorTitle":[{"text":"HBBindAddress","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbbindaddress","abstract":[{"type":"text","text":"Address to bind server to"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","role":"collection","url":"\/documentation\/hummingbirdtls","abstract":[{"type":"text","text":"Add TLS support to Hummingbird server"}],"type":"topic","title":"HummingbirdTLS"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1ChannelInitializer":{"url":"\/documentation\/hummingbirdcore\/http1channelinitializer","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","abstract":[{"text":"Setup child channel for HTTP1","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP1ChannelInitializer"}],"title":"HTTP1ChannelInitializer","navigatorTitle":[{"kind":"identifier","text":"HTTP1ChannelInitializer"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBChannelInitializer":{"title":"HBChannelInitializer","role":"symbol","navigatorTitle":[{"text":"HBChannelInitializer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","url":"\/documentation\/hummingbirdcore\/hbchannelinitializer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBChannelInitializer","kind":"identifier"}],"type":"topic","abstract":[{"text":"HTTPServer child channel initializer protocol","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBodyStreamer":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyStreamer","navigatorTitle":[{"text":"HBResponseBodyStreamer","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbresponsebodystreamer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBodyStreamer","kind":"identifier"}],"abstract":[{"text":"Object supplying ByteBuffers for a response body","type":"text"}],"type":"topic","role":"symbol","title":"HBResponseBodyStreamer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBody":{"kind":"symbol","title":"HBResponseBody","url":"\/documentation\/hummingbirdcore\/hbresponsebody","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBody","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBody","kind":"identifier"}],"abstract":[{"text":"Response body. Can be a single ByteBuffer, a stream of ByteBuffers or empty","type":"text"}],"navigatorTitle":[{"text":"HBResponseBody","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder":{"url":"\/documentation\/hummingbirdcore\/hbhttpresponder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","abstract":[{"text":"Protocol for objects generating a ","type":"text"},{"code":"HBHTTPResponse","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"HBHTTPRequest","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponder"}],"title":"HBHTTPResponder","navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBByteBufferStreamer":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBByteBufferStreamer"}],"type":"topic","title":"HBByteBufferStreamer","kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbbytebufferstreamer","abstract":[{"text":"Request body streamer. ","type":"text"},{"code":"HBHTTPDecodeHandler","type":"codeVoice"},{"text":" feeds this with ByteBuffers while the Router consumes them","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBByteBufferStreamer"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamerProtocol":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBStreamerProtocol"}],"type":"topic","title":"HBStreamerProtocol","kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbstreamerprotocol","abstract":[{"text":"Protocol for objects providing a stream of ByteBuffers","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBStreamerProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBodyStreamerSequence":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestBodyStreamerSequence"}],"type":"topic","title":"HBRequestBodyStreamerSequence","kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbrequestbodystreamersequence","abstract":[{"text":"AsyncSequence providing ByteBuffers from a request body stream","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestBodyStreamerSequence"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"url":"\/documentation\/hummingbirdhttp2","role":"collection","abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server"}],"title":"HummingbirdHTTP2","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponseError":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError","title":"HBHTTPResponseError","url":"\/documentation\/hummingbirdcore\/hbhttpresponseerror","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBHTTPResponseError"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"An error that is capable of generating an HTTP response","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponseError"}]},"https://github.com/swift-server/swift-service-lifecycle":{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","titleInlineContent":[{"type":"text","text":"swift-service-lifecycle"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link","title":"swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBootstrap":{"abstract":[{"type":"text","text":"Protocol for bootstrap."}],"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HTTPServerBootstrap","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/httpserverbootstrap","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBootstrap","title":"HTTPServerBootstrap","navigatorTitle":[{"text":"HTTPServerBootstrap","kind":"identifier"}]}}}