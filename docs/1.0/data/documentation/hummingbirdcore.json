{"topicSections":[{"title":"Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBBindAddress"]},{"title":"Request","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerOutput"]},{"title":"Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback"]},{"title":"Errors","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError"]},{"title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBootstrap"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable"]}],"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/hummingbirdcore"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdCore contains a Swift NIO based HTTP server. When starting the server you provide it with a struct that conforms to "},{"type":"codeVoice","code":"HBHTTPResponder"},{"type":"text","text":" to define how the server should respond to requests. For example the following is a responder that always returns a response containing the word “Hello” in the body."}]},{"type":"codeListing","code":["struct HelloResponder: HBHTTPResponder {","    func respond(to request: HBHTTPRequest, context: ChannelHandlerContext, onComplete: @escaping (Result<HBHTTPResponse, Error>) -> Void) {","        let responseHead = HTTPResponseHead(version: .init(major: 1, minor: 1), status: .ok)","        let responseBody = context.channel.allocator.buffer(string: \"Hello\")","        let response = HBHTTPResponse(head: responseHead, body: .byteBuffer(responseBody))","        onComplete(.success(response))","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You then initialise a ","type":"text"},{"type":"codeVoice","code":"HBHTTPServer"},{"text":", call ","type":"text"},{"type":"codeVoice","code":"start"},{"text":" on it and then ","type":"text"},{"type":"codeVoice","code":"wait"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)","let server = HBHTTPServer(","    group: eventLoopGroup, ","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try server.start(responder: HelloResponder()).wait()","\/\/ Wait until server closes which never happens as server channel is never closed","try server.wait()"],"syntax":"swift"},{"type":"heading","anchor":"Swift-service-lifecycle","level":2,"text":"Swift service lifecycle"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using HummingbirdCore outside of Hummingbird ideally you would use it along with the swift-server library "},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference","isActive":true},{"type":"text","text":". This gives you a framework for clean initialization and shutdown of your server. The following sets up a Lifecycle that initializes the HTTP server and stops it when the application shuts down."}]},{"type":"codeListing","code":["import Lifecycle","import LifecycleNIOCompat","","let lifecycle = ServiceLifecycle()","lifecycle.register(","    label: \"HTTP Server\",","    start: .eventLoopFuture { self.server.start(responder: MyResponder()) },","    shutdown: .eventLoopFuture(self.server.stop)",")","lifecycle.start { error in","    if let error = error {","        print(\"ERROR: \\(error)\")","    }","}","lifecycle.wait()"],"syntax":"swift"}]}],"hierarchy":{"paths":[[]]},"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"metadata":{"title":"HummingbirdCore","symbolKind":"module","role":"collection","externalID":"HummingbirdCore","modules":[{"name":"HummingbirdCore"}],"roleHeading":"Framework"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"https://github.com/swift-server/swift-service-lifecycle":{"type":"link","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","titleInlineContent":[{"text":"swift-service-lifecycle","type":"text"}],"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBodyStreamer":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseBodyStreamer"}],"kind":"symbol","abstract":[{"type":"text","text":"Object supplying ByteBuffers for a response body"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyStreamer","navigatorTitle":[{"kind":"identifier","text":"HBResponseBodyStreamer"}],"title":"HBResponseBodyStreamer","url":"\/documentation\/hummingbirdcore\/hbresponsebodystreamer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder":{"url":"\/documentation\/hummingbirdcore\/hbhttpresponder","navigatorTitle":[{"text":"HBHTTPResponder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","abstract":[{"type":"text","text":"Protocol for objects generating a "},{"type":"codeVoice","code":"HBHTTPResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"HBHTTPRequest"},{"type":"text","text":"."}],"title":"HBHTTPResponder","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponder","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBodyStreamerSequence":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestBodyStreamerSequence","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","type":"topic","navigatorTitle":[{"text":"HBRequestBodyStreamerSequence","kind":"identifier"}],"role":"symbol","abstract":[{"text":"AsyncSequence providing ByteBuffers from a request body stream","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbrequestbodystreamersequence","kind":"symbol","title":"HBRequestBodyStreamerSequence"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBody":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"HBResponseBody","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Response body. Can be a single ByteBuffer, a stream of ByteBuffers or empty","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBody","navigatorTitle":[{"text":"HBResponseBody","kind":"identifier"}],"title":"HBResponseBody","url":"\/documentation\/hummingbirdcore\/hbresponsebody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamCallback":{"kind":"symbol","title":"HBStreamCallback","navigatorTitle":[{"kind":"identifier","text":"HBStreamCallback"}],"type":"topic","abstract":[{"text":"Function returning streamed byte buffer output","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/hbstreamcallback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBStreamCallback"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPError":{"navigatorTitle":[{"text":"HBHTTPError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPError","kind":"identifier"}],"title":"HBHTTPError","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttperror","abstract":[{"text":"Default HTTP error. Provides an HTTP status and a message is so desired","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPServer":{"navigatorTitle":[{"text":"HBHTTPServer","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPServer","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"HTTP server class"}],"url":"\/documentation\/hummingbirdcore\/hbhttpserver","title":"HBHTTPServer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamerProtocol":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBStreamerProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerProtocol","type":"topic","navigatorTitle":[{"text":"HBStreamerProtocol","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Protocol for objects providing a stream of ByteBuffers","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbstreamerprotocol","kind":"symbol","title":"HBStreamerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","type":"topic","role":"collection","abstract":[{"text":"Add HTTP2 support to Hummingbird server","type":"text"}],"url":"\/documentation\/hummingbirdhttp2","kind":"symbol","title":"HummingbirdHTTP2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","role":"collection","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"url":"\/documentation\/hummingbirdcore","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponseError":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponseError","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbhttpresponseerror","role":"symbol","type":"topic","title":"HBHTTPResponseError","abstract":[{"text":"An error that is capable of generating an HTTP response","type":"text"}],"navigatorTitle":[{"text":"HBHTTPResponseError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"url":"\/documentation\/hummingbirdtls","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","abstract":[{"text":"Add TLS support to Hummingbird server","type":"text"}],"title":"HummingbirdTLS","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBBindAddress":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBindAddress"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBBindAddress","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBBindAddress"}],"role":"symbol","abstract":[{"type":"text","text":"Address to bind server to"}],"url":"\/documentation\/hummingbirdcore\/hbbindaddress","kind":"symbol","title":"HBBindAddress"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBChannelInitializer":{"url":"\/documentation\/hummingbirdcore\/hbchannelinitializer","navigatorTitle":[{"kind":"identifier","text":"HBChannelInitializer"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","abstract":[{"type":"text","text":"HTTPServer child channel initializer protocol"}],"title":"HBChannelInitializer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBChannelInitializer"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPRequest":{"navigatorTitle":[{"text":"HBHTTPRequest","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPRequest","kind":"identifier"}],"role":"symbol","abstract":[{"text":"HTTP request","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbhttprequest","title":"HBHTTPRequest"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBody":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestBody","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBody","type":"topic","navigatorTitle":[{"text":"HBRequestBody","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Request Body. Either a ByteBuffer or a ByteBuffer streamer","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbrequestbody","kind":"symbol","title":"HBRequestBody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1ChannelInitializer":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTP1ChannelInitializer"}],"abstract":[{"text":"Setup child channel for HTTP1","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","type":"topic","title":"HTTP1ChannelInitializer","kind":"symbol","navigatorTitle":[{"text":"HTTP1ChannelInitializer","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/http1channelinitializer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBootstrap":{"role":"symbol","url":"\/documentation\/hummingbirdcore\/httpserverbootstrap","abstract":[{"type":"text","text":"Protocol for bootstrap."}],"navigatorTitle":[{"text":"HTTPServerBootstrap","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBootstrap","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPServerBootstrap","kind":"identifier"}],"kind":"symbol","type":"topic","title":"HTTPServerBootstrap"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBSendable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable","title":"HBSendable","navigatorTitle":[{"kind":"identifier","text":"HBSendable"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBSendable"}],"url":"\/documentation\/hummingbirdcore\/hbsendable","deprecated":true,"role":"symbol","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponse":{"navigatorTitle":[{"text":"HBHTTPResponse","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponse","kind":"identifier"}],"role":"symbol","abstract":[{"text":"HTTP response","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbhttpresponse","title":"HBHTTPResponse"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamerOutput":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBStreamerOutput","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamerOutput","type":"topic","navigatorTitle":[{"text":"HBStreamerOutput","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Values returned when we consume the contents of the streamer","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbstreameroutput","kind":"symbol","title":"HBStreamerOutput"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBByteBufferStreamer":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBByteBufferStreamer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","type":"topic","navigatorTitle":[{"text":"HBByteBufferStreamer","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Request body streamer. ","type":"text"},{"code":"HBHTTPDecodeHandler","type":"codeVoice"},{"text":" feeds this with ByteBuffers while the Router consumes them","type":"text"}],"url":"\/documentation\/hummingbirdcore\/hbbytebufferstreamer","kind":"symbol","title":"HBByteBufferStreamer"}}}