{"metadata":{"externalID":"HummingbirdLambda","title":"HummingbirdLambda","symbolKind":"module","modules":[{"name":"HummingbirdLambda"}],"role":"collection","roleHeading":"Framework"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAPIGatewayLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAPIGatewayV2Lambda"],"title":"Lambda protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicLambdaRequestContext"],"title":"Request context"}],"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"paragraph","inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"type":"codeVoice","code":"HBLambda"},{"text":". Setup your router in the ","type":"text"},{"type":"codeVoice","code":"buildResponder"},{"text":" function: add routes, middleware etc and then return its responder.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyHandler: HBLambda {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = HBBasicLambdaRequestContext<Event>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some HBResponder<Context> {","        let router = HBRouter(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"code":"APIGateway","type":"codeVoice"},{"type":"text","text":" REST interface to invoke your Lambda then set these to "},{"code":"APIGateway.Request","type":"codeVoice"},{"type":"text","text":" and "},{"code":"APIGateway.Response","type":"codeVoice"},{"type":"text","text":" respectively. If you are using an "},{"code":"APIGateway","type":"codeVoice"},{"type":"text","text":" HTML interface then set these to "},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"type":"text","text":" and "},{"code":"APIGateway.V2.Response","type":"codeVoice"},{"type":"text","text":". The protocols "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAPIGatewayLambda"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAPIGatewayV2Lambda"},{"type":"text","text":" set these up for you."}]},{"type":"paragraph","inlineContent":[{"text":"If you are using any other ","type":"text"},{"code":"In","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Out","type":"codeVoice"},{"text":" types you will need to implement the ","type":"text"},{"code":"request(context:application:from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"output(from:)","type":"codeVoice"},{"text":" methods yourself.","type":"text"}]}]}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambda":{"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambda","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLambda"}],"url":"\/documentation\/hummingbirdlambda\/hblambda","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBLambda"}],"kind":"symbol","type":"topic","title":"HBLambda"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAPIGatewayLambda":{"kind":"symbol","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGateway"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAPIGatewayLambda","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"HBAPIGatewayLambda","kind":"identifier"}],"title":"HBAPIGatewayLambda","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbapigatewaylambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAPIGatewayLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambdaRequestContext":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBLambdaRequestContext","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/hblambdarequestcontext","navigatorTitle":[{"text":"HBLambdaRequestContext","kind":"identifier"}],"abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"role":"symbol","title":"HBLambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBBasicLambdaRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicLambdaRequestContext","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicLambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/hbbasiclambdarequestcontext","navigatorTitle":[{"text":"HBBasicLambdaRequestContext","kind":"identifier"}],"abstract":[{"text":"The default Lambda request context.","type":"text"}],"role":"symbol","title":"HBBasicLambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"role":"collection","url":"\/documentation\/hummingbirdlambda","title":"HummingbirdLambda","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAPIGatewayV2Lambda":{"title":"HBAPIGatewayV2Lambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAPIGatewayV2Lambda","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBAPIGatewayV2Lambda","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGatewayV2","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbapigatewayv2lambda","navigatorTitle":[{"text":"HBAPIGatewayV2Lambda","kind":"identifier"}]}}}