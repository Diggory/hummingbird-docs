{"kind":"symbol","hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Usage","level":2,"type":"heading","anchor":"Usage"},{"inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"type":"codeVoice","code":"LambdaFunction"},{"text":". Setup your router in the ","type":"text"},{"type":"codeVoice","code":"buildResponder"},{"text":" function: add routes, middleware etc and then return its responder.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Event"},{"text":" and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" types define your input and output objects. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"code":"APIGateway.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.Response","type":"codeVoice"},{"text":" respectively. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" HTML interface then set these to ","type":"text"},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.V2.Response","type":"codeVoice"},{"text":". The protocols ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","isActive":true,"type":"reference"},{"text":" set these up for you.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are using any other "},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Out"},{"type":"text","text":" types you will need to implement the "},{"type":"codeVoice","code":"request(context:application:from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}],"type":"paragraph"}]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]}],"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"title":"Lambda protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"]},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"]}],"metadata":{"roleHeading":"Framework","images":[{"identifier":"logo.png","type":"icon"}],"externalID":"HummingbirdLambda","title":"HummingbirdLambda","symbolKind":"module","role":"collection","modules":[{"name":"HummingbirdLambda"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LambdaRequestContext"}],"abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"title":"LambdaRequestContext","role":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","type":"topic","navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"title":"LambdaRequestContextSource","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","role":"collection","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"url":"\/documentation\/hummingbirdlambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","type":"topic","title":"HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","role":"symbol","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"title":"LambdaFunction","url":"\/documentation\/hummingbirdlambda\/lambdafunction","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaFunction"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaFunction"}]},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","url":"\/documentation\/hummingbirdlambdatesting","type":"topic","title":"HummingbirdLambdaTesting","role":"collection","abstract":[],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicLambdaRequestContext"}],"abstract":[{"type":"text","text":"The default Lambda request context."}],"title":"BasicLambdaRequestContext","role":"symbol","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","type":"topic","navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"role":"symbol","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGatewayV2"}],"url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"navigatorTitle":[{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"kind":"symbol","type":"topic","title":"APIGatewayV2LambdaFunction"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"title":"APIGatewayLambdaFunction","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","kind":"symbol","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGateway","type":"text"}]}}}