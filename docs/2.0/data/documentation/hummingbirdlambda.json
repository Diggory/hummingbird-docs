{"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"metadata":{"role":"collection","title":"HummingbirdLambda","modules":[{"name":"HummingbirdLambda"}],"externalID":"HummingbirdLambda","symbolKind":"module","images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"],"title":"Lambda protocols","anchor":"Lambda-protocols"},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"],"anchor":"Request-context"}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Usage","anchor":"Usage","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create struct conforming to "},{"code":"LambdaFunction","type":"codeVoice"},{"type":"text","text":". Setup your router in the "},{"code":"buildResponder","type":"codeVoice"},{"type":"text","text":" function: add routes, middleware etc and then return its responder."}]},{"syntax":"swift","type":"codeListing","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Event"},{"text":" and ","type":"text"},{"code":"Output","type":"codeVoice"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"type":"codeVoice","code":"APIGateway.Request"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"APIGateway.Response"},{"text":" respectively. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"type":"text","text":" HTML interface then set these to "},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". The protocols "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","isActive":true},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"},{"type":"text","text":" set these up for you."}]},{"type":"paragraph","inlineContent":[{"text":"If you are using any other ","type":"text"},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"code":"Out","type":"codeVoice"},{"text":" types you will need to implement the ","type":"text"},{"code":"request(context:application:from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"title":"APIGatewayV2LambdaFunction","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGatewayV2","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"abstract":[],"kind":"symbol","title":"HummingbirdLambdaTesting","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","type":"topic","url":"\/documentation\/hummingbirdlambdatesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"url":"\/documentation\/hummingbirdlambda\/lambdafunction","role":"symbol","title":"LambdaFunction","type":"topic","navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaFunction","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdLambda","url":"\/documentation\/hummingbirdlambda","role":"collection","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicLambdaRequestContext","kind":"identifier"}],"title":"BasicLambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","role":"symbol","abstract":[{"type":"text","text":"The default Lambda request context."}],"kind":"symbol","type":"topic"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"abstract":[],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","role":"symbol","title":"LambdaRequestContextSource","type":"topic","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LambdaRequestContextSource"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"title":"LambdaRequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","type":"topic","kind":"symbol","title":"APIGatewayLambdaFunction","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"navigatorTitle":[{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGateway"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","role":"collection"}}}