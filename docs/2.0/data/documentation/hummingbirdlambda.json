{"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","metadata":{"role":"collection","roleHeading":"Framework","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"HummingbirdLambda"}],"title":"HummingbirdLambda","externalID":"HummingbirdLambda","symbolKind":"module"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Usage","text":"Usage","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Create struct conforming to "},{"type":"codeVoice","code":"LambdaFunction"},{"type":"text","text":". Setup your router in the "},{"code":"buildResponder","type":"codeVoice"},{"text":" function: add routes, middleware etc and then return its responder.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Event"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"code":"APIGateway.Request","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.Response"},{"type":"text","text":" respectively. If you are using an "},{"code":"APIGateway","type":"codeVoice"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". The protocols "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","isActive":true,"type":"reference"},{"text":" set these up for you.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using any other "},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"code":"Out","type":"codeVoice"},{"type":"text","text":" types you will need to implement the "},{"code":"request(context:application:from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}]}]}],"abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Lambda protocols","anchor":"Lambda-protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"]},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"],"anchor":"Request-context"}],"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","type":"topic","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"url":"\/documentation\/hummingbirdlambda","kind":"symbol","title":"HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"role":"symbol","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","title":"APIGatewayV2LambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGatewayV2","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"title":"HummingbirdLambdaTesting","type":"topic","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/hummingbirdlambdatesting","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"role":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdafunction","title":"LambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","abstract":[{"text":"Protocol for Hummingbird Lambdas.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LambdaFunction"}],"navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"role":"symbol","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGateway","type":"text"}],"title":"APIGatewayLambdaFunction","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","navigatorTitle":[{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"APIGatewayLambdaFunction","kind":"identifier"}]},"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"kind":"symbol","title":"LambdaRequestContextSource","type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LambdaRequestContextSource","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"kind":"symbol","title":"BasicLambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicLambdaRequestContext"}],"abstract":[{"text":"The default Lambda request context.","type":"text"}],"navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","title":"LambdaRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"LambdaRequestContext","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"role":"symbol","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"type":"topic"}}}