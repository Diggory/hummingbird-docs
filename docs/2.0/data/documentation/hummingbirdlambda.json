{"topicSections":[{"title":"Lambda protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"]},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext"]}],"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"HummingbirdLambda"}],"symbolKind":"module","roleHeading":"Framework","title":"HummingbirdLambda","role":"collection","externalID":"HummingbirdLambda"},"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","primaryContentSections":[{"content":[{"text":"Usage","type":"heading","level":2,"anchor":"Usage"},{"type":"paragraph","inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"code":"LambdaFunction","type":"codeVoice"},{"text":". Setup your router in the ","type":"text"},{"code":"buildResponder","type":"codeVoice"},{"text":" function: add routes, middleware etc and then return its responder.","type":"text"}]},{"code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" REST interface to invoke your Lambda then set these to "},{"type":"codeVoice","code":"APIGateway.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.Response"},{"type":"text","text":" respectively. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". The protocols "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"},{"type":"text","text":" set these up for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using any other "},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Out"},{"type":"text","text":" types you will need to implement the "},{"type":"codeVoice","code":"request(context:application:from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}]}],"kind":"content"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","title":"APIGatewayV2LambdaFunction","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGatewayV2","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","role":"collection","type":"topic","url":"\/documentation\/hummingbirdlambda","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","kind":"symbol","url":"\/documentation\/hummingbirdlambdatesting","type":"topic","abstract":[],"role":"collection","title":"HummingbirdLambdaTesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"abstract":[{"text":"Protocol for Hummingbird Lambdas.","type":"text"}],"title":"LambdaFunction","url":"\/documentation\/hummingbirdlambda\/lambdafunction","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"LambdaFunction","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","title":"LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"type":"topic","abstract":[{"type":"text","text":"The default Lambda request context."}],"role":"symbol","title":"BasicLambdaRequestContext","navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicLambdaRequestContext"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGateway","type":"text"}],"title":"APIGatewayLambdaFunction","url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","kind":"symbol","type":"topic","navigatorTitle":[{"text":"APIGatewayLambdaFunction","kind":"identifier"}]}}}