{"metadata":{"role":"collection","externalID":"HummingbirdLambda","roleHeading":"Framework","modules":[{"name":"HummingbirdLambda"}],"symbolKind":"module","title":"HummingbirdLambda"},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"],"title":"Lambda protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext"],"title":"Request context"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"],"title":"Related Documentation"}],"primaryContentSections":[{"content":[{"text":"Usage","type":"heading","level":2,"anchor":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create struct conforming to "},{"type":"codeVoice","code":"LambdaFunction"},{"type":"text","text":". Setup your router in the "},{"type":"codeVoice","code":"buildResponder"},{"type":"text","text":" function: add routes, middleware etc and then return its responder."}]},{"code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Event","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"code":"APIGateway","type":"codeVoice"},{"type":"text","text":" REST interface to invoke your Lambda then set these to "},{"code":"APIGateway.Request","type":"codeVoice"},{"type":"text","text":" and "},{"code":"APIGateway.Response","type":"codeVoice"},{"type":"text","text":" respectively. If you are using an "},{"code":"APIGateway","type":"codeVoice"},{"type":"text","text":" HTML interface then set these to "},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"type":"text","text":" and "},{"code":"APIGateway.V2.Response","type":"codeVoice"},{"type":"text","text":". The protocols "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"},{"type":"text","text":" set these up for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using any other "},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Out"},{"type":"text","text":" types you will need to implement the "},{"type":"codeVoice","code":"request(context:application:from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"title":"LambdaFunction","navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","url":"\/documentation\/hummingbirdlambda\/lambdafunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaFunction","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"kind":"symbol","title":"APIGatewayV2LambdaFunction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGatewayV2"}],"url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"kind":"symbol","title":"HummingbirdLambdaTesting","abstract":[],"url":"\/documentation\/hummingbirdlambdatesting","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"type":"topic","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","title":"BasicLambdaRequestContext","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicLambdaRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"BasicLambdaRequestContext"}],"abstract":[{"type":"text","text":"The default Lambda request context."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"title":"LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","kind":"symbol","navigatorTitle":[{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"title":"APIGatewayLambdaFunction","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGateway","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"url":"\/documentation\/hummingbirdlambda","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"title":"HummingbirdLambda","type":"topic"}}}