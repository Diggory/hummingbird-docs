{"hierarchy":{"paths":[[]]},"topicSections":[{"anchor":"Lambda-protocols","title":"Lambda protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"]},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"],"anchor":"Request-context","title":"Request context"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"],"anchor":"Related-Documentation","title":"Related Documentation"}],"abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"type":"codeVoice","code":"LambdaFunction"},{"type":"text","text":". Setup your router in the "},{"type":"codeVoice","code":"buildResponder"},{"type":"text","text":" function: add routes, middleware etc and then return its responder."}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"Event","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" types define your input and output objects. If you are using an ","type":"text"},{"type":"codeVoice","code":"APIGateway"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"code":"APIGateway.Request","type":"codeVoice"},{"type":"text","text":" and "},{"code":"APIGateway.Response","type":"codeVoice"},{"type":"text","text":" respectively. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". The protocols "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","type":"reference","isActive":true},{"type":"text","text":" set these up for you."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are using any other "},{"type":"codeVoice","code":"In"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Out"},{"text":" types you will need to implement the ","type":"text"},{"type":"codeVoice","code":"request(context:application:from:)"},{"text":" and ","type":"text"},{"code":"output(from:)","type":"codeVoice"},{"text":" methods yourself.","type":"text"}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"kind":"symbol","metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"symbolKind":"module","roleHeading":"Framework","modules":[{"name":"HummingbirdLambda"}],"externalID":"HummingbirdLambda","title":"HummingbirdLambda","role":"collection"},"references":{"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"title":"LambdaRequestContextSource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","abstract":[],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"title":"LambdaRequestContext","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"LambdaRequestContext","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"title":"APIGatewayLambdaFunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGateway"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"APIGatewayLambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdafunction","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"LambdaFunction","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","role":"symbol","title":"LambdaFunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","kind":"symbol","type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","title":"HummingbirdLambdaTesting","kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/hummingbirdlambdatesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"title":"HummingbirdLambda","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdlambda","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"title":"APIGatewayV2LambdaFunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGatewayV2"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"title":"BasicLambdaRequestContext","abstract":[{"type":"text","text":"The default Lambda request context."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicLambdaRequestContext"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BasicLambdaRequestContext"}]}}}