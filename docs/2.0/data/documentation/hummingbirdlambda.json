{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"inlineContent":[{"type":"text","text":"Create struct conforming to "},{"code":"LambdaFunction","type":"codeVoice"},{"type":"text","text":". Setup your router in the "},{"code":"buildResponder","type":"codeVoice"},{"type":"text","text":" function: add routes, middleware etc and then return its responder."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" REST interface to invoke your Lambda then set these to "},{"type":"codeVoice","code":"APIGateway.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.Response"},{"type":"text","text":" respectively. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". The protocols "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","isActive":true},{"type":"text","text":" set these up for you."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are using any other "},{"type":"codeVoice","code":"In"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Out"},{"type":"text","text":" types you will need to implement the "},{"type":"codeVoice","code":"request(context:application:from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"output(from:)"},{"type":"text","text":" methods yourself."}],"type":"paragraph"}]}],"metadata":{"title":"HummingbirdLambda","role":"collection","symbolKind":"module","roleHeading":"Framework","modules":[{"name":"HummingbirdLambda"}],"externalID":"HummingbirdLambda"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"hierarchy":{"paths":[[]]},"kind":"symbol","topicSections":[{"title":"Lambda protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"]},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"]}],"abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicLambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","title":"BasicLambdaRequestContext","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","abstract":[{"text":"The default Lambda request context.","type":"text"}],"navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"kind":"symbol","title":"HummingbirdLambdaTesting","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","type":"topic","url":"\/documentation\/hummingbirdlambdatesting","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"title":"APIGatewayLambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGateway"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayLambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"title":"LambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","url":"\/documentation\/hummingbirdlambda\/lambdafunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaFunction"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","kind":"symbol","url":"\/documentation\/hummingbirdlambda","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGatewayV2"}],"title":"APIGatewayV2LambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"type":"topic","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"type":"topic","title":"LambdaRequestContextSource","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"type":"topic","title":"LambdaRequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","role":"symbol"}}}