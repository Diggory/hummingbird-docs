{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody"]]},"sections":[],"variants":[{"paths":["\/documentation\/hummingbirdcore\/responsebody\/init(contentlength:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Initialise ResponseBody with closure writing body contents."}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"contentLength","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":"? = nil, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"write","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"text":" (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore18ResponseBodyWriterP","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","text":"ResponseBodyWriter","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"Optional length of body","type":"text"}],"type":"paragraph"}],"name":"contentLength"},{"content":[{"inlineContent":[{"type":"text","text":"closure provided with "},{"type":"codeVoice","code":"writer"},{"type":"text","text":" type that can be used to write to response body"}],"type":"paragraph"}],"name":"write"}],"kind":"parameters"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"When you have finished writing the response body you need to indicate you have","type":"text"},{"text":" ","type":"text"},{"text":"finished by calling ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter\/finish(_:)","type":"reference","isActive":true},{"text":". At this","type":"text"},{"text":" ","type":"text"},{"text":"point you can also send trailing headers by including them as a parameter in","type":"text"},{"text":" ","type":"text"},{"text":"the finsh() call.","type":"text"}],"type":"paragraph"},{"code":["let responseBody = ResponseBody(contentLength: contentLength) { writer in","    try await writer.write(buffer)","    try await writer.finish(nil)","}"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"kind":"symbol","metadata":{"role":"symbol","modules":[{"name":"HummingbirdCore"}],"symbolKind":"init","externalID":"s:15HummingbirdCore12ResponseBodyV13contentLength_ACSiSg_yAA0cD6Writer_pzYaYbKctcfc","title":"init(contentLength:_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"contentLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":"?, (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore18ResponseBodyWriterP","text":"ResponseBodyWriter","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"roleHeading":"Initializer"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody\/init(contentLength:_:)","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"url":"\/documentation\/hummingbirdcore","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","title":"HummingbirdCore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"title":"ResponseBodyWriter","url":"\/documentation\/hummingbirdcore\/responsebodywriter","type":"topic","abstract":[{"type":"text","text":"HTTP Response Body part writer"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseBodyWriter"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseBodyWriter"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"type":"topic","url":"\/documentation\/hummingbirdcore\/responsebody","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBody","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","navigatorTitle":[{"text":"ResponseBody","kind":"identifier"}],"title":"ResponseBody","abstract":[{"type":"text","text":"Response body"}]},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"type":"image","alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter/finish(_:)":{"type":"topic","url":"\/documentation\/hummingbirdcore\/responsebodywriter\/finish(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9HTTPTypes10HTTPFieldsV","text":"HTTPFields","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter\/finish(_:)","title":"finish(_:)","abstract":[{"type":"text","text":"Finish writing body"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody/init(contentLength:_:)":{"title":"init(contentLength:_:)","url":"\/documentation\/hummingbirdcore\/responsebody\/init(contentlength:_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"contentLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":"?, (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore18ResponseBodyWriterP","text":"ResponseBodyWriter","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Initialise ResponseBody with closure writing body contents."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody\/init(contentLength:_:)","role":"symbol","type":"topic"}}}