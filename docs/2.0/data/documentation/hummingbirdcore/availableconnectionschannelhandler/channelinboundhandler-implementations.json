{"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/unwrapInboundIn(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/wrapInboundOut(_:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/ChannelInboundHandler-Implementations"},"metadata":{"modules":[{"name":"HummingbirdCore"}],"roleHeading":"API Collection","title":"ChannelInboundHandler Implementations","role":"collectionGroup"},"references":{"logo.png":{"identifier":"logo.png","alt":null,"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"type":"topic","abstract":[{"type":"text","text":"Channel Handler that controls whether we should accept new connections"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","title":"AvailableConnectionsChannelHandler","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","type":"topic","url":"\/documentation\/hummingbirdcore","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/wrapInboundOut(_:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/wrapInboundOut(_:)","title":"wrapInboundOut(_:)","role":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/wrapinboundout(_:)","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"wrapInboundOut","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelInboundHandlerP0C3OutQa","text":"InboundOut"},{"text":") -> ","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/unwrapInboundIn(_:)":{"kind":"symbol","role":"symbol","title":"unwrapInboundIn(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unwrapInboundIn","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7NIOCore21ChannelInboundHandlerP0C2InQa","text":"InboundIn","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/unwrapinboundin(_:)","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/unwrapInboundIn(_:)"}}}