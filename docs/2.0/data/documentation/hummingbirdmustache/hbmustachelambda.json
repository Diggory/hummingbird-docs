{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback"],"title":"Type Aliases"}],"abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"variants":[{"paths":["\/documentation\/hummingbirdmustache\/hbmustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:19HummingbirdMustache16HBMustacheLambdaV","modules":[{"name":"HummingbirdMustache"}],"role":"symbol","symbolKind":"struct","title":"HBMustacheLambda","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheLambda"}],"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"HBMustacheLambda"}]},"kind":"symbol","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable"],"title":"Rendering"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheLambda"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though","type":"text"},{"text":" ","type":"text"},{"text":"as they are passed a template representing the contained text and not the raw text","type":"text"},{"text":" ","type":"text"},{"text":"e.g","type":"text"}],"type":"paragraph"},{"code":["struct Object {","    let name: String","    let wrapped: HBMustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheTransformable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheTransformable"}],"navigatorTitle":[{"kind":"identifier","text":"HBMustacheTransformable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"url":"\/documentation\/hummingbirdmustache\/hbmustachetransformable","type":"topic","title":"HBMustacheTransformable","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"url":"\/documentation\/hummingbirdmustache","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","title":"HummingbirdMustache","type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/Callback":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback","type":"topic","abstract":[{"type":"text","text":"lambda callback"}],"navigatorTitle":[{"text":"Callback","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/callback","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"title":"HBMustacheLambda.Callback","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/init(_:)":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)","type":"topic","abstract":[{"type":"text","text":"Initialize "},{"type":"codeVoice","code":"HBMustacheLambda"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Callback","kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdMustache16HBMustacheLambdaV8Callbacka"},{"text":")","kind":"text"}],"title":"init(_:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheLambda"}],"navigatorTitle":[{"kind":"identifier","text":"HBMustacheLambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda","type":"topic","title":"HBMustacheLambda","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheParent":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheParent"}],"navigatorTitle":[{"kind":"identifier","text":"HBMustacheParent"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"url":"\/documentation\/hummingbirdmustache\/hbmustacheparent","type":"topic","title":"HBMustacheParent","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheCustomRenderable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheCustomRenderable"}],"navigatorTitle":[{"kind":"identifier","text":"HBMustacheCustomRenderable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecustomrenderable","type":"topic","title":"HBMustacheCustomRenderable","kind":"symbol","role":"symbol"}}}