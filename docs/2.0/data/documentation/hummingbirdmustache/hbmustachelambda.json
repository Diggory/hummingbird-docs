{"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheLambda"}]}]},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["struct Object {","    let name: String","    let wrapped: HBMustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)"],"title":"Initializers"},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable"]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdmustache\/hbmustachelambda"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"kind":"symbol","metadata":{"roleHeading":"Structure","role":"symbol","modules":[{"name":"HummingbirdMustache"}],"symbolKind":"struct","navigatorTitle":[{"text":"HBMustacheLambda","kind":"identifier"}],"title":"HBMustacheLambda","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"externalID":"s:19HummingbirdMustache16HBMustacheLambdaV"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheTransformable":{"kind":"symbol","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable","navigatorTitle":[{"kind":"identifier","text":"HBMustacheTransformable"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachetransformable","type":"topic","title":"HBMustacheTransformable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheTransformable"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/init(_:)":{"role":"symbol","title":"init(_:)","abstract":[{"type":"text","text":"Initialize "},{"code":"HBMustacheLambda","type":"codeVoice"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/init(_:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Callback","preciseIdentifier":"s:19HummingbirdMustache16HBMustacheLambdaV8Callbacka","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"title":"HBMustacheLambda","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdmustache\/hbmustachelambda","navigatorTitle":[{"kind":"identifier","text":"HBMustacheLambda"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/Callback":{"abstract":[{"text":"lambda callback","type":"text"}],"navigatorTitle":[{"text":"Callback","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/callback","title":"HBMustacheLambda.Callback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheCustomRenderable":{"abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheCustomRenderable","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecustomrenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","navigatorTitle":[{"text":"HBMustacheCustomRenderable","kind":"identifier"}],"title":"HBMustacheCustomRenderable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"kind":"symbol","abstract":[{"text":"Mustache template engine.","type":"text"}],"role":"collection","url":"\/documentation\/hummingbirdmustache","title":"HummingbirdMustache","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheParent":{"abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheParent","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustacheparent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","navigatorTitle":[{"text":"HBMustacheParent","kind":"identifier"}],"title":"HBMustacheParent","kind":"symbol"}}}