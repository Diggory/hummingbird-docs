{"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"role":"symbol","navigatorTitle":[{"text":"HBMustacheLambda","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:19HummingbirdMustache16HBMustacheLambdaV","symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"modules":[{"name":"HummingbirdMustache"}],"title":"HBMustacheLambda"},"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}]},{"type":"codeListing","syntax":null,"code":["struct Object {","    let name: String","    let wrapped: HBMustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdmustache\/hbmustachelambda"]}],"seeAlsoSections":[{"title":"Rendering","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda"},"kind":"symbol","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/Callback":{"title":"HBMustacheLambda.Callback","role":"symbol","url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/callback","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Callback","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback","abstract":[{"text":"lambda callback","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheTransformable":{"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdmustache\/hbmustachetransformable","role":"symbol","title":"HBMustacheTransformable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheTransformable","kind":"identifier"}],"navigatorTitle":[{"text":"HBMustacheTransformable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda":{"abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdmustache\/hbmustachelambda","role":"symbol","title":"HBMustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"navigatorTitle":[{"text":"HBMustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheCustomRenderable":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBMustacheCustomRenderable","kind":"identifier"}],"title":"HBMustacheCustomRenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecustomrenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheCustomRenderable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/init(_:)":{"title":"init(_:)","role":"symbol","url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:19HummingbirdMustache16HBMustacheLambdaV8Callbacka","text":"Callback","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)","abstract":[{"text":"Initialize ","type":"text"},{"type":"codeVoice","code":"HBMustacheLambda"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheParent":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBMustacheParent","kind":"identifier"}],"title":"HBMustacheParent","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"url":"\/documentation\/hummingbirdmustache\/hbmustacheparent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheParent","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"title":"HummingbirdMustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","role":"collection","abstract":[{"type":"text","text":"Mustache template engine."}],"url":"\/documentation\/hummingbirdmustache","type":"topic","kind":"symbol"}}}