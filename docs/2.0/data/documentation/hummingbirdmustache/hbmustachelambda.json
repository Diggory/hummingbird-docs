{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback"],"title":"Type Aliases"}],"metadata":{"role":"symbol","externalID":"s:19HummingbirdMustache16HBMustacheLambdaV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"symbolKind":"struct","navigatorTitle":[{"text":"HBMustacheLambda","kind":"identifier"}],"modules":[{"name":"HummingbirdMustache"}],"title":"HBMustacheLambda","roleHeading":"Structure"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable"],"generated":true,"title":"Rendering"}],"kind":"symbol","variants":[{"paths":["\/documentation\/hummingbirdmustache\/hbmustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}]},{"code":["struct Object {","    let name: String","    let wrapped: HBMustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"type":"codeListing","syntax":null}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"url":"\/documentation\/hummingbirdmustache","abstract":[{"type":"text","text":"Mustache template engine."}],"kind":"symbol","role":"collection","type":"topic","title":"HummingbirdMustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheParent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheParent","navigatorTitle":[{"text":"HBMustacheParent","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdmustache\/hbmustacheparent","kind":"symbol","abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"title":"HBMustacheParent","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheParent","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/init(_:)":{"title":"init(_:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Callback","preciseIdentifier":"s:19HummingbirdMustache16HBMustacheLambdaV8Callbacka","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/init(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/init(_:)","abstract":[{"text":"Initialize ","type":"text"},{"type":"codeVoice","code":"HBMustacheLambda"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda/Callback":{"title":"HBMustacheLambda.Callback","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda\/callback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda\/Callback","abstract":[{"text":"lambda callback","type":"text"}],"navigatorTitle":[{"text":"Callback","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheCustomRenderable":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheCustomRenderable","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HBMustacheCustomRenderable","kind":"identifier"}],"abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachecustomrenderable","title":"HBMustacheCustomRenderable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMustacheCustomRenderable"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheLambda":{"title":"HBMustacheLambda","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheLambda","kind":"identifier"}],"url":"\/documentation\/hummingbirdmustache\/hbmustachelambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheLambda","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"navigatorTitle":[{"text":"HBMustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache/HBMustacheTransformable":{"navigatorTitle":[{"text":"HBMustacheTransformable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache\/HBMustacheTransformable","url":"\/documentation\/hummingbirdmustache\/hbmustachetransformable","kind":"symbol","role":"symbol","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"title":"HBMustacheTransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMustacheTransformable","kind":"identifier"}],"type":"topic"}}}