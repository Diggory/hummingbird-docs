{"topicSections":[{"title":"Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections"]},{"title":"HTTP Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler"]},{"title":"Request","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody"]},{"title":"Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter"]},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore"},"variants":[{"paths":["\/documentation\/hummingbirdcore"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"metadata":{"role":"collection","modules":[{"name":"HummingbirdCore"}],"roleHeading":"Framework","title":"HummingbirdCore","externalID":"HummingbirdCore","symbolKind":"module","images":[{"type":"icon","identifier":"logo.png"}]},"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"HummingbirdCore contains a Swift NIO based server. The server is setup with a type conforming ","type":"text"},{"type":"codeVoice","code":"ChannelSetup"},{"text":" which defines how the server responds. It has two functions ","type":"text"},{"code":"initialize","type":"codeVoice"},{"type":"text","text":" defines how to setup a server channel ie should it be HTTP1, should it include TLS etc and "},{"code":"handle","type":"codeVoice"},{"type":"text","text":" defines how we should respond to individual messages. For example the following is an HTTP1 server that always returns a response containing the word “Hello” in the body."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let server = Server(","    childChannelSetup: HTTP1Channel { _, context in","        let responseBody = channel.allocator.buffer(string: \"Hello\")","        return Response(status: .ok, body: .init(byteBuffer: responseBody))","    },","    configuration: .init(address: .hostname(port: 8080)),","    eventLoopGroup: eventLoopGroup,","    logger: Logger(label: \"HelloServer\")",")"]},{"inlineContent":[{"type":"text","text":"Hummingbird makes use of "},{"type":"reference","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true},{"type":"text","text":" to manage startup and shutdown. "},{"type":"codeVoice","code":"Server"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" protocol required by Swift Service Lifecycle. The following will start the above server and ensure it shuts down gracefully on a shutdown signal."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]}]}],"kind":"symbol","seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlatDictionary","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/flatdictionary","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary","abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"text":"value pairs, plus an array of hash keys for lookup for storage.","type":"text"}],"kind":"symbol","title":"FlatDictionary","navigatorTitle":[{"text":"FlatDictionary","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannelValue":{"url":"\/documentation\/hummingbirdcore\/serverchildchannelvalue","navigatorTitle":[{"kind":"identifier","text":"ServerChildChannelValue"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerChildChannelValue"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","abstract":[{"type":"text","text":"Protocol for typed server child channel"}],"title":"ServerChildChannelValue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"url":"\/documentation\/hummingbirdtls","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","role":"collection","title":"HummingbirdTLS","abstract":[{"text":"Add TLS support to Hummingbird server.","type":"text"}],"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"url":"\/documentation\/hummingbirdcore\/response","navigatorTitle":[{"text":"Response","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","role":"symbol","title":"Response","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Response","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore","type":"topic","url":"\/documentation\/hummingbirdcore","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPUserEventHandler":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler","abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPUserEventHandler","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore\/httpusereventhandler","navigatorTitle":[{"text":"HTTPUserEventHandler","kind":"identifier"}],"type":"topic","title":"HTTPUserEventHandler","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/RequestBody":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestBody"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/requestbody","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody","abstract":[{"type":"text","text":"Request Body"}],"kind":"symbol","title":"RequestBody","navigatorTitle":[{"kind":"identifier","text":"RequestBody"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBuilder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","abstract":[{"type":"text","text":"Build server that takes an HTTP responder"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTPServerBuilder"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore\/httpserverbuilder","navigatorTitle":[{"text":"HTTPServerBuilder","kind":"identifier"}],"type":"topic","title":"HTTPServerBuilder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"abstract":[{"text":"Channel Handler that controls whether we should accept new connections","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"navigatorTitle":[{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"kind":"symbol","title":"AvailableConnectionsChannelHandler","role":"symbol"},"logo.png":{"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsDelegate":{"navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsDelegate"}],"type":"topic","abstract":[{"text":"Delegate for ","type":"text"},{"type":"codeVoice","code":"AvailableConnectionsChannelHandler"},{"text":" that defines if we should accept","type":"text"}],"url":"\/documentation\/hummingbirdcore\/availableconnectionsdelegate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AvailableConnectionsDelegate"}],"title":"AvailableConnectionsDelegate","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseWriter":{"abstract":[{"type":"text","text":"ResponseWriter that writes directly to AsyncChannel"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/hummingbirdcore\/responsewriter","navigatorTitle":[{"kind":"identifier","text":"ResponseWriter"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseWriter"}],"title":"ResponseWriter"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"url":"\/documentation\/hummingbirdcore\/responsebodywriter","navigatorTitle":[{"text":"ResponseBodyWriter","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","role":"symbol","title":"ResponseBodyWriter","abstract":[{"type":"text","text":"HTTP Response Body part writer"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBodyWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannel":{"abstract":[{"type":"text","text":"Generic server child channel setup protocol"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","title":"ServerChildChannel","type":"topic","url":"\/documentation\/hummingbirdcore\/serverchildchannel","navigatorTitle":[{"kind":"identifier","text":"ServerChildChannel"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerChildChannel"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"url":"\/documentation\/hummingbirdcore\/request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","title":"Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1Channel":{"url":"\/documentation\/hummingbirdcore\/http1channel","navigatorTitle":[{"kind":"identifier","text":"HTTP1Channel"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HTTP1Channel","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","abstract":[{"type":"text","text":"Child channel for processing HTTP1"}],"title":"HTTP1Channel"},"https://github.com/swift-server/swift-service-lifecycle":{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","titleInlineContent":[{"type":"text","text":"Swift Service Lifecycle"}],"title":"Swift Service Lifecycle","type":"link","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPChannelHandler":{"kind":"symbol","type":"topic","navigatorTitle":[{"text":"HTTPChannelHandler","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTPChannelHandler"}],"abstract":[{"type":"text","text":"Protocol for HTTP channels"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","url":"\/documentation\/hummingbirdcore\/httpchannelhandler","title":"HTTPChannelHandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerConfiguration":{"abstract":[{"type":"text","text":"HTTP server configuration"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","title":"ServerConfiguration","type":"topic","url":"\/documentation\/hummingbirdcore\/serverconfiguration","navigatorTitle":[{"kind":"identifier","text":"ServerConfiguration"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerConfiguration"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/URI":{"url":"\/documentation\/hummingbirdcore\/uri","navigatorTitle":[{"kind":"identifier","text":"URI"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","role":"symbol","title":"URI","abstract":[{"type":"text","text":"Simple URL parser"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"URI","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/BindAddress":{"abstract":[{"text":"Address to bind server to","type":"text"}],"title":"BindAddress","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindAddress","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/bindaddress","navigatorTitle":[{"text":"BindAddress","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Server":{"abstract":[{"type":"text","text":"HTTP server class"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","title":"Server","type":"topic","url":"\/documentation\/hummingbirdcore\/server","navigatorTitle":[{"kind":"identifier","text":"Server"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Server"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"url":"\/documentation\/hummingbirdhttp2","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","role":"collection","title":"HummingbirdHTTP2","abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server."}],"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/MaximumAvailableConnections":{"title":"MaximumAvailableConnections","role":"symbol","abstract":[{"type":"text","text":"Implementation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate"},{"type":"text","text":" that sets a maximum limit to the number"},{"type":"text","text":" "},{"type":"text","text":"of open connections"}],"navigatorTitle":[{"kind":"identifier","text":"MaximumAvailableConnections"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MaximumAvailableConnections"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections","url":"\/documentation\/hummingbirdcore\/maximumavailableconnections"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"url":"\/documentation\/hummingbirdcore\/responsebody","navigatorTitle":[{"kind":"identifier","text":"ResponseBody"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseBody"}],"role":"symbol","type":"topic","title":"ResponseBody","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","abstract":[{"text":"Response body","type":"text"}],"kind":"symbol"}}}