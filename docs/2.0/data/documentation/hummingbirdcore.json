{"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"externalID":"HummingbirdCore","role":"collection","roleHeading":"Framework","modules":[{"name":"HummingbirdCore"}],"title":"HummingbirdCore","images":[{"type":"icon","identifier":"logo.png"}],"symbolKind":"module"},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections"],"anchor":"Server","title":"Server"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler"],"title":"HTTP Server","anchor":"HTTP-Server"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody"],"title":"Request","anchor":"Request"},{"anchor":"Response","title":"Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter"]},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary"],"anchor":"Miscellaneous"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"],"anchor":"Related-Documentation","title":"Related Documentation"}],"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcore"]}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdCore contains a Swift NIO based server. The server is setup with a type conforming "},{"type":"codeVoice","code":"ChannelSetup"},{"text":" which defines how the server responds. It has two functions ","type":"text"},{"code":"initialize","type":"codeVoice"},{"type":"text","text":" defines how to setup a server channel ie should it be HTTP1, should it include TLS etc and "},{"code":"handle","type":"codeVoice"},{"type":"text","text":" defines how we should respond to individual messages. For example the following is an HTTP1 server that always returns a response containing the word “Hello” in the body."}]},{"code":["let server = Server(","    childChannelSetup: HTTP1Channel { _, context in","        let responseBody = channel.allocator.buffer(string: \"Hello\")","        return Response(status: .ok, body: .init(byteBuffer: responseBody))","    },","    configuration: .init(address: .hostname(port: 8080)),","    eventLoopGroup: eventLoopGroup,","    logger: Logger(label: \"HelloServer\")",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Hummingbird makes use of ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference"},{"type":"text","text":" to manage startup and shutdown. "},{"type":"codeVoice","code":"Server"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" protocol required by Swift Service Lifecycle. The following will start the above server and ensure it shuts down gracefully on a shutdown signal."}],"type":"paragraph"},{"code":["let serviceGroup = ServiceGroup(","    services: [server],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift","type":"codeListing"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Server":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Server","kind":"identifier"}],"navigatorTitle":[{"text":"Server","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/server","kind":"symbol","type":"topic","title":"Server","abstract":[{"text":"HTTP server class","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannel":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","abstract":[{"text":"Generic server child channel setup protocol","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore\/serverchildchannel","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServerChildChannel","kind":"identifier"}],"title":"ServerChildChannel","role":"symbol","navigatorTitle":[{"text":"ServerChildChannel","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2","role":"collection","title":"HummingbirdHTTP2","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/BindAddress":{"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindAddress","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/bindaddress","navigatorTitle":[{"text":"BindAddress","kind":"identifier"}],"type":"topic","title":"BindAddress","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","abstract":[{"type":"text","text":"Address to bind server to"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsDelegate":{"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AvailableConnectionsDelegate"}],"type":"topic","abstract":[{"type":"text","text":"Delegate for "},{"code":"AvailableConnectionsChannelHandler","type":"codeVoice"},{"text":" that defines if we should accept","type":"text"}],"title":"AvailableConnectionsDelegate","navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsDelegate"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","url":"\/documentation\/hummingbirdcore\/availableconnectionsdelegate"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPUserEventHandler":{"abstract":[],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTPUserEventHandler"}],"title":"HTTPUserEventHandler","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler","navigatorTitle":[{"kind":"identifier","text":"HTTPUserEventHandler"}],"url":"\/documentation\/hummingbirdcore\/httpusereventhandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"HTTP Response Body part writer"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseBodyWriter"}],"url":"\/documentation\/hummingbirdcore\/responsebodywriter","title":"ResponseBodyWriter","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ResponseBodyWriter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1Channel":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP1Channel"}],"title":"HTTP1Channel","type":"topic","kind":"symbol","abstract":[{"text":"Child channel for processing HTTP1","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTP1Channel"}],"url":"\/documentation\/hummingbirdcore\/http1channel"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPChannelHandler":{"url":"\/documentation\/hummingbirdcore\/httpchannelhandler","abstract":[{"type":"text","text":"Protocol for HTTP channels"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HTTPChannelHandler","kind":"identifier"}],"title":"HTTPChannelHandler","navigatorTitle":[{"text":"HTTPChannelHandler","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerConfiguration":{"title":"ServerConfiguration","abstract":[{"text":"HTTP server configuration","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ServerConfiguration"}],"navigatorTitle":[{"text":"ServerConfiguration","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/serverconfiguration"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird","title":"Hummingbird","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"role":"collection","url":"\/documentation\/hummingbirdcore","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Response","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","title":"Response","navigatorTitle":[{"text":"Response","kind":"identifier"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBody","kind":"identifier"}],"title":"ResponseBody","abstract":[{"type":"text","text":"Response body"}],"navigatorTitle":[{"text":"ResponseBody","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/responsebody","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBuilder":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTPServerBuilder"}],"url":"\/documentation\/hummingbirdcore\/httpserverbuilder","role":"symbol","navigatorTitle":[{"text":"HTTPServerBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"Build server that takes an HTTP responder"}],"type":"topic","title":"HTTPServerBuilder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"title":"HummingbirdTLS","abstract":[{"type":"text","text":"Add TLS support to Hummingbird server."}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdtls"},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary":{"url":"\/documentation\/hummingbirdcore\/flatdictionary","abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value pairs, plus an array of hash keys for lookup for storage."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlatDictionary"}],"title":"FlatDictionary","navigatorTitle":[{"text":"FlatDictionary","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseWriter":{"type":"topic","abstract":[{"text":"ResponseWriter that writes directly to AsyncChannel","type":"text"}],"title":"ResponseWriter","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","kind":"symbol","url":"\/documentation\/hummingbirdcore\/responsewriter","navigatorTitle":[{"kind":"identifier","text":"ResponseWriter"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/URI":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Simple URL parser"}],"role":"symbol","navigatorTitle":[{"text":"URI","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/uri","title":"URI","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"URI","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/RequestBody":{"url":"\/documentation\/hummingbirdcore\/requestbody","abstract":[{"text":"Request Body","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestBody"}],"title":"RequestBody","navigatorTitle":[{"text":"RequestBody","kind":"identifier"}],"role":"symbol"},"https://github.com/swift-server/swift-service-lifecycle":{"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"Swift Service Lifecycle","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannelValue":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ServerChildChannelValue","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","url":"\/documentation\/hummingbirdcore\/serverchildchannelvalue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ServerChildChannelValue"}],"title":"ServerChildChannelValue","abstract":[{"text":"Protocol for typed server child channel","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Request"}],"url":"\/documentation\/hummingbirdcore\/request","title":"Request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"type":"topic","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","abstract":[{"type":"text","text":"Channel Handler that controls whether we should accept new connections"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"title":"AvailableConnectionsChannelHandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/MaximumAvailableConnections":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections","kind":"symbol","title":"MaximumAvailableConnections","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MaximumAvailableConnections"}],"type":"topic","role":"symbol","abstract":[{"text":"Implementation of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","isActive":true,"type":"reference"},{"type":"text","text":" that sets a maximum limit to the number"},{"type":"text","text":" "},{"type":"text","text":"of open connections"}],"url":"\/documentation\/hummingbirdcore\/maximumavailableconnections","navigatorTitle":[{"kind":"identifier","text":"MaximumAvailableConnections"}]}}}