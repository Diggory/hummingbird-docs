{"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Integrates with the Hummingbird test framework "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["let router = Router(context: BasicWebSocketRequestContext.self)","router.ws(\"\/ws\") { _, outbound, _ in","    try await outbound.write(.text(\"Hello\"))","}","let application = Application(","    router: router,","    server: .http1WebSocketUpgrade(webSocketRouter: router)",")","_ = try await application.test(.live) { client in","    try await client.ws(\"\/ws\") { inbound, _, _ in","        var inboundIterator = inbound.messages(maxSize: .max).makeAsyncIterator()","        let msg = try await inboundIterator.next()","        XCTAssertEqual(msg, .text(\"Hello\"))","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"WebSocket testing requires a live server so it only works with the "},{"type":"codeVoice","code":".live"},{"type":"text","text":" and "},{"code":".ahc","type":"codeVoice"},{"type":"text","text":" test frameworks."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"metadata":{"symbolKind":"module","title":"HummingbirdWSTesting","modules":[{"name":"HummingbirdWSTesting"}],"externalID":"HummingbirdWSTesting","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Framework","role":"collection"},"abstract":[{"text":"Testing framework for WebSockets","type":"text"}],"hierarchy":{"paths":[[]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol\/ws(_:configuration:logger:handler:)"],"anchor":"Testing","title":"Testing"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdwstesting"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSTesting","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWSTesting":{"kind":"symbol","url":"\/documentation\/hummingbirdwstesting","type":"topic","title":"HummingbirdWSTesting","abstract":[{"text":"Testing framework for WebSockets","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSTesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol/ws(_:configuration:logger:handler:)":{"role":"symbol","title":"ws(_:configuration:logger:handler:)","url":"\/documentation\/hummingbirdtesting\/testclientprotocol\/ws(_:configuration:logger:handler:)","abstract":[{"text":"Test WebSocket endpoint","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ws","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"configuration","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"WebSocketClientConfiguration","preciseIdentifier":"s:8WSClient28WebSocketClientConfigurationV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"logger"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"handler","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:6WSCore20WebSocketDataHandlera","kind":"typeIdentifier","text":"WebSocketDataHandler"},{"text":"<","kind":"text"},{"text":"WebSocketClient","kind":"typeIdentifier","preciseIdentifier":"s:8WSClient15WebSocketClientV"},{"text":".","kind":"text"},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:8WSClient15WebSocketClientV7ContextV"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"WebSocketCloseFrame","preciseIdentifier":"s:6WSCore19WebSocketCloseFrameV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol\/ws(_:configuration:logger:handler:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"url":"\/documentation\/hummingbirdwebsocket","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"kind":"symbol","title":"HummingbirdWebSocket","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","title":"Hummingbird","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"abstract":[{"text":"Support for connecting to WebSocket server.","type":"text"}],"url":"\/documentation\/wsclient","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","type":"topic","kind":"symbol","title":"WSClient","role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","title":"HummingbirdTesting","type":"topic","url":"\/documentation\/hummingbirdtesting","abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}]}}}