{"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"modules":[{"name":"HummingbirdAuth"}],"role":"collectionGroup","title":"Authenticators"},"abstract":[{"type":"text","text":"Request authentication middleware"}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator"},{"type":"text","text":". This requires you implement the function "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri"},{"type":"text","text":" that returns a value conforming to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To use an authenticator it is required that your request context conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"reference","isActive":true},{"text":". When you return valid authentication data from your ","type":"text"},{"code":"authenticate","type":"codeVoice"},{"text":" function it is recorded in the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth","type":"reference","isActive":true},{"text":" member of your request context.","type":"text"}]},{"level":2,"text":"Usage","anchor":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct, otherwise it returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate<Context: HBAuthRequestContextProtocol>(request: HBRequest, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await context.threadPool.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"context.auth.get"},{"text":".","type":"text"}]},{"syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},{"type":"text","text":" after your authentication middleware"}]},{"syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or you can use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}]}],"kind":"content"}],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"]}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","role":"collectionGroup","url":"\/documentation\/hummingbird\/onetimepasswords","abstract":[{"type":"text","text":"A one time password (OTP) valid for only one login session."}],"title":"One Time Passwords"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol/auth":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"auth","kind":"identifier"},{"text":": ","kind":"text"},{"text":"HBLoginCache","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","title":"auth","abstract":[{"type":"text","text":"Login cache"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth","required":true,"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol\/auth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"type":"topic","abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"title":"HBAuthenticator","url":"\/documentation\/hummingbirdauth\/hbauthenticator","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBAuthenticator"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBAuthenticator"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBLoginCache/require(_:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)","title":"require(_:)","url":"\/documentation\/hummingbirdauth\/hblogincache\/require(_:)","type":"topic","abstract":[{"text":"Require authenticated type","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"require"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Auth"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp","text":"Auth"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp","text":"Auth"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"title":"HBAuthenticatable","type":"topic","navigatorTitle":[{"text":"HBAuthenticatable","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticatable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HBAuthenticatable","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for objects that can be returned by an "},{"type":"codeVoice","code":"HBAuthenticator"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator/authenticate(request:context:)-5xiri":{"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdauth\/hbauthenticator\/authenticate(request:context:)-5xiri","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri","defaultImplementations":1,"abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"type":"topic","title":"authenticate(request:context:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"authenticate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HBRequest","preciseIdentifier":"s:15HummingbirdCore9HBRequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","text":"Context","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdAuth15HBAuthenticatorP5ValueQa","text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","kind":"symbol","abstract":[{"text":"Middleware returning 404 for unauthenticated requests","type":"text"}],"title":"IsAuthenticatedMiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection","url":"\/documentation\/hummingbirdauth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"topic","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"kind":"symbol","title":"HBAuthRequestContextProtocol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","title":"Sessions","url":"\/documentation\/hummingbird\/sessions","type":"topic","abstract":[{"type":"text","text":"Session based authentication"}],"role":"collectionGroup"}}}