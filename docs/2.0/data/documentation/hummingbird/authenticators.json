{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Request authentication middleware"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","isActive":true,"type":"reference"},{"text":". This requires you implement the function ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri","isActive":true,"type":"reference"},{"text":" that returns a value conforming to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To use an authenticator it is required that your request context conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"reference","isActive":true},{"text":". When you return valid authentication data from your ","type":"text"},{"code":"authenticate","type":"codeVoice"},{"text":" function it is recorded in the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth","type":"reference","isActive":true},{"text":" member of your request context.","type":"text"}],"type":"paragraph"},{"text":"Usage","level":2,"anchor":"Usage","type":"heading"},{"inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct, otherwise it returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate<Context: HBAuthRequestContextProtocol>(request: HBRequest, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await context.threadPool.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())"],"type":"codeListing"},{"inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"context.auth.get"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"],"type":"codeListing"},{"inlineContent":[{"text":"You can require that that authentication was successful and authentication data is available by either adding the middleware ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"reference","isActive":true},{"text":" after your authentication middleware","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"],"type":"codeListing"},{"inlineContent":[{"text":"Or you can use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}],"type":"paragraph"}]}],"metadata":{"title":"Authenticators","role":"collectionGroup","modules":[{"name":"HummingbirdAuth"}]},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"type":"topic","title":"One Time Passwords","url":"\/documentation\/hummingbird\/onetimepasswords","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","role":"collectionGroup","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","abstract":[{"type":"text","text":"Session based authentication"}],"title":"Sessions","type":"topic","url":"\/documentation\/hummingbird\/sessions","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","title":"IsAuthenticatedMiddleware","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"title":"HBAuthRequestContextProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"kind":"symbol","title":"HBAuthenticatable","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBAuthenticatable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticatable"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticatable","abstract":[{"text":"Protocol for objects that can be returned by an ","type":"text"},{"type":"codeVoice","code":"HBAuthenticator"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBLoginCache/require(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"require"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Auth"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp","text":"Auth"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp","text":"Auth"}],"kind":"symbol","abstract":[{"type":"text","text":"Require authenticated type"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdauth\/hblogincache\/require(_:)","title":"require(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator/authenticate(request:context:)-5xiri":{"kind":"symbol","defaultImplementations":1,"title":"authenticate(request:context:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"authenticate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBRequest","preciseIdentifier":"s:15HummingbirdCore9HBRequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdAuth15HBAuthenticatorP5ValueQa","text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticator\/authenticate(request:context:)-5xiri","abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"navigatorTitle":[{"text":"HBAuthenticator","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticator","abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"title":"HBAuthenticator","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthenticator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","kind":"article","type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol/auth":{"kind":"symbol","title":"auth","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"auth","kind":"identifier"},{"text":": ","kind":"text"},{"text":"HBLoginCache","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol\/auth","abstract":[{"text":"Login cache","type":"text"}],"required":true}}}