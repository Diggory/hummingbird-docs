{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators"},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true,"title":"Articles"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"],"title":"Reference"}],"metadata":{"modules":[{"name":"HummingbirdAuth"}],"title":"Authenticators","role":"collectionGroup"},"kind":"article","abstract":[{"text":"Request authentication middleware","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator"},{"type":"text","text":". This requires you implement the function "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri"},{"type":"text","text":" that returns a value conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},{"type":"text","text":". When you return valid authentication data from your "},{"type":"codeVoice","code":"authenticate"},{"type":"text","text":" function it is recorded in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth"},{"type":"text","text":" member of your request context."}],"type":"paragraph"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct, otherwise it returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate<Context: HBAuthRequestContextProtocol>(request: HBRequest, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}],"type":"paragraph"},{"code":["router.middlewares.add(BasicAuthenticator())"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then in your request handler you can access your authentication data with "},{"code":"context.auth.get","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},{"type":"text","text":" after your authentication middleware"}],"type":"paragraph"},{"code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Or you can use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)","type":"reference"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"type":"topic","url":"\/documentation\/hummingbird\/sessions","abstract":[{"text":"Session based authentication","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","kind":"article","title":"Sessions"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBLoginCache/require(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)","role":"symbol","url":"\/documentation\/hummingbirdauth\/hblogincache\/require(_:)","kind":"symbol","type":"topic","title":"require(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"require","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Auth","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Auth","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Auth","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp"}],"abstract":[{"text":"Require authenticated type","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","url":"\/documentation\/hummingbird\/onetimepasswords","title":"One Time Passwords","abstract":[{"type":"text","text":"A one time password (OTP) valid for only one login session."}],"type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol/auth":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"auth","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV","text":"HBLoginCache","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol\/auth","required":true,"title":"auth","abstract":[{"type":"text","text":"Login cache"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"type":"topic","title":"HBAuthRequestContextProtocol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator/authenticate(request:context:)-5xiri":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri","role":"symbol","abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"kind":"symbol","title":"authenticate(request:context:)","defaultImplementations":1,"url":"\/documentation\/hummingbirdauth\/hbauthenticator\/authenticate(request:context:)-5xiri","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"authenticate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HBRequest","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore9HBRequestV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","preciseIdentifier":"s:15HummingbirdAuth15HBAuthenticatorP5ValueQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"url":"\/documentation\/hummingbirdauth\/hbauthenticatable","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","role":"symbol","abstract":[{"type":"text","text":"Protocol for objects that can be returned by an "},{"type":"codeVoice","code":"HBAuthenticator"},{"type":"text","text":"."}],"title":"HBAuthenticatable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticatable"}],"navigatorTitle":[{"kind":"identifier","text":"HBAuthenticatable"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"title":"IsAuthenticatedMiddleware","type":"topic","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"type":"topic","abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthenticator","kind":"identifier"}],"title":"HBAuthenticator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdauth\/hbauthenticator","navigatorTitle":[{"text":"HBAuthenticator","kind":"identifier"}]}}}