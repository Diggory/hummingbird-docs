{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"]]},"kind":"article","abstract":[{"text":"Request authentication middleware","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"],"title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true,"title":"Articles"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"HummingbirdAuth"}],"title":"Authenticators","roleHeading":"Article","role":"article"},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","isActive":true,"type":"reference"},{"type":"text","text":". This requires you implement the function "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri","isActive":true,"type":"reference"},{"type":"text","text":" that returns a value conforming to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},{"type":"text","text":". When you return valid authentication data from your "},{"type":"codeVoice","code":"authenticate"},{"type":"text","text":" function it is recorded in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth"},{"type":"text","text":" member of your request context."}]},{"type":"heading","level":2,"anchor":"Usage","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct, otherwise it returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate<Context: HBAuthRequestContextProtocol>(request: HBRequest, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await context.threadPool.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["router.middlewares.add(BasicAuthenticator())"]},{"type":"paragraph","inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"code":"context.auth.get","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"]},{"type":"paragraph","inlineContent":[{"text":"You can require that that authentication was successful and authentication data is available by either adding the middleware ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","isActive":true,"type":"reference"},{"text":" after your authentication middleware","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"]},{"type":"paragraph","inlineContent":[{"text":"Or you can use ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)","isActive":true,"type":"reference"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"abstract":[{"text":"Protocol for objects that can be returned by an ","type":"text"},{"type":"codeVoice","code":"HBAuthenticator"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBAuthenticatable"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticatable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticatable"}],"kind":"symbol","title":"HBAuthenticatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"kind":"symbol","role":"symbol","title":"IsAuthenticatedMiddleware","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthenticator","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware to check if a request is authenticated and then augment the request with"},{"type":"text","text":" "},{"type":"text","text":"authentication data."}],"kind":"symbol","role":"symbol","title":"HBAuthenticator","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","url":"\/documentation\/hummingbirdauth\/hbauthenticator","navigatorTitle":[{"text":"HBAuthenticator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBLoginCache/require(_:)":{"role":"symbol","kind":"symbol","title":"require(_:)","url":"\/documentation\/hummingbirdauth\/hblogincache\/require(_:)","type":"topic","abstract":[{"text":"Require authenticated type","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"require","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Auth"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp","text":"Auth"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV7requireyxxmKAA17HBAuthenticatableRzlF0B0L_xmfp","text":"Auth"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBLoginCache\/require(_:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"title":"HBAuthRequestContextProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","role":"symbol","navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth","url":"\/documentation\/hummingbirdauth","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol/auth":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"auth"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdAuth12HBLoginCacheV","kind":"typeIdentifier","text":"HBLoginCache"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol\/auth","abstract":[{"type":"text","text":"Login cache"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol\/auth","required":true,"role":"symbol","title":"auth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator/authenticate(request:context:)-5xiri":{"url":"\/documentation\/hummingbirdauth\/hbauthenticator\/authenticate(request:context:)-5xiri","role":"symbol","abstract":[{"type":"text","text":"Called by middleware to see if request is authenticated."}],"title":"authenticate(request:context:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator\/authenticate(request:context:)-5xiri","kind":"symbol","defaultImplementations":1,"required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"authenticate"},{"kind":"text","text":"("},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore9HBRequestV","kind":"typeIdentifier","text":"HBRequest"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","kind":"typeIdentifier","text":"Context"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdAuth15HBAuthenticatorP5ValueQa","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"title":"One Time Passwords","url":"\/documentation\/hummingbird\/onetimepasswords","kind":"article","role":"article","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"role":"article","abstract":[{"text":"Session based authentication","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","type":"topic","url":"\/documentation\/hummingbird\/sessions","title":"Sessions"}}}