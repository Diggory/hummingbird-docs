{"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DataDecodingStrategy","kind":"identifier"}],"languages":["swift"]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The strategy to use for decoding "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values."}],"variants":[{"paths":["\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}],"symbolKind":"enum","roleHeading":"Enumeration","title":"JSONDecoder.DataDecodingStrategy","externalID":"s:10Foundation11JSONDecoderC20DataDecodingStrategyO","navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"modules":[{"name":"Hummingbird"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"]]},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/base64":{"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"base64"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","abstract":[{"type":"text","text":"Decode the "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" from a Base64-encoded string. This is the default strategy."}],"type":"topic","role":"symbol","title":"JSONDecoder.DataDecodingStrategy.base64","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/base64"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"kind":"symbol","url":"\/documentation\/hummingbird\/jsondecoder","abstract":[{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" facilitates the decoding of JSON into semantic "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" types."}],"title":"JSONDecoder","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"JSONDecoder"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum":{"title":"JSONDecoder.DataDecodingStrategy","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"abstract":[{"type":"text","text":"The strategy to use for decoding "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/custom(_:)":{"title":"JSONDecoder.DataDecodingStrategy.custom(_:)","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/custom(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"custom"},{"kind":"text","text":"((any "},{"preciseIdentifier":"s:s7DecoderP","kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":")"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Decode the "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" as a custom value decoded by the given closure."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/deferredToData":{"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"deferredToData"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData","abstract":[{"type":"text","text":"Defer to "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" for decoding."}],"type":"topic","role":"symbol","title":"JSONDecoder.DataDecodingStrategy.deferredToData","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/deferredtodata"}}}