{"metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"role":"symbol","externalID":"s:10Foundation11JSONDecoderC20DataDecodingStrategyO","title":"JSONDecoder.DataDecodingStrategy","modules":[{"name":"Hummingbird"}],"symbolKind":"enum","roleHeading":"Enumeration"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"]]},"abstract":[{"type":"text","text":"The strategy to use for decoding "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" values."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData"],"title":"Enumeration Cases"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DataDecodingStrategy","kind":"identifier"}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/custom(_:)":{"abstract":[{"type":"text","text":"Decode the "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" as a custom value decoded by the given closure."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)","title":"JSONDecoder.DataDecodingStrategy.custom(_:)","kind":"symbol","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"custom","kind":"identifier"},{"text":"((any ","kind":"text"},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/custom(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","type":"topic","kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/base64":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","role":"symbol","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/base64","type":"topic","title":"JSONDecoder.DataDecodingStrategy.base64","abstract":[{"type":"text","text":"Decode the "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" from a Base64-encoded string. This is the default strategy."}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"base64"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"JSONDecoder"}],"title":"JSONDecoder","type":"topic","abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","url":"\/documentation\/hummingbird\/jsondecoder","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/deferredToData":{"abstract":[{"text":"Defer to ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" for decoding.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/deferredtodata","kind":"symbol","role":"symbol","title":"JSONDecoder.DataDecodingStrategy.deferredToData","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"deferredToData"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum":{"type":"topic","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum","navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}],"abstract":[{"text":"The strategy to use for decoding ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum","role":"symbol","title":"JSONDecoder.DataDecodingStrategy","kind":"symbol"}}}