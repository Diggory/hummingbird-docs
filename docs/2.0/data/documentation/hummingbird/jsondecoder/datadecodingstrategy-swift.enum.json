{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"DataDecodingStrategy","kind":"identifier"}]}]}],"abstract":[{"text":"The strategy to use for decoding ","type":"text"},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values."}],"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData"],"title":"Enumeration Cases"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum"},"metadata":{"externalID":"s:10Foundation11JSONDecoderC20DataDecodingStrategyO","symbolKind":"enum","navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"title":"JSONDecoder.DataDecodingStrategy","modules":[{"name":"Hummingbird"}],"role":"symbol","roleHeading":"Enumeration","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/deferredToData":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"deferredToData","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/deferredtodata","abstract":[{"text":"Defer to ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" for decoding.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"JSONDecoder.DataDecodingStrategy.deferredToData","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DataDecodingStrategy","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum","abstract":[{"text":"The strategy to use for decoding ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"navigatorTitle":[{"text":"DataDecodingStrategy","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","title":"JSONDecoder.DataDecodingStrategy","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/custom(_:)":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"custom","kind":"identifier"},{"text":"((any ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":")"}],"url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/custom(_:)","abstract":[{"text":"Decode the ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" as a custom value decoded by the given closure.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"JSONDecoder.DataDecodingStrategy.custom(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"type":"topic","kind":"symbol","abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" facilitates the decoding of JSON into semantic "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"title":"JSONDecoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/base64":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"base64","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/base64","abstract":[{"text":"Decode the ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" from a Base64-encoded string. This is the default strategy.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"JSONDecoder.DataDecodingStrategy.base64","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64"}}}