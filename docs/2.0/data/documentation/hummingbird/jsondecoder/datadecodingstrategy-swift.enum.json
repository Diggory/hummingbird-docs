{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum"]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData"],"title":"Enumeration Cases"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum","interfaceLanguage":"swift"},"metadata":{"role":"symbol","externalID":"s:10Foundation11JSONDecoderC20DataDecodingStrategyO","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}],"roleHeading":"Enumeration","navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"symbolKind":"enum","modules":[{"name":"Hummingbird"}],"title":"JSONDecoder.DataDecodingStrategy"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"]]},"sections":[],"kind":"symbol","abstract":[{"text":"The strategy to use for decoding ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/deferredToData":{"abstract":[{"text":"Defer to ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" for decoding.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/deferredToData","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"deferredToData","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/deferredtodata","kind":"symbol","title":"JSONDecoder.DataDecodingStrategy.deferredToData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/custom(_:)":{"abstract":[{"text":"Decode the ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" as a custom value decoded by the given closure.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/custom(_:)","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"custom","kind":"identifier"},{"text":"((any ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/custom(_:)","kind":"symbol","title":"JSONDecoder.DataDecodingStrategy.custom(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum","abstract":[{"text":"The strategy to use for decoding ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"kind":"symbol","type":"topic","title":"JSONDecoder.DataDecodingStrategy","navigatorTitle":[{"kind":"identifier","text":"DataDecodingStrategy"}],"url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataDecodingStrategy"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"type":"topic","navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" types.","type":"text"}],"title":"JSONDecoder","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/DataDecodingStrategy-swift.enum/base64":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/DataDecodingStrategy-swift.enum\/base64","abstract":[{"text":"Decode the ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" from a Base64-encoded string. This is the default strategy.","type":"text"}],"kind":"symbol","type":"topic","title":"JSONDecoder.DataDecodingStrategy.base64","url":"\/documentation\/hummingbird\/jsondecoder\/datadecodingstrategy-swift.enum\/base64","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"base64"}]}}}