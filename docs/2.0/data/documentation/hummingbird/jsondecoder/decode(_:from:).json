{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"variants":[{"paths":["\/documentation\/hummingbird\/jsondecoder\/decode(_:from:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"data","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Data","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The type of the value to decode.","type":"text"}],"type":"paragraph"}],"name":"type"},{"content":[{"inlineContent":[{"type":"text","text":"The data to decode from."}],"type":"paragraph"}],"name":"data"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A value of the requested type."}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"name":"Throws","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"DecodingError.dataCorrupted","type":"codeVoice"},{"type":"text","text":" if values requested from the payload are corrupted, or if the given data is not valid JSON."}]}]},{"name":"Throws","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"An error if any value throws an error during decoding."}],"type":"paragraph"}]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/decode(_:from:)"},"metadata":{"role":"symbol","modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Method","externalID":"s:10Foundation11JSONDecoderC6decode_4fromxxm_AA4DataVtKSeRzlF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV","text":"Data"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"symbolKind":"method","title":"decode(_:from:)"},"abstract":[{"text":"Decodes a top-level value of the given type from the given JSON representation.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","type":"topic","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder/decode(_:from:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV","text":"Data"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/hummingbird\/jsondecoder\/decode(_:from:)","abstract":[{"type":"text","text":"Decodes a top-level value of the given type from the given JSON representation."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder\/decode(_:from:)","type":"topic","title":"decode(_:from:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"abstract":[{"code":"JSONDecoder","type":"codeVoice"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" types.","type":"text"}],"navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"title":"JSONDecoder","url":"\/documentation\/hummingbird\/jsondecoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"}}}