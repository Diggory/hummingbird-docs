{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/fileio\/loadfile(path:context:chunklength:)"]}],"abstract":[{"type":"text","text":"Load file and return response body"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO\/loadFile(path:context:chunkLength:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Method","externalID":"s:11Hummingbird6FileIOV04loadB04path7context11chunkLength0A4Core12ResponseBodyVSS_xSitYaKAA14RequestContextRzlF","symbolKind":"method","role":"symbol","title":"loadFile(path:context:chunkLength:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"loadFile"},{"text":"(","kind":"text"},{"text":"path","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkLength"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdCore12ResponseBodyV","text":"ResponseBody","kind":"typeIdentifier"}]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"loadFile"},{"kind":"text","text":"("},{"kind":"externalParam","text":"path"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","kind":"typeIdentifier","text":"RequestContext"},{"text":", ","kind":"text"},{"text":"chunkLength","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":" = NonBlockingFileIO.defaultChunkSize) ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","text":"ResponseBody","preciseIdentifier":"s:15HummingbirdCore12ResponseBodyV","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"System file path"}]}],"name":"path"},{"content":[{"inlineContent":[{"text":"Context this request is being called in","type":"text"}],"type":"paragraph"}],"name":"context"},{"name":"chunkLength","content":[{"inlineContent":[{"type":"text","text":"Size of the chunks read from disk and loaded into memory (in bytes). Defaults to the value suggested by "},{"code":"swift-nio","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"Response body","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Depending on the file size this will return either a response body containing a ByteBuffer or a stream that will provide the"},{"type":"text","text":" "},{"text":"file in chunks.","type":"text"}],"type":"paragraph"}]}],"references":{"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","type":"topic","title":"ResponseBody","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ResponseBody"}],"url":"\/documentation\/hummingbirdcore\/responsebody","abstract":[{"text":"Response body","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"ResponseBody","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileIO":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FileIO","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"FileIO"}],"type":"topic","abstract":[{"text":"Manages File reading and writing.","type":"text"}],"title":"FileIO","url":"\/documentation\/hummingbird\/fileio","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","kind":"article","title":"Hummingbird Documentation","role":"collection","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileIO/loadFile(path:context:chunkLength:)":{"type":"topic","abstract":[{"text":"Load file and return response body","type":"text"}],"title":"loadFile(path:context:chunkLength:)","url":"\/documentation\/hummingbird\/fileio\/loadfile(path:context:chunklength:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO\/loadFile(path:context:chunkLength:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"loadFile","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"path"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkLength","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore12ResponseBodyV","text":"ResponseBody","kind":"typeIdentifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"type":"topic","title":"RequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference"},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","url":"\/documentation\/hummingbird\/requestcontext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"url":"\/documentation\/hummingbirdcore\/request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"topic","kind":"symbol","title":"Request","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Request"}],"navigatorTitle":[{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","title":"Hummingbird","type":"topic","role":"collection"}}}