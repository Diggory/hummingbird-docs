{"kind":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a middleware or route handler throws an error the server needs to know how to handle this. If the server does not know how to handle the error then the only thing it can return to the client is a status code of 500 (Internal Server Error). This is not overly informative."}]},{"type":"heading","level":2,"anchor":"HBHTTPError","text":"HBHTTPError"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hummingbird uses the Error object "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError"},{"type":"text","text":" throughout its codebase. The server recognises this and can generate a more informative response for the client from it. The error includes the status code that should be returned and a response message if needed. For example"}]},{"type":"codeListing","syntax":"swift","code":["app.get(\"user\") { request -> User in","    guard let userId = request.uri.queryParameters.get(\"id\", as: Int.self) else {","        throw HBHTTPError(.badRequest, message: \"Invalid user id\")","    }","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HBHTTPError"},{"type":"text","text":" generated here will be recognised by the server and it will generate a status code 400 (Bad Request) with the body “Invalid user id”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the situation where you have a route that returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" you are not allowed to throw an error so you have to return a failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". Hummingbird provides a shortcut here for you "},{"type":"codeVoice","code":"request.failure"},{"type":"text","text":". It can be used as follows"}]},{"code":["app.get(\"user\") { request -> EventLoopFuture<User> in","    guard let userId = request.uri.queryParameters.get(\"id\", as: Int.self) else {","        return request.failure(.badRequest, message: \"Invalid user id\")","    }","    ...","}"],"syntax":"swift","type":"codeListing"},{"text":"HBHTTPResponseError","level":2,"anchor":"HBHTTPResponseError","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The server knows how to respond to a "},{"type":"codeVoice","code":"HBHTTPError"},{"type":"text","text":" because it conforms to protocol "},{"type":"codeVoice","code":"HBHTTPResponseError"},{"type":"text","text":". You can create your own "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" object and conform it to "},{"type":"codeVoice","code":"HBHTTPResponseError"},{"type":"text","text":" and the server will know how to generate a sensible error from it. The example below is a error class that outputs an error code in the response headers."}]},{"code":["struct MyError: HBHTTPResponseError {","    init(_ status: HTTPResponseStatus, errorCode: String) {","        self.status = status","        self.errorCode = errorCode","    }","","    let errorCode: String","","    \/\/ required by HBHTTPResponseError protocol","    let status: HTTPResponseStatus","    var headers: HTTPHeaders { [\"error-code\": self.errorCode] }","    func body(allocator: ByteBufferAllocator) -> ByteBuffer? {","        return nil","    }","}"],"syntax":"swift","type":"codeListing"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"generated":true}],"metadata":{"title":"Error Handling","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","role":"article","title":"Service Lifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponseError":{"abstract":[{"text":"An error that is capable of generating an HTTP response","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/hbhttpresponseerror","role":"symbol","title":"HBHTTPResponseError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponseError","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponseError"}],"navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponseError"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPError":{"abstract":[{"type":"text","text":"Default HTTP error. Provides an HTTP status and a message is so desired"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/hbhttperror","role":"symbol","title":"HBHTTPError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPError","kind":"identifier"}],"navigatorTitle":[{"text":"HBHTTPError","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","role":"collectionGroup","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","role":"article","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","title":"Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"type":"topic","role":"article"}}}