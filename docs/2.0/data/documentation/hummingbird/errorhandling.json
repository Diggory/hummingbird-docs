{"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponseError"],"title":"Reference"}],"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"If a middleware or route handler throws an error the server needs to know how to handle this. If the server does not know how to handle the error then the only thing it can return to the client is a status code of 500 (Internal Server Error). This is not overly informative."}],"type":"paragraph"},{"level":2,"anchor":"HTTPError","text":"HTTPError","type":"heading"},{"inlineContent":[{"type":"text","text":"Hummingbird uses the Error object "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPError"},{"type":"text","text":" throughout its codebase. The server recognises this and can generate a more informative response for the client from it. The error includes the status code that should be returned and a response message if needed. For example"}],"type":"paragraph"},{"code":["app.get(\"user\") { request -> User in","    guard let userId = request.uri.queryParameters.get(\"id\", as: Int.self) else {","        throw HTTPError(.badRequest, message: \"Invalid user id\")","    }","    ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"HTTPError","type":"codeVoice"},{"type":"text","text":" generated here will be recognised by the server and it will generate a status code 400 (Bad Request) with the body “Invalid user id”."}],"type":"paragraph"},{"level":2,"anchor":"HTTPResponseError","text":"HTTPResponseError","type":"heading"},{"inlineContent":[{"text":"The server knows how to respond to a ","type":"text"},{"type":"codeVoice","code":"HTTPError"},{"text":" because it conforms to protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponseError","type":"reference","isActive":true},{"text":". You can create your own ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" object and conform it to ","type":"text"},{"type":"codeVoice","code":"HTTPResponseError"},{"text":" and the server will know how to generate a sensible error from it. The example below is a error class that outputs an error code in the response headers.","type":"text"}],"type":"paragraph"},{"code":["struct MyError: HTTPResponseError {","    init(_ status: HTTPResponseStatus, errorCode: String) {","        self.status = status","        self.errorCode = errorCode","    }","","    let errorCode: String","","    \/\/ required by HTTPResponseError protocol","    let status: HTTPResponseStatus","    var headers: HTTPHeaders { [\"error-code\": self.errorCode] }","    func body(allocator: ByteBufferAllocator) -> ByteBuffer? {","        return nil","    }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides"}],"kind":"article","metadata":{"roleHeading":"API Collection","modules":[{"name":"Hummingbird"}],"images":[{"identifier":"logo.png","type":"icon"}],"role":"collectionGroup","title":"Error Handling"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"type":"topic","title":"Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"url":"\/documentation\/hummingbird\/persistentdata","type":"topic","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/routerguide","type":"topic","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","type":"topic","kind":"article","title":"Jobs","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/jobsguide","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","title":"Logging, Metrics and Tracing","role":"collectionGroup","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponseError":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPResponseError"}],"navigatorTitle":[{"kind":"identifier","text":"HTTPResponseError"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponseError","title":"HTTPResponseError","type":"topic","url":"\/documentation\/hummingbird\/httpresponseerror","abstract":[{"type":"text","text":"An error that is capable of generating an HTTP response"}],"role":"symbol"},"logo.png":{"variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","type":"topic","title":"Encoding and Decoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index","type":"topic","role":"collection","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","title":"Service Lifecycle","role":"article","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","title":"Middleware","role":"collectionGroup","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","url":"\/documentation\/hummingbird\/middlewareguide","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPError":{"kind":"symbol","title":"HTTPError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTPError"}],"role":"symbol","abstract":[{"type":"text","text":"Default HTTP error. Provides an HTTP status and a message"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPError","navigatorTitle":[{"kind":"identifier","text":"HTTPError"}],"url":"\/documentation\/hummingbird\/httperror","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","title":"Migrating to Hummingbird v2","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontexts","type":"topic","role":"collectionGroup","kind":"article"}}}