{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"metadata":{"roleHeading":"API Collection","title":"Persistent data","images":[{"type":"icon","identifier":"logo.png"}],"role":"collectionGroup","modules":[{"name":"HummingbirdPostgres"},{"name":"HummingbirdRedis"},{"name":"Hummingbird"},{"name":"HummingbirdFluent"}]},"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":"."}]},{"text":"Setup","type":"heading","anchor":"Setup","level":2},{"type":"paragraph","inlineContent":[{"text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let persist = MemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"type":"text","text":" serivce group using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)"},{"type":"text","text":" or added to an external managed "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: myRouter)","app.addServices(persist)"]},{"text":"Usage","type":"heading","anchor":"Usage","level":2},{"type":"paragraph","inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"code":"create","type":"codeVoice"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"code":"PersistError.duplicate","type":"codeVoice"},{"text":" error will be thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.set(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}]},{"type":"codeListing","syntax":"swift","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"]},{"type":"paragraph","inlineContent":[{"text":"This returns he value associated with the key or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if that value doesnâ€™t exist or is not of the type requested.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.remove(key: \"mykey\")"]},{"text":"Drivers","type":"heading","anchor":"Drivers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}]},{"type":"codeListing","syntax":"swift","code":["let persist = MemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}]},{"text":"Redis","type":"heading","anchor":"Redis","level":3},{"type":"paragraph","inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"type":"codeVoice","code":"persists"},{"text":" key\/value pairs with the ","type":"text"},{"type":"codeVoice","code":"HummingbirdRedis"},{"text":" library. You would setup ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"]},{"text":"Fluent","type":"heading","anchor":"Fluent","level":3},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference","isActive":true},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"type":"codeVoice","code":"fluent.migrate()"},{"type":"text","text":" after creating the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"reference","isActive":true},{"type":"text","text":" call has been made."}]},{"type":"codeListing","syntax":"swift","code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides","generated":true}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"],"title":"Reference"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemoryPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"title":"MemoryPersistDriver","type":"topic","url":"\/documentation\/hummingbird\/memorypersistdriver","kind":"symbol","navigatorTitle":[{"text":"MemoryPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"role":"collectionGroup","type":"topic","kind":"article","title":"Logging, Metrics and Tracing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/application\/addservices(_:)","role":"symbol","title":"addServices(_:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"abstract":[{"text":"Postgres driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"title":"PostgresPersistDriver","navigatorTitle":[{"text":"PostgresPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","title":"PersistDriver","kind":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbird\/persistdriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","url":"\/documentation\/hummingbird\/requestcontexts","type":"topic","title":"Request Contexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"role":"symbol","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FluentPersistDriver","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","navigatorTitle":[{"text":"FluentPersistDriver","kind":"identifier"}],"type":"topic","title":"FluentPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"title":"Hummingbird","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"collectionGroup","type":"topic","kind":"article","title":"Error Handling","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError":{"title":"PersistError","type":"topic","url":"\/documentation\/hummingbird\/persisterror","abstract":[{"type":"text","text":"Errors return by persist framework"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PersistError"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PersistError"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"role":"collectionGroup","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"url":"\/documentation\/hummingbird\/jobsguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"title":"Jobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","title":"HummingbirdPostgres","kind":"symbol","abstract":[{"type":"text","text":"Working with Postgres databases."}],"url":"\/documentation\/hummingbirdpostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","url":"\/documentation\/hummingbirdredis","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","type":"topic","title":"HummingbirdRedis"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","url":"\/documentation\/hummingbird\/middlewareguide","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"type":"topic","kind":"symbol","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/redispersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","title":"RedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"role":"collection","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","kind":"symbol","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"url":"\/documentation\/hummingbirdfluent"},"logo.png":{"alt":null,"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","url":"\/documentation\/hummingbird\/testing","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"type":"topic","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"navigatorTitle":[{"text":"Application","kind":"identifier"}],"title":"Application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"role":"article","type":"topic","kind":"article","title":"Service Lifecycle","images":[{"type":"icon","identifier":"logo.png"}]}}}