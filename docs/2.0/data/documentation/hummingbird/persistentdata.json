{"kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"],"generated":true}],"metadata":{"title":"Persistent data","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"sections":[],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Setup","text":"Setup","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}],"type":"paragraph"},{"type":"codeListing","code":["let persist = HBMemoryPersistDriver()"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference"},{"type":"text","text":" serivce group using "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","type":"reference"},{"type":"text","text":" or added to an external managed "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["var app = HBApplication(router: myRouter)","app.addServices(persist)"],"syntax":"swift"},{"anchor":"Usage","text":"Usage","type":"heading","level":2},{"inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"type":"codeListing","code":["try await persist.create(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If there is an entry for the key already then a "},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"type":"text","text":" error will be thrown."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}],"type":"paragraph"},{"type":"codeListing","code":["try await request.persist.set(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}],"type":"paragraph"},{"type":"codeListing","code":["try await request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"syntax":"swift"},{"inlineContent":[{"text":"To access values in the ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let value = try await request.persist.get(key: \"mykey\", as: MyValueType.self)"],"syntax":"swift"},{"inlineContent":[{"text":"This returns he value associated with the key or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if that value doesnâ€™t exist or is not of the type requested.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["try await request.persist.remove(key: \"mykey\")"],"syntax":"swift"},{"anchor":"Drivers","text":"Drivers","type":"heading","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"text":" comes with a memory based driver which will store these values in the memory of your server.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let persist = HBMemoryPersistDriver()"],"syntax":"swift"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}],"type":"paragraph"},{"anchor":"Redis","text":"Redis","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"code":"persists","type":"codeVoice"},{"type":"text","text":" key\/value pairs with the "},{"code":"HummingbirdRedis","type":"codeVoice"},{"type":"text","text":" library. You would setup "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"type":"codeListing","code":["let redis = HBRedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)"],"syntax":"swift"},{"anchor":"Fluent","text":"Fluent","type":"heading","level":3},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},{"type":"text","text":" also contains a "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"code":"fluent.migrate()","type":"codeVoice"},{"type":"text","text":" after creating the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"type":"codeListing","code":["let fluent = HBFluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await HBFluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"syntax":"swift"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/router","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"title":"HBFluentPersistDriver","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBFluentPersistDriver"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBFluentPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}],"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"role":"symbol","title":"HBMemoryPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontext","title":"Request Context","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","kind":"symbol","role":"collection","title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"type":"topic","url":"\/documentation\/hummingbird\/hbpersisterror","abstract":[{"type":"text","text":"Errors return by persist framework"}],"navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"title":"HBPersistError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBPersistError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}],"url":"\/documentation\/hummingbird\/hbapplication","title":"HBApplication","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"role":"collection","title":"Hummingbird","kind":"article","type":"topic","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"role":"symbol","title":"HBPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/hbpersistdriver","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)","title":"addServices(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","type":"topic","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","title":"HBRedisPersistDriver","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol"}}}