{"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"sections":[],"metadata":{"roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"HummingbirdRedis"},{"name":"Hummingbird"},{"name":"HummingbirdFluent"},{"name":"HummingbirdPostgres"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data"},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"],"anchor":"Reference"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Setup","anchor":"Setup"},{"inlineContent":[{"text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver.","type":"text"}],"type":"paragraph"},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference"},{"type":"text","text":" serivce group using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"text":" or added to an external managed ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var app = Application(router: myRouter)","app.addServices(persist)"],"syntax":"swift"},{"text":"Usage","type":"heading","level":2,"anchor":"Usage"},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"type":"codeVoice","code":"PersistError.duplicate"},{"text":" error will be thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}]},{"syntax":"swift","type":"codeListing","code":["try await persist.set(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"code":"create","type":"codeVoice"},{"type":"text","text":" and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}]},{"code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To access values in the ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"]},{"inlineContent":[{"type":"text","text":"This returns the value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist."},{"type":"text","text":" "},{"type":"text","text":"If the value is not of the expected type, this will throw "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}]},{"code":["try await persist.remove(key: \"mykey\")"],"type":"codeListing","syntax":"swift"},{"text":"Drivers","type":"heading","anchor":"Drivers","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}],"type":"paragraph"},{"syntax":"swift","code":["let persist = MemoryPersistDriver()"],"type":"codeListing"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Redis","level":3,"anchor":"Redis"},{"inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with the ","type":"text"},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"syntax":"swift","code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"],"type":"codeListing"},{"text":"Fluent","type":"heading","level":3,"anchor":"Fluent"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"type":"codeVoice","code":"fluent.migrate()"},{"text":" after creating the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver"},{"text":" call has been made.","type":"text"}],"type":"paragraph"},{"code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"syntax":"swift","type":"codeListing"}]}],"seeAlsoSections":[{"generated":true,"title":"Guides","anchor":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","images":[{"identifier":"logo.png","type":"icon"}],"title":"Router","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","images":[{"type":"icon","identifier":"logo.png"}],"title":"Encoding and Decoding","role":"collectionGroup","kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"role":"symbol","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"title":"MemoryPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","kind":"symbol","url":"\/documentation\/hummingbird\/memorypersistdriver","navigatorTitle":[{"text":"MemoryPersistDriver","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","url":"\/documentation\/hummingbirdpostgres","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","kind":"symbol","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"title":"HummingbirdPostgres"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"title":"Application","type":"topic","url":"\/documentation\/hummingbird\/application","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Application"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","role":"symbol","url":"\/documentation\/hummingbird\/persisterror\/invalidconversion","title":"invalidConversion","abstract":[{"text":"Failed to convert a persist value to the requested type","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"invalidConversion","kind":"identifier"},{"kind":"text","text":": `Self`"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"collectionGroup","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","role":"symbol","url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","title":"PostgresPersistDriver","abstract":[{"text":"Postgres driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresPersistDriver"}],"navigatorTitle":[{"kind":"identifier","text":"PostgresPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError":{"title":"PersistError","type":"topic","url":"\/documentation\/hummingbird\/persisterror","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PersistError"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PersistError"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","abstract":[{"text":"Errors return by persist framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","type":"topic","url":"\/documentation\/hummingbirdredis","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"role":"collectionGroup","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"Jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","url":"\/documentation\/hummingbird\/jobsguide","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","url":"\/documentation\/index","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"type":"topic","title":"addServices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","url":"\/documentation\/hummingbird\/application\/addservices(_:)","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P"},{"kind":"text","text":"...)"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"title":"Testing","type":"topic","url":"\/documentation\/hummingbird\/testing","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","role":"symbol","url":"\/documentation\/hummingbird\/persistdriver","title":"PersistDriver","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"PersistDriver","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PersistDriver"}]},"logo.png":{"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","role":"symbol","title":"RedisPersistDriver","url":"\/documentation\/hummingbirdredis\/redispersistdriver","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisPersistDriver"}],"navigatorTitle":[{"kind":"identifier","text":"RedisPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"title":"HummingbirdFluent","type":"topic","url":"\/documentation\/hummingbirdfluent","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"role":"symbol","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"title":"FluentPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}]}}}