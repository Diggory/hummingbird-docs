{"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"title":"Persistent data","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"]}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"level":2,"anchor":"Setup","type":"heading","text":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}]},{"syntax":"swift","type":"codeListing","code":["let persist = HBMemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference"},{"text":" serivce group using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","type":"reference"},{"text":" or added to an external managed ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var app = HBApplication(router: myRouter)","app.addServices(persist)"]},{"level":2,"anchor":"Usage","type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}]},{"syntax":"swift","type":"codeListing","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"code":"HBPersistError.duplicate","type":"codeVoice"},{"text":" error will be thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}]},{"syntax":"swift","type":"codeListing","code":["try await request.persist.set(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"code":"create","type":"codeVoice"},{"type":"text","text":" and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" have an "},{"code":"expires","type":"codeVoice"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}]},{"syntax":"swift","type":"codeListing","code":["try await request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access values in the "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" key\/value store you use"}]},{"syntax":"swift","type":"codeListing","code":["let value = try await request.persist.get(key: \"mykey\", as: MyValueType.self)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This returns he value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}]},{"syntax":"swift","type":"codeListing","code":["try await request.persist.remove(key: \"mykey\")"]},{"level":2,"anchor":"Drivers","type":"heading","text":"Drivers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}]},{"syntax":"swift","type":"codeListing","code":["let persist = HBMemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}]},{"level":3,"anchor":"Redis","type":"heading","text":"Redis"},{"type":"paragraph","inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with the ","type":"text"},{"code":"HummingbirdRedis","type":"codeVoice"},{"text":" library. You would setup ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let redis = HBRedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)"]},{"level":3,"anchor":"Fluent","type":"heading","text":"Fluent"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","isActive":true,"type":"reference"},{"text":" also contains a ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"type":"codeVoice","code":"fluent.migrate()"},{"text":" after creating the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","isActive":true,"type":"reference"},{"text":" call has been made.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let fluent = HBFluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await HBFluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"]}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"title":"Encoding and Decoding","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","kind":"article","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","title":"Hummingbird","role":"collection","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"title":"HummingbirdFluent","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"url":"\/documentation\/hummingbirdfluent","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"url":"\/documentation\/hummingbird\/hbpersisterror","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistError"}],"title":"HBPersistError","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","abstract":[{"type":"text","text":"Errors return by persist framework"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","url":"\/documentation\/hummingbird\/hbapplication","role":"symbol","type":"topic","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"title":"HBApplication","kind":"symbol","abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","title":"Hummingbird","role":"collection","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","kind":"article","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Context","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/requestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Service","kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P"},{"kind":"text","text":"...)"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","title":"addServices(_:)","kind":"symbol","url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)","role":"symbol","type":"topic","abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"url":"\/documentation\/hummingbird\/hbmemorypersistdriver","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","type":"topic","title":"HBMemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"url":"\/documentation\/hummingbird\/hbpersistdriver","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriver","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","type":"topic","title":"HBPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"title":"HBRedisPersistDriver","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisPersistDriver"}],"abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRedisPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"type":"topic","kind":"symbol","title":"HBFluentPersistDriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFluentPersistDriver","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","navigatorTitle":[{"text":"HBFluentPersistDriver","kind":"identifier"}]}}}