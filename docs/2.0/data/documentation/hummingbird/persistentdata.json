{"sections":[],"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"HummingbirdPostgres"},{"name":"Hummingbird"},{"name":"HummingbirdFluent"},{"name":"HummingbirdRedis"}],"roleHeading":"API Collection","title":"Persistent data","role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"],"title":"Reference"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"level":2,"type":"heading","text":"Setup","anchor":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}]},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"type":"text","text":" serivce group using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"reference","isActive":true},{"type":"text","text":" or added to an external managed "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["var app = Application(router: myRouter)","app.addServices(persist)"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Usage","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"type":"codeVoice","code":"create"}]},{"code":["try await persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is an entry for the key already then a "},{"code":"PersistError.duplicate","type":"codeVoice"},{"type":"text","text":" error will be thrown."}]},{"type":"paragraph","inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}]},{"code":["try await persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}]},{"code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}]},{"code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This returns he value associated with the key or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if that value doesnâ€™t exist or is not of the type requested.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}]},{"code":["try await persist.remove(key: \"mykey\")"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Drivers","anchor":"Drivers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}]},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}]},{"level":3,"type":"heading","text":"Redis","anchor":"Redis"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with the "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}]},{"code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Fluent","anchor":"Fluent"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after creating the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver"},{"text":" call has been made.","type":"text"}]},{"code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError":{"type":"topic","abstract":[{"type":"text","text":"Errors return by persist framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistError"}],"navigatorTitle":[{"kind":"identifier","text":"PersistError"}],"kind":"symbol","url":"\/documentation\/hummingbird\/persisterror","role":"symbol","title":"PersistError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","type":"topic","role":"symbol","abstract":[{"text":"Postgres driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"navigatorTitle":[{"text":"PostgresPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","title":"PostgresPersistDriver","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","title":"Router","kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","url":"\/documentation\/index","role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","url":"\/documentation\/hummingbird","role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","title":"Encoding and Decoding","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"url":"\/documentation\/hummingbird\/application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"type":"topic","title":"Application","kind":"symbol","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"navigatorTitle":[{"kind":"identifier","text":"Application"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","title":"FluentPersistDriver","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"url":"\/documentation\/hummingbirdredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","type":"topic","title":"HummingbirdRedis","kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","url":"\/documentation\/hummingbird\/jobsguide","kind":"article","title":"Jobs","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","title":"Error Handling","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"role":"collectionGroup","title":"Middleware","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"kind":"symbol","url":"\/documentation\/hummingbirdfluent","type":"topic","title":"HummingbirdFluent","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"url":"\/documentation\/hummingbird\/memorypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"type":"topic","title":"MemoryPersistDriver","kind":"symbol","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"url":"\/documentation\/hummingbird\/servicelifecycle","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","title":"Request Contexts","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"title":"PersistDriver","role":"symbol","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","url":"\/documentation\/hummingbird\/persistdriver","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"url":"\/documentation\/hummingbirdpostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","type":"topic","title":"HummingbirdPostgres","kind":"symbol","abstract":[{"type":"text","text":"Working with Postgres databases."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/addservices(_:)","title":"addServices(_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}],"abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"title":"RedisPersistDriver","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","url":"\/documentation\/hummingbirdredis\/redispersistdriver","navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","title":"Logging, Metrics and Tracing","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"}}}