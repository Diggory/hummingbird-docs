{"seeAlsoSections":[{"generated":true,"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"]}],"kind":"article","metadata":{"title":"Persistent data","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"If you are looking to store data between requests then the Hummingbird ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}]},{"type":"heading","anchor":"Setup","text":"Setup","level":2},{"type":"paragraph","inlineContent":[{"text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let persist = HBMemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},{"type":"text","text":" serivce group using "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","type":"reference"},{"text":" or added to an external managed ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var app = HBApplication(router: myRouter)","app.addServices(persist)"]},{"type":"heading","anchor":"Usage","text":"Usage","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is an entry for the key already then a "},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"type":"text","text":" error will be thrown."}]},{"type":"paragraph","inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try await request.persist.set(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"code":"create","type":"codeVoice"},{"type":"text","text":" and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" have an "},{"code":"expires","type":"codeVoice"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}]},{"type":"codeListing","syntax":"swift","code":["try await request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}]},{"type":"codeListing","syntax":"swift","code":["let value = try await request.persist.get(key: \"mykey\", as: MyValueType.self)"]},{"type":"paragraph","inlineContent":[{"text":"This returns he value associated with the key or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if that value doesnâ€™t exist or is not of the type requested.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try await request.persist.remove(key: \"mykey\")"]},{"type":"heading","anchor":"Drivers","text":"Drivers","level":2},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" comes with a memory based driver which will store these values in the memory of your server.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let persist = HBMemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}]},{"type":"heading","anchor":"Redis","text":"Redis","level":3},{"type":"paragraph","inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with the ","type":"text"},{"code":"HummingbirdRedis","type":"codeVoice"},{"text":" library. You would setup ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let redis = HBRedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)"]},{"type":"heading","anchor":"Fluent","text":"Fluent","level":3},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},{"text":" also contains a ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"type":"codeVoice","code":"fluent.migrate()"},{"text":" after creating the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"},{"text":" call has been made.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let fluent = HBFluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await HBFluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","kind":"article","type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","title":"HBFluentPersistDriver","type":"topic","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","navigatorTitle":[{"text":"HBFluentPersistDriver","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFluentPersistDriver","kind":"identifier"}],"abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addServices"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service"},{"text":"...)","kind":"text"}],"type":"topic","title":"addServices(_:)","url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","url":"\/documentation\/hummingbird\/migratingtov2","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"title":"HBApplication","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBApplication"}],"url":"\/documentation\/hummingbird\/hbapplication","abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"type":"topic","title":"HBMemoryPersistDriver","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","role":"symbol","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","title":"HBRedisPersistDriver","type":"topic","url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","navigatorTitle":[{"kind":"identifier","text":"HBRedisPersistDriver"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisPersistDriver"}],"abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"type":"topic","title":"HBPersistDriver","url":"\/documentation\/hummingbird\/hbpersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"title":"HBPersistError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbird\/hbpersisterror","abstract":[{"text":"Errors return by persist framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"type":"topic","title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","role":"collection","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","title":"Testing","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/testing"}}}