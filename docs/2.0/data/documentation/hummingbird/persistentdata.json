{"seeAlsoSections":[{"anchor":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides"}],"kind":"article","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"anchor":"Reference","title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"metadata":{"roleHeading":"API Collection","role":"collectionGroup","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"Hummingbird"},{"name":"HummingbirdRedis"},{"name":"HummingbirdPostgres"},{"name":"HummingbirdFluent"}]},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"If you are looking to store data between requests then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"level":2,"anchor":"Setup","type":"heading","text":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}]},{"syntax":"swift","code":["let persist = MemoryPersistDriver()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"type":"codeVoice","code":"Service"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"text":" serivce group using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"type":"text","text":" or added to an external managed "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["var app = Application(router: myRouter)","app.addServices(persist)"],"type":"codeListing"},{"text":"Usage","anchor":"Usage","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}]},{"syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"type":"codeVoice","code":"PersistError.duplicate"},{"text":" error will be thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}]},{"syntax":"swift","code":["try await persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}]},{"code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To access values in the "},{"code":"persist","type":"codeVoice"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This returns he value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}]},{"syntax":"swift","code":["try await persist.remove(key: \"mykey\")"],"type":"codeListing"},{"anchor":"Drivers","type":"heading","level":2,"text":"Drivers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}]},{"type":"codeListing","code":["let persist = MemoryPersistDriver()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}]},{"type":"heading","text":"Redis","level":3,"anchor":"Redis"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with the ","type":"text"},{"code":"HummingbirdRedis","type":"codeVoice"},{"text":" library. You would setup ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well.","type":"text"}]},{"code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"],"type":"codeListing","syntax":"swift"},{"anchor":"Fluent","level":3,"type":"heading","text":"Fluent"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference"},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"type":"text","text":" after creating the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver"},{"text":" call has been made.","type":"text"}]},{"code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"role":"symbol","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","title":"FluentPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}],"navigatorTitle":[{"text":"FluentPersistDriver","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError":{"url":"\/documentation\/hummingbird\/persisterror","title":"PersistError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PersistError"}],"navigatorTitle":[{"text":"PersistError","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Errors return by persist framework","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"kind":"symbol","abstract":[{"text":"Postgres driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresPersistDriver","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","navigatorTitle":[{"kind":"identifier","text":"PostgresPersistDriver"}],"role":"symbol","url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","title":"PostgresPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","title":"Request Contexts","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"title":"Middleware","url":"\/documentation\/hummingbird\/middlewareguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"kind":"symbol","title":"Application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Application"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"title":"HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","kind":"symbol","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Working with Postgres databases."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","title":"Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"kind":"symbol","title":"HummingbirdRedis","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","url":"\/documentation\/hummingbirdredis","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"title":"MemoryPersistDriver","url":"\/documentation\/hummingbird\/memorypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"role":"symbol","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"kind":"symbol","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RedisPersistDriver"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","navigatorTitle":[{"kind":"identifier","text":"RedisPersistDriver"}],"role":"symbol","url":"\/documentation\/hummingbirdredis\/redispersistdriver","title":"RedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","title":"Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/routerguide","type":"topic","title":"Router","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2","role":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"title":"addServices(_:)","kind":"symbol","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"type":"topic","url":"\/documentation\/hummingbird\/application\/addservices(_:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"kind":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/persistdriver","title":"PersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/jobsguide","images":[{"type":"icon","identifier":"logo.png"}],"title":"Jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","kind":"article"}}}