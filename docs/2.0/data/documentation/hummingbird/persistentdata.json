{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Setup","anchor":"Setup","level":2},{"inlineContent":[{"text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let persist = HBMemoryPersistDriver()"]},{"inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"type":"codeVoice","code":"Service"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","isActive":true,"type":"reference"},{"text":" serivce group using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","isActive":true,"type":"reference"},{"text":" or added to an external managed ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var app = HBApplication(router: myRouter)","app.addServices(persist)"]},{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"text":" error will be thrown.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try await request.persist.set(key: \"mykey\", value: MyValue)"]},{"inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try await request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let value = try await request.persist.get(key: \"mykey\", as: MyValueType.self)"]},{"inlineContent":[{"type":"text","text":"This returns he value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try await request.persist.remove(key: \"mykey\")"]},{"type":"heading","text":"Drivers","anchor":"Drivers","level":2},{"inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" you have to add it to the application and indicate what driver you are going to use. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver which will store these values in the memory of your server."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let persist = HBMemoryPersistDriver()"]},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Redis","anchor":"Redis","level":3},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with the "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let redis = HBRedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)"]},{"type":"heading","text":"Fluent","anchor":"Fluent","level":3},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"type":"codeVoice","code":"fluent.migrate()"},{"type":"text","text":" after creating the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let fluent = HBFluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await HBFluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"]}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"}],"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Persistent data"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"],"title":"Reference"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"title":"addServices(_:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P"},{"kind":"text","text":"...)"}],"kind":"symbol","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","role":"collection","type":"topic","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbpersisterror","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","type":"topic","title":"HBPersistError","abstract":[{"text":"Errors return by persist framework","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"title":"Encoding and Decoding","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","role":"symbol","type":"topic","title":"HBMemoryPersistDriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","role":"collection","type":"topic","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Application class. Brings together all the components of Hummingbird together"}],"navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/hbapplication","title":"HBApplication","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"url":"\/documentation\/hummingbird\/hbpersistdriver","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"title":"HBPersistDriver","role":"symbol","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","title":"Testing","kind":"article","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","title":"HummingbirdFluent","type":"topic","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFluentPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBFluentPersistDriver"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","title":"HBFluentPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRedisPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","title":"HBRedisPersistDriver","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"title":"Router","url":"\/documentation\/hummingbird\/router","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"}}}