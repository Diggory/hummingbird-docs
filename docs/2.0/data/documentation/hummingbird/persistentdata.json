{"kind":"article","metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Persistent data"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver"],"title":"Reference"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Setup","type":"heading","text":"Setup"},{"inlineContent":[{"text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let persist = HBMemoryPersistDriver()"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference","isActive":true},{"type":"text","text":" serivce group using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","type":"reference","isActive":true},{"type":"text","text":" or added to an external managed "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["var app = HBApplication(router: myRouter)","app.addServices(persist)"],"syntax":"swift"},{"level":2,"anchor":"Usage","type":"heading","text":"Usage"},{"inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"code":"create","type":"codeVoice"}],"type":"paragraph"},{"type":"codeListing","code":["try await persist.create(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"text":" error will be thrown.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}],"type":"paragraph"},{"type":"codeListing","code":["try await request.persist.set(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["try await request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"syntax":"swift"},{"inlineContent":[{"text":"To access values in the ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let value = try await request.persist.get(key: \"mykey\", as: MyValueType.self)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This returns he value associated with the key or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["try await request.persist.remove(key: \"mykey\")"],"syntax":"swift"},{"level":2,"anchor":"Drivers","type":"heading","text":"Drivers"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" comes with a memory based driver which will store these values in the memory of your server.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let persist = HBMemoryPersistDriver()"],"syntax":"swift"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Redis","type":"heading","text":"Redis"},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with the "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"type":"codeListing","code":["let redis = HBRedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)"],"syntax":"swift"},{"level":3,"anchor":"Fluent","type":"heading","text":"Fluent"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference"},{"type":"text","text":" also contains a "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"code":"fluent.migrate()","type":"codeVoice"},{"type":"text","text":" after creating the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","type":"reference"},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"type":"codeListing","code":["let fluent = HBFluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await HBFluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"syntax":"swift"}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"type":"topic","title":"Router","url":"\/documentation\/hummingbird\/router","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","title":"Hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","type":"topic","kind":"symbol","title":"HummingbirdFluent","abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","title":"HBRedisPersistDriver","navigatorTitle":[{"kind":"identifier","text":"HBRedisPersistDriver"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisPersistDriver"}],"abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","title":"Request Contexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontexts","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"type":"topic","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"title":"HBMemoryPersistDriver","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","title":"Encoding and Decoding","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/HBFluentPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/HBFluentPersistDriver","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"kind":"identifier","text":"HBFluentPersistDriver"}],"type":"topic","title":"HBFluentPersistDriver","url":"\/documentation\/hummingbirdfluent\/hbfluentpersistdriver","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBFluentPersistDriver"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBApplication"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","url":"\/documentation\/hummingbird\/hbapplication","title":"HBApplication","role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Application class. Brings together all the components of Hummingbird together"}],"navigatorTitle":[{"kind":"identifier","text":"HBApplication"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"role":"symbol","abstract":[{"text":"Errors return by persist framework","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"title":"HBPersistError","navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}],"type":"topic","url":"\/documentation\/hummingbird\/hbpersisterror","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"title":"HBPersistDriver","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","url":"\/documentation\/hummingbird\/hbpersistdriver","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"url":"\/documentation\/hummingbird\/testing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","role":"collection","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service"},{"kind":"text","text":"...)"}],"title":"addServices(_:)","url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}]}}}