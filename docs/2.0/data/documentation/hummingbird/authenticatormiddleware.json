{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","type":"reference"},{"text":". This requires you implement the function ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq","type":"reference"},{"text":" that returns a value conforming to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To use an authenticator it is required that your request context conform to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"text":". When you return valid authentication data from your ","type":"text"},{"type":"codeVoice","code":"authenticate"},{"text":" function it is recorded in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth"},{"text":" member of your request context.","type":"text"}]},{"type":"heading","text":"Usage","level":2,"anchor":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"code":"User","type":"codeVoice"},{"type":"text","text":" struct, otherwise it returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"type":"codeListing","syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in your request handler you can access your authentication data with "},{"type":"codeVoice","code":"context.auth.get"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HTTPError(.unauthorized) }","    return user","}"]},{"type":"paragraph","inlineContent":[{"text":"You can require that that authentication was successful and authentication data is available by either adding the middleware ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"reference"},{"text":" after your authentication middleware","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"]},{"type":"paragraph","inlineContent":[{"text":"Or you can use ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)","isActive":true,"type":"reference"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Request authentication middleware","type":"text"}],"kind":"article","topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"]}],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true}],"sections":[],"metadata":{"title":"Authenticator Middleware","roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"HummingbirdAuth"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","type":"topic","title":"Sessions","url":"\/documentation\/hummingbird\/sessions","role":"collectionGroup","abstract":[{"text":"Session based authentication","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"role":"symbol","title":"AuthRequestContext","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdauth\/authrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/Authenticatable":{"role":"symbol","title":"Authenticatable","navigatorTitle":[{"text":"Authenticatable","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Authenticatable","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdauth\/authenticatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable","abstract":[{"text":"Protocol for objects that can be returned by an ","type":"text"},{"code":"AuthenticatorMiddleware","type":"codeVoice"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"abstract":[{"text":"Middleware returning 404 for unauthenticated requests","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","title":"IsAuthenticatedMiddleware","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthenticatorMiddleware","kind":"identifier"}],"abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","title":"AuthenticatorMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/LoginCache/require(_:)":{"title":"require(_:)","abstract":[{"text":"Require authenticated type","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"require"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Auth"},{"kind":"text","text":">("},{"preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp","kind":"typeIdentifier","text":"Auth"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp","kind":"typeIdentifier","text":"Auth"}],"url":"\/documentation\/hummingbirdauth\/logincache\/require(_:)","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)-9d1lq":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"authenticate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP5ValueQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"defaultImplementations":1,"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)-9d1lq","title":"authenticate(request:context:)","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/auth":{"title":"auth","abstract":[{"text":"Login cache","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"auth"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV","kind":"typeIdentifier","text":"LoginCache"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext\/auth","kind":"symbol","required":true,"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"kind":"article","url":"\/documentation\/hummingbird\/onetimepasswords","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","abstract":[{"type":"text","text":"A one time password (OTP) valid for only one login session."}],"type":"topic","title":"One Time Passwords"}}}