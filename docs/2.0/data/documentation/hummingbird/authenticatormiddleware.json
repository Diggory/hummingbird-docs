{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware"},{"type":"text","text":". This requires you implement the function "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq"},{"type":"text","text":" that returns a value conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":". When you return valid authentication data from your "},{"type":"codeVoice","code":"authenticate"},{"type":"text","text":" function it is recorded in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth"},{"type":"text","text":" member of your request context."}]},{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"paragraph","inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" struct, otherwise it returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in your request handler you can access your authentication data with "},{"type":"codeVoice","code":"context.auth.get"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HTTPError(.unauthorized) }","    return user","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"reference","isActive":true},{"type":"text","text":" after your authentication middleware"}]},{"type":"codeListing","syntax":"swift","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"]},{"type":"paragraph","inlineContent":[{"text":"Or you can use ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)","isActive":true,"type":"reference"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}]}]}],"sections":[],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Request authentication middleware","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true,"title":"Guides"}],"metadata":{"role":"collectionGroup","roleHeading":"API Collection","title":"Authenticator Middleware"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"],"title":"Reference"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic","title":"Router","url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/auth":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"auth"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV","text":"LoginCache"}],"abstract":[{"type":"text","text":"Login cache"}],"title":"auth","required":true,"url":"\/documentation\/hummingbirdauth\/authrequestcontext\/auth","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","role":"article","type":"topic","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","title":"Service Lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","kind":"article","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"type":"topic","role":"article","url":"\/documentation\/hummingbird\/onetimepasswords","title":"One Time Passwords"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"title":"IsAuthenticatedMiddleware","abstract":[{"text":"Middleware returning 401 for unauthenticated requests","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)-9d1lq":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq","role":"symbol","abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"title":"authenticate(request:context:)","required":true,"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)-9d1lq","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"authenticate"},{"kind":"text","text":"("},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","text":"Context"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP5ValueQa","text":"Value"},{"kind":"text","text":"?"}],"defaultImplementations":1},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"title":"Hummingbird","url":"\/documentation\/index","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/Authenticatable":{"abstract":[{"text":"Protocol for objects that can be returned by an ","type":"text"},{"code":"AuthenticatorMiddleware","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbirdauth\/authenticatable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Authenticatable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Authenticatable"}],"type":"topic","title":"Authenticatable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","kind":"article","url":"\/documentation\/hummingbird\/sessions","title":"Sessions","abstract":[{"text":"Session based authentication","type":"text"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","kind":"article","role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"kind":"symbol","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"role":"symbol","title":"AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext","type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","role":"symbol","abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"title":"AuthenticatorMiddleware","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthenticatorMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"AuthenticatorMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/LoginCache/require(_:)":{"abstract":[{"type":"text","text":"Require authenticated type"}],"url":"\/documentation\/hummingbirdauth\/logincache\/require(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"require","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Auth","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Auth","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Auth","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)","kind":"symbol","role":"symbol","type":"topic","title":"require(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"type":"topic","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/jobsguide","title":"Jobs","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","kind":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2"}}}