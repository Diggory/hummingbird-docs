{"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware"},{"text":". This requires you implement the function ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq","isActive":true,"type":"reference"},{"text":" that returns a value conforming to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To use an authenticator it is required that your request context conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference","isActive":true},{"text":". When you return valid authentication data from your ","type":"text"},{"type":"codeVoice","code":"authenticate"},{"text":" function it is recorded in the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth","type":"reference","isActive":true},{"text":" member of your request context.","type":"text"}]},{"text":"Usage","type":"heading","anchor":"Usage","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct, otherwise it returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"type":"codeListing","code":["router.middlewares.add(BasicAuthenticator())"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in your request handler you can access your authentication data with "},{"type":"codeVoice","code":"context.auth.get"},{"type":"text","text":"."}]},{"type":"codeListing","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HTTPError(.unauthorized) }","    return user","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"reference"},{"type":"text","text":" after your authentication middleware"}]},{"type":"codeListing","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)"},{"type":"text","text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server."}]}],"kind":"content"}],"metadata":{"roleHeading":"API Collection","modules":[{"name":"HummingbirdAuth"}],"role":"collectionGroup","title":"Authenticator Middleware"},"sections":[],"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"]}],"kind":"article","topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"type":"text","text":"Request authentication middleware"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","url":"\/documentation\/hummingbirdauth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","role":"collection","title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"url":"\/documentation\/index","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"kind":"symbol","title":"IsAuthenticatedMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"title":"AuthenticatorMiddleware","type":"topic","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthenticatorMiddleware","kind":"identifier"}],"navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"navigatorTitle":[{"kind":"identifier","text":"AuthRequestContext"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AuthRequestContext"}],"kind":"symbol","title":"AuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","title":"Sessions","abstract":[{"type":"text","text":"Session based authentication"}],"url":"\/documentation\/hummingbird\/sessions","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/auth":{"title":"auth","type":"topic","url":"\/documentation\/hummingbirdauth\/authrequestcontext\/auth","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"auth","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"LoginCache","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV"}],"required":true,"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Login cache"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"title":"One Time Passwords","url":"\/documentation\/hummingbird\/onetimepasswords","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","abstract":[{"type":"text","text":"A one time password (OTP) valid for only one login session."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/LoginCache/require(_:)":{"abstract":[{"type":"text","text":"Require authenticated type"}],"url":"\/documentation\/hummingbirdauth\/logincache\/require(_:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"require","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Auth"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp","text":"Auth"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp","text":"Auth"}],"kind":"symbol","title":"require(_:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)-9d1lq":{"title":"authenticate(request:context:)","type":"topic","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)-9d1lq","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"authenticate"},{"kind":"text","text":"("},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","text":"Context","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP5ValueQa"},{"text":"?","kind":"text"}],"required":true,"kind":"symbol","role":"symbol","defaultImplementations":1,"abstract":[{"type":"text","text":"Called by middleware to see if request can authenticate."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/Authenticatable":{"type":"topic","url":"\/documentation\/hummingbirdauth\/authenticatable","navigatorTitle":[{"text":"Authenticatable","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for objects that can be returned by an "},{"type":"codeVoice","code":"AuthenticatorMiddleware"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Authenticatable","kind":"identifier"}],"role":"symbol","title":"Authenticatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/Authenticatable"}}}