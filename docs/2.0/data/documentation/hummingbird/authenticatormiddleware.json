{"kind":"article","abstract":[{"type":"text","text":"Request authentication middleware"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"]}],"seeAlsoSections":[{"title":"Guides","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","isActive":true},{"text":". This requires you implement the function ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq","isActive":true},{"text":" that returns a value conforming to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"type":"text","text":". When you return valid authentication data from your "},{"type":"codeVoice","code":"authenticate"},{"type":"text","text":" function it is recorded in the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth","isActive":true,"type":"reference"},{"type":"text","text":" member of your request context."}],"type":"paragraph"},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" struct, otherwise it returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"]},{"inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["router.middlewares.add(BasicAuthenticator())"]},{"inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"code":"context.auth.get","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = context.auth.get(User.self) else { throw HTTPError(.unauthorized) }","    return user","}"]},{"inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","isActive":true},{"type":"text","text":" after your authentication middleware"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["router.middlewares.add(BasicAuthenticator())","router.middlewares.add(IsAuthenticatedMiddleware<User>())"]},{"inlineContent":[{"type":"text","text":"Or you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)"},{"type":"text","text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"role":"collectionGroup","title":"Authenticator Middleware","images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"API Collection"},"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/auth":{"url":"\/documentation\/hummingbirdauth\/authrequestcontext\/auth","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"auth","kind":"identifier"},{"text":": ","kind":"text"},{"text":"LoginCache","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV","kind":"typeIdentifier"}],"kind":"symbol","title":"auth","required":true,"abstract":[{"text":"Login cache","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/auth"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"title":"AuthRequestContext","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","title":"Service Lifecycle","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"type":"topic","title":"AuthenticatorMiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthenticatorMiddleware","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"type":"topic","title":"Sessions","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"text":"Session based authentication","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","url":"\/documentation\/hummingbird\/sessions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","title":"Error Handling","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Router","role":"collectionGroup","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"logo.png":{"type":"image","variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"role":"collection","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"type":"topic","title":"IsAuthenticatedMiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Middleware returning 401 for unauthenticated requests","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/LoginCache/require(_:)":{"url":"\/documentation\/hummingbirdauth\/logincache\/require(_:)","abstract":[{"type":"text","text":"Require authenticated type"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/LoginCache\/require(_:)","role":"symbol","title":"require(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"require"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Auth"},{"text":">(","kind":"text"},{"text":"Auth","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Auth","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth10LoginCacheV7requireyxxmKAA15AuthenticatableRzlF0B0L_xmfp"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"A one time password (OTP) valid for only one login session."}],"title":"One Time Passwords","role":"article","url":"\/documentation\/hummingbird\/onetimepasswords","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)-9d1lq":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Called by middleware to see if request can authenticate."}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)-9d1lq","type":"topic","defaultImplementations":1,"title":"authenticate(request:context:)","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)-9d1lq","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"authenticate"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP5ValueQa"},{"text":"?","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"title":"Jobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"role":"collectionGroup","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"title":"Logging, Metrics and Tracing","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"title":"Migrating to Hummingbird v2"}}}