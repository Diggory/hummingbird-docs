{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"generated":true,"title":"Guides"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"modules":[{"name":"Hummingbird"}],"roleHeading":"Article","role":"article","title":"Service Lifecycle"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true,"type":"reference"},{"text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM.","type":"text"}]},{"level":2,"type":"heading","text":"Service Lifecycle","anchor":"Service-Lifecycle"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol "},{"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","isActive":true,"type":"reference"},{"type":"text","text":". Internally this needs to call "},{"code":"withGracefulShutdownHandler","type":"codeVoice"},{"type":"text","text":" to handle graceful shutdown when we receive a shutdown signal."}]},{"type":"codeListing","syntax":"swift","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"]},{"level":2,"type":"heading","text":"Hummingbird Integration","anchor":"Hummingbird-Integration"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference","isActive":true},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Service"},{"text":" and also provides a helper function that constructs the ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":" including the application and then runs it.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication(router: router)","try await app.runService()"]},{"type":"paragraph","inlineContent":[{"text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":". ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},{"text":" holds an internal ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":" and any service you want managed can be added to the internal group using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var app = HBApplication(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"]},{"level":2,"type":"heading","text":"Managing server startup","anchor":"Managing-server-startup"},{"type":"paragraph","inlineContent":[{"text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference"},{"text":" you can add processes to run before starting up the server, but while other services are running using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/runBeforeServerStart(_:)","type":"reference"},{"text":". You can call ","type":"text"},{"code":"runBeforeServerStart","type":"codeVoice"},{"text":" multiple times to add multiple processes to be run before we startup the server.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var app = HBApplication(router: router)","app.addServices(dbClient)","app.runBeforeServerStart {","    try await dbClient.migrate()","}","try await app.runService()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Read the Swift Service Lifecycle "},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"type":"text","text":" to find out more."}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","interfaceLanguage":"swift"},"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"role":"collectionGroup","kind":"article","type":"topic","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"titleInlineContent":[{"code":"Service","type":"codeVoice"}],"type":"link","title":"Service","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"type":"topic","title":"HBApplication","url":"\/documentation\/hummingbird\/hbapplication","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","role":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service"},{"text":"...)","kind":"text"}],"abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"title":"addServices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","kind":"article"},"https://github.com/swift-server/swift-service-lifecycle":{"titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"type":"link","title":"Swift Service Lifecycle","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/runBeforeServerStart(_:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbird\/hbapplication\/runbeforeserverstart(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/runBeforeServerStart(_:)","type":"topic","kind":"symbol","title":"runBeforeServerStart(_:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","type":"topic","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"role":"collection","kind":"article","type":"topic","title":"Hummingbird","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","title":"Testing","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"collectionGroup","kind":"article","type":"topic","title":"Router","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"titleInlineContent":[{"text":"documentation","type":"text"}],"type":"link","title":"documentation","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"}}}