{"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},{"type":"text","text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM."}],"type":"paragraph"},{"level":2,"text":"Service Lifecycle","type":"heading","anchor":"Service-Lifecycle"},{"inlineContent":[{"type":"text","text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol "},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},{"type":"text","text":". Internally this needs to call "},{"type":"codeVoice","code":"withGracefulShutdownHandler"},{"type":"text","text":" to handle graceful shutdown when we receive a shutdown signal."}],"type":"paragraph"},{"syntax":"swift","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed."}],"type":"paragraph"},{"syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"],"type":"codeListing"},{"level":2,"text":"Hummingbird Integration","type":"heading","anchor":"Hummingbird-Integration"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Service"},{"text":" and also provides a helper function that constructs the ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":" including the application and then runs it.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let app = Application(router: router)","try await app.runService()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"type":"text","text":" holds an internal "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" and any service you want managed can be added to the internal group using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["var app = Application(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"],"type":"codeListing"},{"level":2,"text":"Managing server startup","type":"heading","anchor":"Managing-server-startup"},{"inlineContent":[{"type":"text","text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"type":"text","text":" you can add processes to run before starting up the server, but while other services are running using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},{"type":"text","text":". You can call "},{"code":"beforeServerStarts","type":"codeVoice"},{"type":"text","text":" multiple times to add multiple processes to be run before we startup the server."}],"type":"paragraph"},{"syntax":"swift","code":["var app = Application(router: router)","app.addServices(dbClient)","app.beforeServerStarts {","    try await dbClient.migrate()","}","try await app.runService()"],"type":"codeListing"},{"inlineContent":[{"text":"Read the Swift Service Lifecycle ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"text":" to find out more.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"kind":"article","metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"role":"article","modules":[{"name":"Hummingbird"}],"roleHeading":"Article","title":"Service Lifecycle"},"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Router","role":"collectionGroup","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic"},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}]},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"title":"Service","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","type":"link","titleInlineContent":[{"code":"Service","type":"codeVoice"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"role":"collection","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"title":"Logging, Metrics and Tracing","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"beforeServerStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","kind":"symbol","title":"beforeServerStarts(perform:)","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","title":"Error Handling","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"url":"\/documentation\/hummingbird\/application","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","kind":"symbol","type":"topic","title":"Application","navigatorTitle":[{"text":"Application","kind":"identifier"}]},"https://github.com/swift-server/swift-service-lifecycle":{"title":"Swift Service Lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"title":"documentation","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","type":"link","titleInlineContent":[{"text":"documentation","type":"text"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"role":"collection","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"title":"Jobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"role":"collectionGroup","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"kind":"symbol","title":"addServices(_:)","role":"symbol","url":"\/documentation\/hummingbird\/application\/addservices(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"},{"text":"...)","kind":"text"}]}}}