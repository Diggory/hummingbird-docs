{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true,"type":"reference"},{"text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Service Lifecycle","anchor":"Service-Lifecycle"},{"inlineContent":[{"text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol ","type":"text"},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","isActive":true},{"text":". Internally this needs to call ","type":"text"},{"type":"codeVoice","code":"withGracefulShutdownHandler"},{"text":" to handle graceful shutdown when we receive a shutdown signal.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"]},{"type":"heading","level":2,"text":"Hummingbird Integration","anchor":"Hummingbird-Integration"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"text":" conforms to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" and also provides a helper function that constructs the ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":" including the application and then runs it.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let app = Application(router: router)","try await app.runService()"]},{"inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":" holds an internal "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" and any service you want managed can be added to the internal group using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"]},{"type":"heading","level":2,"text":"Managing server startup","anchor":"Managing-server-startup"},{"inlineContent":[{"type":"text","text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"type":"text","text":" you can add processes to run before starting up the server, but while other services are running using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","type":"reference","isActive":true},{"type":"text","text":". You can call "},{"type":"codeVoice","code":"runBeforeServerStart"},{"type":"text","text":" multiple times to add multiple processes to be run before we startup the server."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","app.addServices(dbClient)","app.runBeforeServerStart {","    try await dbClient.migrate()","}","try await app.runService()"]},{"inlineContent":[{"type":"text","text":"Read the Swift Service Lifecycle "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"type":"text","text":" to find out more."}],"type":"paragraph"}]}],"metadata":{"role":"article","modules":[{"name":"Hummingbird"}],"roleHeading":"Article","title":"Service Lifecycle"},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"kind":"article","references":{"https://github.com/swift-server/swift-service-lifecycle":{"titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"Swift Service Lifecycle","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"title":"Error Handling","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"role":"collectionGroup","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"title":"Jobs","type":"topic","url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)","role":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"title":"runBeforeServerStart(_:)"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"titleInlineContent":[{"code":"Service","type":"codeVoice"}],"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","title":"Service","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","role":"collection","url":"\/documentation\/index","type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"role":"symbol","url":"\/documentation\/hummingbird\/application","navigatorTitle":[{"text":"Application","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"topic","title":"Application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"collectionGroup","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"title":"Middleware","type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/routerguide","type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"title":"Encoding and Decoding","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","url":"\/documentation\/hummingbird\/testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","title":"Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}]},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"titleInlineContent":[{"text":"documentation","type":"text"}],"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","title":"documentation","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"role":"symbol","url":"\/documentation\/hummingbird\/application\/addservices(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"topic","title":"addServices(_:)","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"title":"Migrating to Hummingbird v2","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article"}}}