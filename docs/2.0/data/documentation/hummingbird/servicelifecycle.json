{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Hummingbird"}],"title":"Service Lifecycle"},"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides","generated":true}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},{"type":"text","text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM."}]},{"level":2,"anchor":"Service-Lifecycle","type":"heading","text":"Service Lifecycle"},{"type":"paragraph","inlineContent":[{"text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol ","type":"text"},{"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","isActive":true,"type":"reference"},{"text":". Internally this needs to call ","type":"text"},{"type":"codeVoice","code":"withGracefulShutdownHandler"},{"type":"text","text":" to handle graceful shutdown when we receive a shutdown signal."}]},{"type":"codeListing","syntax":"swift","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"]},{"level":2,"anchor":"Hummingbird-Integration","type":"heading","text":"Hummingbird Integration"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference"},{"type":"text","text":" conforms to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" and also provides a helper function that constructs the "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":" including the application and then runs it."}]},{"type":"codeListing","syntax":"swift","code":["let app = Application(router: router)","try await app.runService()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"type":"text","text":" holds an internal "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" and any service you want managed can be added to the internal group using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"]},{"level":2,"anchor":"Managing-server-startup","type":"heading","text":"Managing server startup"},{"type":"paragraph","inlineContent":[{"text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"text":" you can add processes to run before starting up the server, but while other services are running using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","type":"reference","isActive":true},{"text":". You can call ","type":"text"},{"code":"runBeforeServerStart","type":"codeVoice"},{"text":" multiple times to add multiple processes to be run before we startup the server.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","app.addServices(dbClient)","app.runBeforeServerStart {","    try await dbClient.migrate()","}","try await app.runService()"]},{"type":"paragraph","inlineContent":[{"text":"Read the Swift Service Lifecycle ","type":"text"},{"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","type":"reference","isActive":true},{"text":" to find out more.","type":"text"}]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","type":"topic","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","type":"topic","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"url":"\/documentation\/hummingbird\/application\/addservices(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"role":"symbol","title":"addServices(_:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data"},"https://github.com/swift-server/swift-service-lifecycle":{"titleInlineContent":[{"type":"text","text":"Swift Service Lifecycle"}],"title":"Swift Service Lifecycle","type":"link","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"Jobs","url":"\/documentation\/hummingbird\/jobsguide","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","title":"Logging, Metrics and Tracing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"title":"runBeforeServerStart(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"runBeforeServerStart"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","type":"topic","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"titleInlineContent":[{"type":"text","text":"documentation"}],"title":"documentation","type":"link","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Contexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","title":"Migrating to Hummingbird v2","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"url":"\/documentation\/hummingbird\/errorhandling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","kind":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"type":"topic","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"navigatorTitle":[{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"title":"Application","role":"symbol","kind":"symbol"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"titleInlineContent":[{"type":"codeVoice","code":"Service"}],"title":"Service","type":"link","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","url":"\/documentation\/hummingbird\/routerguide","title":"Router","role":"collectionGroup","kind":"article"}}}