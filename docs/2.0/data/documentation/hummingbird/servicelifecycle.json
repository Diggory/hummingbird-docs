{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","interfaceLanguage":"swift"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true,"type":"reference"},{"text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM.","type":"text"}]},{"type":"heading","anchor":"Service-Lifecycle","text":"Service Lifecycle","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol "},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},{"type":"text","text":". Internally this needs to call "},{"type":"codeVoice","code":"withGracefulShutdownHandler"},{"type":"text","text":" to handle graceful shutdown when we receive a shutdown signal."}]},{"type":"codeListing","syntax":"swift","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed."}]},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"]},{"type":"heading","anchor":"Hummingbird-Integration","text":"Hummingbird Integration","level":2},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" and also provides a helper function that constructs the "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" including the application and then runs it."}],"type":"paragraph"},{"code":["let app = Application(router: router)","try await app.runService()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":" holds an internal "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" and any service you want managed can be added to the internal group using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"code":["var app = Application(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"],"syntax":"swift","type":"codeListing"},{"anchor":"Managing-server-startup","type":"heading","level":2,"text":"Managing server startup"},{"inlineContent":[{"text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"text":" you can add processes to run before starting up the server, but while other services are running using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)"},{"text":". You can call ","type":"text"},{"type":"codeVoice","code":"runBeforeServerStart"},{"text":" multiple times to add multiple processes to be run before we startup the server.","type":"text"}],"type":"paragraph"},{"code":["var app = Application(router: router)","app.addServices(dbClient)","app.runBeforeServerStart {","    try await dbClient.migrate()","}","try await app.runService()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Read the Swift Service Lifecycle ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"text":" to find out more.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"metadata":{"title":"Service Lifecycle","modules":[{"name":"Hummingbird"}],"role":"article","roleHeading":"Article"},"seeAlsoSections":[{"title":"Guides","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"collectionGroup","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","url":"\/documentation\/hummingbird\/routerguide","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","role":"collection","url":"\/documentation\/index","type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article"},"https://github.com/swift-server/swift-service-lifecycle":{"title":"Swift Service Lifecycle","type":"link","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","titleInlineContent":[{"type":"text","text":"Swift Service Lifecycle"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"url":"\/documentation\/hummingbird\/testing","title":"Testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"runBeforeServerStart(_:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Application","kind":"identifier"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"url":"\/documentation\/hummingbird\/application","title":"Application","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","navigatorTitle":[{"kind":"identifier","text":"Application"}],"role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"title":"Service","type":"link","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","titleInlineContent":[{"type":"codeVoice","code":"Service"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"url":"\/documentation\/hummingbird\/jobsguide","title":"Jobs","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"kind":"symbol","url":"\/documentation\/hummingbird\/application\/addservices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service"},{"kind":"text","text":"...)"}],"role":"symbol","title":"addServices(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","type":"topic"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"title":"documentation","type":"link","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","titleInlineContent":[{"type":"text","text":"documentation"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"}}}