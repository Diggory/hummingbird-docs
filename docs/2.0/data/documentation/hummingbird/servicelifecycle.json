{"sections":[],"metadata":{"title":"Service Lifecycle","modules":[{"name":"Hummingbird"}],"roleHeading":"Article","role":"article"},"seeAlsoSections":[{"title":"Guides","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"]}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true,"type":"reference"},{"text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Service Lifecycle","anchor":"Service-Lifecycle"},{"inlineContent":[{"text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},{"text":". Internally this needs to call ","type":"text"},{"type":"codeVoice","code":"withGracefulShutdownHandler"},{"text":" to handle graceful shutdown when we receive a shutdown signal.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"],"type":"codeListing"},{"level":2,"type":"heading","text":"Hummingbird Integration","anchor":"Hummingbird-Integration"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" and also provides a helper function that constructs the "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" including the application and then runs it."}],"type":"paragraph"},{"syntax":"swift","code":["let app = HBApplication(router: router)","try await app.runService()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication"},{"type":"text","text":" holds an internal "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" and any service you want managed can be added to the internal group using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["var app = HBApplication(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"],"type":"codeListing"},{"level":2,"type":"heading","text":"Managing server startup","anchor":"Managing-server-startup"},{"inlineContent":[{"type":"text","text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","type":"reference"},{"type":"text","text":" you can add processes to run before starting up the server, but while other services are running using "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/runBeforeServerStart(_:)","type":"reference"},{"type":"text","text":". You can call "},{"code":"runBeforeServerStart","type":"codeVoice"},{"type":"text","text":" multiple times to add multiple processes to be run before we startup the server."}],"type":"paragraph"},{"syntax":"swift","code":["var app = HBApplication(router: router)","app.addServices(dbClient)","app.runBeforeServerStart {","    try await dbClient.migrate()","}","try await app.runService()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Read the Swift Service Lifecycle "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"type":"text","text":" to find out more."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","role":"article","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"url":"\/documentation\/hummingbird\/hbapplication","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"type":"topic","title":"HBApplication","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/addServices(_:)":{"kind":"symbol","title":"addServices(_:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/addServices(_:)","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbapplication\/addservices(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier","text":"Service"},{"kind":"text","text":"...)"}]},"https://github.com/swift-server/swift-service-lifecycle":{"title":"Swift Service Lifecycle","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication/runBeforeServerStart(_:)":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication\/runBeforeServerStart(_:)","role":"symbol","url":"\/documentation\/hummingbird\/hbapplication\/runbeforeserverstart(_:)","title":"runBeforeServerStart(_:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"title":"documentation","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","titleInlineContent":[{"text":"documentation","type":"text"}],"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","role":"collectionGroup","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","title":"Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"type":"topic","role":"article"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"title":"Service","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","titleInlineContent":[{"type":"codeVoice","code":"Service"}],"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic","role":"collectionGroup"}}}