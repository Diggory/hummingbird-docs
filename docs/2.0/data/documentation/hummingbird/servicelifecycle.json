{"metadata":{"title":"Service Lifecycle","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","roleHeading":"Article","modules":[{"name":"Hummingbird"}]},"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides","anchor":"Guides","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference"},{"text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Service-Lifecycle","level":2,"text":"Service Lifecycle"},{"inlineContent":[{"text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},{"type":"text","text":". Internally this needs to call "},{"type":"codeVoice","code":"withGracefulShutdownHandler"},{"type":"text","text":" to handle graceful shutdown when we receive a shutdown signal."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed."}]},{"syntax":"swift","type":"codeListing","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"]},{"level":2,"text":"Hummingbird Integration","type":"heading","anchor":"Hummingbird-Integration"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"text":" conforms to ","type":"text"},{"code":"Service","type":"codeVoice"},{"type":"text","text":" and also provides a helper function that constructs the "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" including the application and then runs it."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let app = Application(router: router)","try await app.runService()"]},{"inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"text":" holds an internal ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":" and any service you want managed can be added to the internal group using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"]},{"level":2,"text":"Managing server startup","type":"heading","anchor":"Managing-server-startup"},{"type":"paragraph","inlineContent":[{"text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"text":" you can add processes to run before starting up the server, but while other services are running using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true,"type":"reference"},{"text":". You can call ","type":"text"},{"type":"codeVoice","code":"beforeServerStarts"},{"type":"text","text":" multiple times to add multiple processes to be run before we startup the server."}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","app.addServices(dbClient)","app.beforeServerStarts {","    try await dbClient.migrate()","}","try await app.runService()"]},{"inlineContent":[{"text":"Read the Swift Service Lifecycle ","type":"text"},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","isActive":true},{"text":" to find out more.","type":"text"}],"type":"paragraph"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"title":"beforeServerStarts(perform:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"title":"Error Handling","type":"topic","kind":"article","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"navigatorTitle":[{"kind":"identifier","text":"Application"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Application","kind":"identifier"}],"url":"\/documentation\/hummingbird\/application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"kind":"symbol","title":"Application","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"kind":"symbol","title":"addServices(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service"},{"text":"...)","kind":"text"}],"abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"url":"\/documentation\/hummingbird\/application\/addservices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata"},"logo.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"url":"\/documentation\/hummingbird","kind":"symbol","title":"Hummingbird","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"type":"link","title":"documentation","titleInlineContent":[{"text":"documentation","type":"text"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"title":"Service","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Service"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","title":"Router","kind":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"url":"\/documentation\/index","kind":"article","title":"Hummingbird","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup","title":"Request Contexts","kind":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"role":"collectionGroup","kind":"article","type":"topic","title":"Jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/jobsguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]},"https://github.com/swift-server/swift-service-lifecycle":{"type":"link","title":"Swift Service Lifecycle","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"}}}