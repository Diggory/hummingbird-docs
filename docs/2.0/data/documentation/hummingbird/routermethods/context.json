{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Context","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"}],"platforms":["Linux"]}]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/routermethods\/context"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods\/Context","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"role":"symbol","required":true,"symbolKind":"associatedtype","externalID":"s:11Hummingbird13RouterMethodsP7ContextQa","roleHeading":"Associated Type","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Context","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"}],"title":"Context","modules":[{"name":"Hummingbird"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/request","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","navigatorTitle":[{"text":"Request","kind":"identifier"}],"kind":"symbol","type":"topic"},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMethods/Context":{"title":"Context","url":"\/documentation\/hummingbird\/routermethods\/context","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"Context","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"RequestContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods\/Context","type":"topic","abstract":[],"role":"symbol","required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","url":"\/documentation\/hummingbird\/routerguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","role":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}],"url":"\/documentation\/hummingbird\/requestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMethods":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterMethods"}],"navigatorTitle":[{"text":"RouterMethods","kind":"identifier"}],"url":"\/documentation\/hummingbird\/routermethods","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","title":"RouterMethods","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"RouterMethods"},{"text":" to add standard router verb (get, post â€¦) methods","type":"text"}],"type":"topic"}}}