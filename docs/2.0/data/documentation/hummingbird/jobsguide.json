{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"]},{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true}],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"},{"text":" that implemeent the job queue using a Redis database or Postgres database.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Setting up a Job queue","level":3,"anchor":"Setting-up-a-Job-queue"},{"inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory that will process four jobs concurrently."}],"type":"paragraph"},{"type":"codeListing","code":["let jobQueue = JobQueue(.memory, numWorkers: 4, logger: logger)"],"syntax":"swift"},{"type":"heading","text":"Creating a Job","level":3,"anchor":"Creating-a-Job"},{"inlineContent":[{"text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Below we define the parameters and the identifier. The parameters need to conform to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":". Note when adding the identifier you are extending "},{"type":"codeVoice","code":"JobIdentifier<JobParameterType>"},{"type":"text","text":" and not just "},{"type":"codeVoice","code":"JobIdentifier"},{"type":"text","text":". The job identifier has the parameters required for the job associated with it, to ensure the correct parameters are passed in when pushing a job request onto the queue."}],"type":"paragraph"},{"type":"codeListing","code":["struct SendEmailJobParameters: Codable, Sendable {","    let to: String","    let subject: String","    let body: String","}","","extension JobIdentifier<SendEmailJobParameters> {","    static let sendEmailJob: Self { \"SendEmail\" }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}],"type":"paragraph"},{"type":"codeListing","code":["jobQueue.registerJob(id: .sendEmailJob) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"syntax":"swift"},{"inlineContent":[{"text":"Now your job is ready to create. Jobs can be queued up using the function ","type":"text"},{"code":"push","type":"codeVoice"},{"text":" on ","type":"text"},{"code":"JobQueue","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(id: .sendEmailJob, .init(","    to: \"john@email.com\",","    subject: \"Test email\",","    body: \"Hello?\"","))"],"syntax":"swift"},{"type":"heading","text":"Job parameters","level":3,"anchor":"Job-parameters"},{"inlineContent":[{"text":"As an alternative to creating a parameter type and separate identifier you can create a type that conforms to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters"},{"text":" to define both the parameters and identifier in one place.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct SendEmailJobParameters: JobParameters {","    static let jobID = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Registering the job will then be done with"}],"type":"paragraph"},{"type":"codeListing","code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"syntax":"swift"},{"inlineContent":[{"text":"And requesting a job be executed is done with","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"],"syntax":"swift"},{"type":"heading","text":"Processing Jobs","level":3,"anchor":"Processing-Jobs"},{"inlineContent":[{"text":"When you create a ","type":"text"},{"code":"JobQueue","type":"codeVoice"},{"text":" the ","type":"text"},{"code":"numWorkers","type":"codeVoice"},{"text":" parameter indicates how many workers you want servicing the job queue. If you want to activate these workers you need to add the job queue to your ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"code":"Application","type":"codeVoice"},{"type":"text","text":" manages"}],"type":"paragraph"},{"type":"codeListing","code":["let app = Application(...)","app.addServices(jobQueue)"],"syntax":"swift"},{"inlineContent":[{"text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"metadata":{"title":"Jobs","roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"HummingbirdJobs"},{"name":"HummingbirdJobsRedis"},{"name":"Hummingbird"},{"name":"HummingbirdJobsPostgres"}]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"title":"Middleware","type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"title":"HummingbirdJobsPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","url":"\/documentation\/hummingbirdjobspostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"Identifier for a Job type","type":"text"}],"title":"JobIdentifier","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","role":"collectionGroup","kind":"article","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"title":"HummingbirdJobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"title":"HummingbirdJobsRedis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","url":"\/documentation\/hummingbirdjobsredis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres/PostgresQueue":{"title":"PostgresQueue","role":"symbol","type":"topic","abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","url":"\/documentation\/hummingbirdjobspostgres\/postgresqueue","navigatorTitle":[{"kind":"identifier","text":"PostgresQueue"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresQueue","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"title":"Service Lifecycle","type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","role":"article","kind":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobDefinition":{"abstract":[{"text":"Job definition type","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/jobdefinition","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobDefinition","kind":"identifier"}],"title":"JobDefinition","navigatorTitle":[{"kind":"identifier","text":"JobDefinition"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","role":"collectionGroup","kind":"article","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","role":"collection","kind":"article","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/RedisQueue":{"type":"topic","title":"RedisQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"RedisQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","role":"symbol","url":"\/documentation\/hummingbirdjobsredis\/redisqueue","navigatorTitle":[{"text":"RedisQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","navigatorTitle":[{"kind":"identifier","text":"JobQueue"}],"title":"JobQueue","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobQueue"}],"type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Job queue","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/jobqueue"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","role":"collectionGroup","kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","role":"collectionGroup","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobParameters":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"Defines job parameters and identifier","type":"text"}],"title":"JobParameters","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobParameters","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","url":"\/documentation\/hummingbirdjobs\/jobparameters","navigatorTitle":[{"kind":"identifier","text":"JobParameters"}]}}}