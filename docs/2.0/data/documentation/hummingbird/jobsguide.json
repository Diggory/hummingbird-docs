{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],"title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Guides","generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Jobs","roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"Hummingbird"},{"name":"HummingbirdJobsPostgres"},{"name":"HummingbirdJobsRedis"},{"name":"HummingbirdJobs"}]},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"},{"type":"text","text":" that implemeent the job queue using a Redis database or Postgres database."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Setting up a Job queue","anchor":"Setting-up-a-Job-queue"},{"inlineContent":[{"text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory that will process four jobs concurrently.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let jobQueue = JobQueue(.memory, numWorkers: 4, logger: logger)"]},{"level":3,"type":"heading","text":"Creating a Job","anchor":"Creating-a-Job"},{"inlineContent":[{"text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Below we define the parameters and the identifier. The parameters need to conform to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":". Note when adding the identifier you are extending ","type":"text"},{"code":"JobIdentifier<JobParameterType>","type":"codeVoice"},{"text":" and not just ","type":"text"},{"code":"JobIdentifier","type":"codeVoice"},{"text":". The job identifier has the parameters required for the job associated with it, to ensure the correct parameters are passed in when pushing a job request onto the queue.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJobParameters: Codable, Sendable {","    let to: String","    let subject: String","    let body: String","}","","extension JobIdentifier<SendEmailJobParameters> {","    static let sendEmailJob: Self { \"SendEmail\" }","}"]},{"inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}],"type":"paragraph"},{"syntax":"swift","code":["jobQueue.registerJob(id: .sendEmailJob) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now your job is ready to create. Jobs can be queued up using the function "},{"code":"push","type":"codeVoice"},{"type":"text","text":" on "},{"code":"JobQueue","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(id: .sendEmailJob, .init(","    to: \"john@email.com\",","    subject: \"Test email\",","    body: \"Hello?\"","))"],"type":"codeListing"},{"anchor":"Job-parameters","text":"Job parameters","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"As an alternative to creating a parameter type and separate identifier you can create a type that conforms to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","type":"reference","isActive":true},{"type":"text","text":" to define both the parameters and identifier in one place."}],"type":"paragraph"},{"syntax":"swift","code":["struct SendEmailJobParameters: JobParameters {","    static let jobID = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"],"type":"codeListing"},{"inlineContent":[{"text":"Registering the job will then be done with","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"type":"codeListing"},{"inlineContent":[{"text":"And requesting a job be executed is done with","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"],"type":"codeListing"},{"anchor":"Processing-Jobs","text":"Processing Jobs","type":"heading","level":3},{"inlineContent":[{"text":"When you create a ","type":"text"},{"type":"codeVoice","code":"JobQueue"},{"text":" the ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" parameter indicates how many workers you want servicing the job queue. If you want to activate these workers you need to add the job queue to your ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" manages"}],"type":"paragraph"},{"syntax":"swift","code":["let app = Application(...)","app.addServices(jobQueue)"],"type":"codeListing"},{"inlineContent":[{"text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","isActive":true},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"],"title":"Reference"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/RedisQueue":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","kind":"symbol","title":"RedisQueue","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RedisQueue"}],"url":"\/documentation\/hummingbirdjobsredis\/redisqueue","abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"navigatorTitle":[{"text":"RedisQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","kind":"symbol","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","type":"topic","title":"Service Lifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobParameters":{"title":"JobParameters","navigatorTitle":[{"kind":"identifier","text":"JobParameters"}],"abstract":[{"type":"text","text":"Defines job parameters and identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobParameters"}],"url":"\/documentation\/hummingbirdjobs\/jobparameters","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","kind":"article","title":"Testing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","role":"collectionGroup","url":"\/documentation\/hummingbird\/routerguide","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"collectionGroup","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","kind":"article","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"type":"topic","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"abstract":[{"text":"Identifier for a Job type","type":"text"}],"title":"JobIdentifier","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/jobidentifier"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueue":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"Job queue"}],"navigatorTitle":[{"text":"JobQueue","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/jobqueue","title":"JobQueue","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"title":"HummingbirdJobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres/PostgresQueue":{"abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"url":"\/documentation\/hummingbirdjobspostgres\/postgresqueue","title":"PostgresQueue","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","navigatorTitle":[{"kind":"identifier","text":"PostgresQueue"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PostgresQueue"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres":{"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"url":"\/documentation\/hummingbirdjobspostgres","title":"HummingbirdJobsPostgres","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"kind":"article","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobDefinition":{"abstract":[{"type":"text","text":"Job definition type"}],"title":"JobDefinition","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition","url":"\/documentation\/hummingbirdjobs\/jobdefinition","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobDefinition","kind":"identifier"}],"navigatorTitle":[{"text":"JobDefinition","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"}}}