{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"]},{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"metadata":{"role":"collectionGroup","roleHeading":"API Collection","modules":[{"name":"Jobs"},{"name":"Hummingbird"},{"name":"JobsPostgres"},{"name":"JobsRedis"}],"title":"Jobs","images":[{"identifier":"logo.png","type":"icon"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","isActive":true},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},{"text":" that implemeent the job queue using a Redis database or Postgres database.","type":"text"}]},{"anchor":"Setting-up-a-Job-queue","text":"Setting up a Job queue","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory that will process four jobs concurrently."}]},{"type":"codeListing","code":["let jobQueue = JobQueue(.memory, numWorkers: 4, logger: logger)"],"syntax":"swift"},{"type":"heading","anchor":"Creating-a-Job","level":3,"text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We use a struct conforming to "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","type":"reference"},{"type":"text","text":" to define the job parameters and identifier."}]},{"type":"codeListing","code":["struct SendEmailJobParameters: JobParameters {","    \/\/\/ jobName is used to create the job identifier. It should be unique","    static let jobName = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}]},{"code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now your job is ready to create. Jobs can be queued up using the function "},{"code":"push","type":"codeVoice"},{"type":"text","text":" on "},{"code":"JobQueue","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Processing Jobs","anchor":"Processing-Jobs"},{"type":"paragraph","inlineContent":[{"text":"When you create a ","type":"text"},{"code":"JobQueue","type":"codeVoice"},{"text":" the ","type":"text"},{"code":"numWorkers","type":"codeVoice"},{"text":" parameter indicates how many jobs you want serviced concurrently by the job queue. If you want to activate these workers you need to add the job queue to your ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or it can be added to the array of services that ","type":"text"},{"type":"codeVoice","code":"Application"},{"text":" manages","type":"text"}]},{"code":["let app = Application(...)","app.addServices(jobQueue)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"},{"text":".","type":"text"}]}],"kind":"content"}],"sections":[],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobDefinition"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"type":"topic","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"title":"JobsPostgres","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","role":"collection","url":"\/documentation\/jobspostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobDefinition":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobDefinition","kind":"identifier"}],"title":"JobDefinition","url":"\/documentation\/jobs\/jobdefinition","navigatorTitle":[{"text":"JobDefinition","kind":"identifier"}],"abstract":[{"text":"Job definition type","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobDefinition","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","type":"topic","title":"Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"title":"Middleware","url":"\/documentation\/hummingbird\/middlewareguide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"type":"topic","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","type":"topic","title":"Router","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","kind":"article","title":"Encoding and Decoding","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobIdentifier":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobIdentifier","url":"\/documentation\/jobs\/jobidentifier","abstract":[{"text":"Identifier for a Job type","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"kind":"symbol","title":"JobIdentifier","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","type":"topic","title":"Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"type":"topic","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobParameters":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobParameters","kind":"identifier"}],"title":"JobParameters","url":"\/documentation\/jobs\/jobparameters","navigatorTitle":[{"text":"JobParameters","kind":"identifier"}],"abstract":[{"text":"Defines job parameters and identifier","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Jobs","url":"\/documentation\/jobs","type":"topic","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","role":"collection"},"logo.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"title":"PostgresJobQueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}],"type":"topic","abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}],"role":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueue":{"role":"symbol","abstract":[{"text":"Job queue","type":"text"}],"url":"\/documentation\/jobs\/jobqueue","title":"JobQueue","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"JobQueue"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"role":"collection","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/jobsredis","title":"JobsRedis","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","kind":"article","title":"Testing","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup","type":"topic","title":"Request Contexts","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","url":"\/documentation\/jobsredis\/redisjobqueue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisJobQueue"}],"abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisJobQueue"}],"title":"RedisJobQueue","kind":"symbol","type":"topic"}}}