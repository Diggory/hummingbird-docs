{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","type":"reference"},{"text":" that implemeent the job queue using a Redis database or Postgres database.","type":"text"}]},{"type":"heading","anchor":"Setting-up-a-Job-queue","level":3,"text":"Setting up a Job queue"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory that will process four jobs concurrently."}]},{"type":"codeListing","syntax":"swift","code":["let jobQueue = JobQueue(.memory, numWorkers: 4, logger: logger)"]},{"type":"heading","anchor":"Creating-a-Job","level":3,"text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job."}]},{"type":"paragraph","inlineContent":[{"text":"Below we define the parameters and the identifier. The parameters need to conform to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":". Note when adding the identifier you are extending ","type":"text"},{"code":"JobIdentifier<JobParameterType>","type":"codeVoice"},{"text":" and not just ","type":"text"},{"code":"JobIdentifier","type":"codeVoice"},{"text":". The job identifier has the parameters required for the job associated with it, to ensure the correct parameters are passed in when pushing a job request onto the queue.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJobParameters: Codable, Sendable {","    let to: String","    let subject: String","    let body: String","}","","extension JobIdentifier<SendEmailJobParameters> {","    static let sendEmailJob: Self { \"SendEmail\" }","}"]},{"type":"paragraph","inlineContent":[{"text":"Then we register the job with a job queue and also provide a closure that executes the job.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["jobQueue.registerJob(id: .sendEmailJob) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"type":"paragraph","inlineContent":[{"text":"Now your job is ready to create. Jobs can be queued up using the function ","type":"text"},{"type":"codeVoice","code":"push"},{"text":" on ","type":"text"},{"type":"codeVoice","code":"JobQueue"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(id: .sendEmailJob, .init(","    to: \"john@email.com\",","    subject: \"Test email\",","    body: \"Hello?\"","))"]},{"type":"heading","anchor":"Job-parameters","level":3,"text":"Job parameters"},{"type":"paragraph","inlineContent":[{"text":"As an alternative to creating a parameter type and separate identifier you can create a type that conforms to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","isActive":true},{"text":" to define both the parameters and identifier in one place.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJobParameters: JobParameters {","    static let jobID = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"]},{"type":"paragraph","inlineContent":[{"text":"Registering the job will then be done with","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And requesting a job be executed is done with"}]},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"]},{"type":"heading","anchor":"Processing-Jobs","level":3,"text":"Processing Jobs"},{"type":"paragraph","inlineContent":[{"text":"When you create a ","type":"text"},{"type":"codeVoice","code":"JobQueue"},{"text":" the ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" parameter indicates how many workers you want servicing the job queue. If you want to activate these workers you need to add the job queue to your ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]},{"type":"paragraph","inlineContent":[{"text":"Or it can be added to the array of jobs that ","type":"text"},{"code":"Application","type":"codeVoice"},{"text":" manages","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let app = Application(...)","app.addServices(jobQueue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue"},{"type":"text","text":"."}]}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"],"title":"Reference"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],"title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true,"title":"Guides"}],"metadata":{"roleHeading":"API Collection","modules":[{"name":"HummingbirdJobsPostgres"},{"name":"HummingbirdJobsRedis"},{"name":"HummingbirdJobs"},{"name":"Hummingbird"}],"role":"collectionGroup","title":"Jobs"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","title":"Service Lifecycle","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","type":"topic","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobParameters":{"url":"\/documentation\/hummingbirdjobs\/jobparameters","title":"JobParameters","role":"symbol","abstract":[{"text":"Defines job parameters and identifier","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobParameters"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JobParameters"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/RedisQueue":{"kind":"symbol","type":"topic","title":"RedisQueue","abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"navigatorTitle":[{"kind":"identifier","text":"RedisQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","role":"symbol","url":"\/documentation\/hummingbirdjobsredis\/redisqueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres/PostgresQueue":{"kind":"symbol","type":"topic","title":"PostgresQueue","abstract":[{"type":"text","text":"Postgres Job queue implementation"}],"navigatorTitle":[{"text":"PostgresQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","role":"symbol","url":"\/documentation\/hummingbirdjobspostgres\/postgresqueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"kind":"symbol","type":"topic","title":"HummingbirdJobsRedis","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","role":"collection","url":"\/documentation\/hummingbirdjobsredis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueue":{"kind":"symbol","type":"topic","title":"JobQueue","abstract":[{"type":"text","text":"Job queue"}],"navigatorTitle":[{"kind":"identifier","text":"JobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","role":"symbol","url":"\/documentation\/hummingbirdjobs\/jobqueue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"kind":"symbol","type":"topic","title":"HummingbirdJobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/jobidentifier","abstract":[{"type":"text","text":"Identifier for a Job type"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"title":"JobIdentifier"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres":{"kind":"symbol","type":"topic","title":"HummingbirdJobsPostgres","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","role":"collection","url":"\/documentation\/hummingbirdjobspostgres"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","type":"topic","title":"Router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobDefinition":{"navigatorTitle":[{"kind":"identifier","text":"JobDefinition"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/jobdefinition","abstract":[{"type":"text","text":"Job definition type"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobDefinition"}],"title":"JobDefinition"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing","type":"topic"}}}