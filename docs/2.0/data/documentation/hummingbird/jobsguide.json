{"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","type":"reference","isActive":true},{"text":" that implemeent the job queue using a Redis database or Postgres database.","type":"text"}],"type":"paragraph"},{"anchor":"Setting-up-Jobs","level":3,"text":"Setting up Jobs","type":"heading"},{"inlineContent":[{"text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let jobQueue = JobQueue(.memory, numWorkers: 1, logger: logger)"]},{"anchor":"Creating-a-Job","level":3,"text":"Creating a Job","type":"heading"},{"inlineContent":[{"type":"text","text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job."}],"type":"paragraph"},{"inlineContent":[{"text":"First we define the parameters and the identifier. The parameters need to conform to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":". Note when adding the identifier you are extending ","type":"text"},{"type":"codeVoice","code":"JobIdentifier<JobParameterType>"},{"text":" and not just ","type":"text"},{"type":"codeVoice","code":"JobIdentifier"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJobParameters: Codable, Sendable {","    let to: String","    let subject: String","    let body: String","}","","extension JobIdentifier<SendEmailJobParameters> {","    static let sendEmailJob: Self { \"SendEmail\" }","}"]},{"inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["jobQueue.registerJob(id: .sendEmailJob) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"inlineContent":[{"type":"text","text":"Now your job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"push"},{"type":"text","text":" on "},{"type":"codeVoice","code":"JobQueue"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(id: .sendEmailJob, .init(","    to: \"john@email.com\",","    subject: \"Test email\",","    body: \"Hello?\"","))"]},{"anchor":"Job-parameters","level":3,"text":"Job parameters","type":"heading"},{"inlineContent":[{"text":"As an alternative to creating a parameter type and separate identifier you can create a type the conforms to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","isActive":true,"type":"reference"},{"text":" to define both the parameters and identifier in one place.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJobParameters: JobParameters {","    static let jobID = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}","","Registering the job will then be done with","","```swift","jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"inlineContent":[{"text":"And requesting a job be executed is done with","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"]},{"anchor":"Processing-Jobs","level":3,"text":"Processing Jobs","type":"heading"},{"inlineContent":[{"text":"When you create a ","type":"text"},{"type":"codeVoice","code":"JobQueue"},{"text":" the ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" parameter indicates how many workers you want servicing the job queue. If you want to activate these workers you need to add the job queue to your ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]},{"inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" manages"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let app = Application(...)","app.addServices(jobQueue)"]},{"inlineContent":[{"text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"],"title":"Reference"}],"kind":"article","metadata":{"modules":[{"name":"HummingbirdJobs"},{"name":"HummingbirdJobsPostgres"},{"name":"HummingbirdJobsRedis"},{"name":"Hummingbird"}],"role":"collectionGroup","title":"Jobs"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],"title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true,"title":"Guides"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","role":"collectionGroup","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/RedisQueue":{"kind":"symbol","navigatorTitle":[{"text":"RedisQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","url":"\/documentation\/hummingbirdjobsredis\/redisqueue","abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"role":"symbol","type":"topic","title":"RedisQueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"role":"collection","type":"topic","title":"HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","role":"collectionGroup","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"title":"Service Lifecycle","type":"topic","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobDefinition":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition","type":"topic","title":"JobDefinition","abstract":[{"type":"text","text":"Job definition type"}],"url":"\/documentation\/hummingbirdjobs\/jobdefinition","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobDefinition"}],"navigatorTitle":[{"kind":"identifier","text":"JobDefinition"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobParameters":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","type":"topic","title":"JobParameters","abstract":[{"type":"text","text":"Defines job parameters and identifier"}],"url":"\/documentation\/hummingbirdjobs\/jobparameters","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobParameters"}],"navigatorTitle":[{"kind":"identifier","text":"JobParameters"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"url":"\/documentation\/hummingbirdjobsredis","type":"topic","title":"HummingbirdJobsRedis","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","type":"topic","title":"HummingbirdJobsPostgres","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"url":"\/documentation\/hummingbirdjobspostgres","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"role":"collection","type":"topic","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"title":"Testing","type":"topic","role":"article","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","type":"topic","title":"JobIdentifier","abstract":[{"type":"text","text":"Identifier for a Job type"}],"url":"\/documentation\/hummingbirdjobs\/jobidentifier","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres/PostgresQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresQueue"}],"title":"PostgresQueue","kind":"symbol","url":"\/documentation\/hummingbirdjobspostgres\/postgresqueue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PostgresQueue"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueue":{"kind":"symbol","role":"symbol","title":"JobQueue","url":"\/documentation\/hummingbirdjobs\/jobqueue","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobQueue"}],"abstract":[{"type":"text","text":"Job queue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","type":"topic","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"title":"Migrating to Hummingbird v2","type":"topic","role":"article","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"title":"Middleware","type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","role":"collectionGroup","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"}}}