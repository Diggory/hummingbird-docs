{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],"title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Guides"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"role":"collectionGroup","title":"Jobs","modules":[{"name":"HummingbirdJobsRedis"},{"name":"HummingbirdJobs"},{"name":"Hummingbird"},{"name":"HummingbirdJobsPostgres"}],"roleHeading":"API Collection"},"sections":[],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","type":"reference","isActive":true},{"text":" that implemeent the job queue using a Redis database or Postgres database.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Setting up a Job queue","type":"heading","anchor":"Setting-up-a-Job-queue"},{"inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory that will process four jobs concurrently."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let jobQueue = JobQueue(.memory, numWorkers: 4, logger: logger)"]},{"level":3,"text":"Creating a Job","type":"heading","anchor":"Creating-a-Job"},{"inlineContent":[{"type":"text","text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job."}],"type":"paragraph"},{"inlineContent":[{"text":"Below we define the parameters and the identifier. The parameters need to conform to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":". Note when adding the identifier you are extending ","type":"text"},{"code":"JobIdentifier<JobParameterType>","type":"codeVoice"},{"text":" and not just ","type":"text"},{"code":"JobIdentifier","type":"codeVoice"},{"text":". The job identifier has the parameters required for the job associated with it, to ensure the correct parameters are passed in when pushing a job request onto the queue.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJobParameters: Codable, Sendable {","    let to: String","    let subject: String","    let body: String","}","","extension JobIdentifier<SendEmailJobParameters> {","    static let sendEmailJob: Self { \"SendEmail\" }","}"]},{"inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["jobQueue.registerJob(id: .sendEmailJob) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"inlineContent":[{"text":"Now your job is ready to create. Jobs can be queued up using the function ","type":"text"},{"code":"push","type":"codeVoice"},{"text":" on ","type":"text"},{"code":"JobQueue","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(id: .sendEmailJob, .init(","    to: \"john@email.com\",","    subject: \"Test email\",","    body: \"Hello?\"","))"]},{"level":3,"text":"Job parameters","type":"heading","anchor":"Job-parameters"},{"inlineContent":[{"type":"text","text":"As an alternative to creating a parameter type and separate identifier you can create a type that conforms to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","isActive":true},{"type":"text","text":" to define both the parameters and identifier in one place."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJobParameters: JobParameters {","    static let jobID = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"]},{"inlineContent":[{"type":"text","text":"Registering the job will then be done with"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"inlineContent":[{"type":"text","text":"And requesting a job be executed is done with"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"]},{"level":3,"text":"Processing Jobs","type":"heading","anchor":"Processing-Jobs"},{"inlineContent":[{"type":"text","text":"When you create a "},{"type":"codeVoice","code":"JobQueue"},{"type":"text","text":" the "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" parameter indicates how many workers you want servicing the job queue. If you want to activate these workers you need to add the job queue to your "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]},{"inlineContent":[{"text":"Or it can be added to the array of jobs that ","type":"text"},{"code":"Application","type":"codeVoice"},{"text":" manages","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let app = Application(...)","app.addServices(jobQueue)"]},{"inlineContent":[{"type":"text","text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"],"title":"Reference"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","title":"Middleware","kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueue":{"navigatorTitle":[{"text":"JobQueue","kind":"identifier"}],"kind":"symbol","title":"JobQueue","role":"symbol","url":"\/documentation\/hummingbirdjobs\/jobqueue","type":"topic","abstract":[{"type":"text","text":"Job queue"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic","title":"Router","kind":"article","url":"\/documentation\/hummingbird\/routerguide","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","url":"\/documentation\/hummingbirdjobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection","title":"HummingbirdJobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"kind":"article","title":"Service Lifecycle","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","title":"Error Handling","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"type":"topic","title":"Hummingbird","kind":"article","url":"\/documentation\/index","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres/PostgresQueue":{"navigatorTitle":[{"kind":"identifier","text":"PostgresQueue"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","abstract":[{"type":"text","text":"Postgres Job queue implementation"}],"type":"topic","title":"PostgresQueue","kind":"symbol","url":"\/documentation\/hummingbirdjobspostgres\/postgresqueue","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","title":"HummingbirdJobsRedis","kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdjobsredis","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobParameters":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","url":"\/documentation\/hummingbirdjobs\/jobparameters","abstract":[{"text":"Defines job parameters and identifier","type":"text"}],"role":"symbol","title":"JobParameters","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobParameters"}],"navigatorTitle":[{"text":"JobParameters","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobDefinition":{"navigatorTitle":[{"text":"JobDefinition","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/jobdefinition","title":"JobDefinition","abstract":[{"text":"Job definition type","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"JobDefinition","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition","role":"symbol","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"url":"\/documentation\/hummingbirdjobs\/jobidentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"title":"JobIdentifier","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","role":"symbol","kind":"symbol","abstract":[{"text":"Identifier for a Job type","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/RedisQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","title":"RedisQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisQueue"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdjobsredis\/redisqueue","abstract":[{"text":"Redis implementation of job queue driver","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"RedisQueue"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","title":"Logging, Metrics and Tracing","role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","title":"Hummingbird","kind":"symbol","url":"\/documentation\/hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","title":"Testing","kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","title":"Encoding and Decoding","kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","title":"Migrating to Hummingbird v2","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"type":"topic","title":"HummingbirdJobsPostgres","kind":"symbol","url":"\/documentation\/hummingbirdjobspostgres","role":"collection"}}}