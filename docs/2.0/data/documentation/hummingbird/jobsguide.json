{"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"]}],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"]},{"title":"Guides","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. HummingbirdJobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres","isActive":true,"type":"reference"},{"text":" that implemeent the job queue using a Redis database or Postgres database.","type":"text"}]},{"type":"heading","anchor":"Setting-up-Jobs","text":"Setting up Jobs","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"code":["let jobQueue = JobQueue(.memory, numWorkers: 1, logger: logger)"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Creating-a-Job","text":"Creating a Job","level":3},{"type":"paragraph","inlineContent":[{"text":"First you must define your job. A job consists of three things, an identifier, the parameters required to run the job and a function that executes the job.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First we define the parameters and the identifier. The parameters need to conform to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":". Note when adding the identifier you are extending "},{"type":"codeVoice","code":"JobIdentifier<JobParameterType>"},{"type":"text","text":" and not just "},{"type":"codeVoice","code":"JobIdentifier"},{"type":"text","text":"."}]},{"code":["struct SendEmailJobParameters: Codable, Sendable {","    let to: String","    let subject: String","    let body: String","}","","extension JobIdentifier<SendEmailJobParameters> {","    static let sendEmailJob: Self { \"SendEmail\" }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then we register the job with a job queue and also provide a closure that executes the job.","type":"text"}]},{"code":["jobQueue.registerJob(id: .sendEmailJob) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now your job is ready to create. Jobs can be queued up using the function "},{"code":"push","type":"codeVoice"},{"type":"text","text":" on "},{"code":"JobQueue","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(id: .sendEmailJob, .init(","    to: \"john@email.com\",","    subject: \"Test email\",","    body: \"Hello?\"","))"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Job-parameters","text":"Job parameters","level":3},{"type":"paragraph","inlineContent":[{"text":"As an alternative to creating a parameter type and separate identifier you can create a type the conforms to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","isActive":true},{"text":" to define both the parameters and identifier in one place.","type":"text"}]},{"code":["struct SendEmailJobParameters: JobParameters {","    static let jobID = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}","","Registering the job will then be done with","","```swift","jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And requesting a job be executed is done with","type":"text"}]},{"code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Processing-Jobs","text":"Processing Jobs","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you create a "},{"code":"JobQueue","type":"codeVoice"},{"type":"text","text":" the "},{"code":"numWorkers","type":"codeVoice"},{"type":"text","text":" parameter indicates how many workers you want servicing the job queue. If you want to activate these workers you need to add the job queue to your "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" manages"}]},{"code":["let app = Application(...)","app.addServices(jobQueue)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue","isActive":true},{"type":"text","text":"."}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"kind":"article","metadata":{"role":"collectionGroup","title":"Jobs","roleHeading":"API Collection","modules":[{"name":"Hummingbird"},{"name":"HummingbirdJobsPostgres"},{"name":"HummingbirdJobs"},{"name":"HummingbirdJobsRedis"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/RedisQueue":{"url":"\/documentation\/hummingbirdjobsredis\/redisqueue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisQueue"}],"abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/RedisQueue","title":"RedisQueue","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres/PostgresQueue":{"navigatorTitle":[{"text":"PostgresQueue","kind":"identifier"}],"role":"symbol","title":"PostgresQueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"Postgres Job queue implementation"}],"type":"topic","url":"\/documentation\/hummingbirdjobspostgres\/postgresqueue","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres\/PostgresQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobParameters":{"url":"\/documentation\/hummingbirdjobs\/jobparameters","title":"JobParameters","type":"topic","navigatorTitle":[{"text":"JobParameters","kind":"identifier"}],"abstract":[{"type":"text","text":"Defines job parameters and identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobParameters"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobParameters","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","title":"Hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"role":"collection","title":"HummingbirdJobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","url":"\/documentation\/hummingbirdjobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","kind":"article","title":"Migrating to Hummingbird v2","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","title":"Encoding and Decoding","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobDefinition":{"navigatorTitle":[{"text":"JobDefinition","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobDefinition","kind":"identifier"}],"title":"JobDefinition","url":"\/documentation\/hummingbirdjobs\/jobdefinition","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Job definition type","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobDefinition"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"url":"\/documentation\/hummingbirdjobs\/jobidentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"role":"symbol","abstract":[{"text":"Identifier for a Job type","type":"text"}],"kind":"symbol","title":"JobIdentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","title":"Service Lifecycle","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueue":{"abstract":[{"type":"text","text":"Job queue"}],"navigatorTitle":[{"kind":"identifier","text":"JobQueue"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/jobqueue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueue"}],"title":"JobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueue","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","title":"Request Contexts","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","role":"collectionGroup","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"type":"topic","url":"\/documentation\/hummingbird\/routerguide","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsPostgres":{"title":"HummingbirdJobsPostgres","url":"\/documentation\/hummingbirdjobspostgres","role":"collection","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsPostgres"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","title":"Testing","type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","kind":"article"}}}