{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"testingSetup"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"test"},{"text":": (","kind":"text"},{"text":"any","kind":"keyword"},{"kind":"text","text":" "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","text":"TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"name":"testingSetup","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Indicates which type of testing framework we want"}]}]},{"name":"test","content":[{"type":"paragraph","inlineContent":[{"text":"Test function","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"You use ","type":"text"},{"type":"codeVoice","code":"test"},{"type":"text","text":" and "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" to test applications. You can either test using"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":".router","type":"codeVoice"},{"text":" test framework which sends requests directly to the router for testing your code or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".live"},{"text":" or ","type":"text"},{"code":".ahc","type":"codeVoice"},{"text":" frameworks which both run live servers to pass requests to, but provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a single connection HTTP client or AsyncHTTPClient as a client respectively . The "},{"code":".router","type":"codeVoice"},{"text":" test","type":"text"},{"type":"text","text":" "},{"text":"framework is quicker and doesnâ€™t require setting up a full server but will only test code run","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from request generation onwards."}]},{"inlineContent":[{"text":"The example below is using the ","type":"text"},{"type":"codeVoice","code":".router"},{"type":"text","text":" framework to test"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let router = Router()","router.get(\"\/hello\") { _ in","    return \"hello\"","}","let app = Application(router: router)","app.test(.router) { client in","    \/\/ does my app return \"hello\" in the body for this route","    client.execute(uri: \"\/hello\", method: .GET) { response in","        XCTAssertEqual(String(buffer: response.body), \"hello\")","    }","}"]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Test ","type":"text"},{"type":"codeVoice","code":"Application"}],"variants":[{"paths":["\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"],"anchor":"Test-Setup","generated":true,"title":"Test Setup"}],"kind":"symbol","sections":[],"metadata":{"externalID":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF","role":"symbol","modules":[{"name":"Hummingbird"}],"title":"test(_:_:)","extendedModule":"Hummingbird","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"text":"TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"type":"topic","title":"TestClientProtocol","navigatorTitle":[{"text":"TestClientProtocol","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"text":"Protocol for client used by HummingbirdTesting","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","url":"\/documentation\/hummingbirdtesting\/testclientprotocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestClientProtocol","kind":"identifier"}]},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","abstract":[{"text":"Type of test framework","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"TestingSetup","kind":"identifier"}],"url":"\/documentation\/hummingbirdtesting\/testingsetup","title":"TestingSetup","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TestingSetup","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestHTTPScheme"}],"navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"url":"\/documentation\/hummingbirdtesting\/testhttpscheme","kind":"symbol","abstract":[{"text":"HTTP Scheme to use with AsyncHTTPClient test framework","type":"text"}],"title":"TestHTTPScheme","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","title":"test(_:_:)","abstract":[{"type":"text","text":"Test "},{"code":"Application","type":"codeVoice"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdtesting","title":"HummingbirdTesting","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"}}}