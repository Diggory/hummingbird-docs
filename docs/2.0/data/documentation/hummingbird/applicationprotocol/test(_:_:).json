{"sections":[],"metadata":{"symbolKind":"method","modules":[{"name":"Hummingbird"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","text":"TestClientProtocol"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp"}],"roleHeading":"Instance Method","extendedModule":"Hummingbird","role":"symbol","externalID":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF","title":"test(_:_:)"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"],"generated":true,"title":"Test Setup"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"testingSetup"},{"kind":"text","text":": "},{"preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","text":"TestingSetup"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"test"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","text":"TestClientProtocol"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp","kind":"typeIdentifier","text":"Value"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"indicates which type of testing framework we want","type":"text"}]}],"name":"testing"},{"content":[{"inlineContent":[{"text":"configuration of application","type":"text"}],"type":"paragraph"}],"name":"configuration"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"codeVoice","code":"test"},{"type":"text","text":" and "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" to test applications. You can either test using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".router"},{"type":"text","text":" test framework which sends requests directly to the router for testing your code or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".live"},{"type":"text","text":" or "},{"type":"codeVoice","code":".ahc"},{"type":"text","text":" frameworks which both run live servers to pass requests to, but provide"},{"type":"text","text":" "},{"type":"text","text":"a single connection HTTP client or AsyncHTTPClient as a client respectively . The "},{"type":"codeVoice","code":".router"},{"type":"text","text":" test"},{"type":"text","text":" "},{"type":"text","text":"framework is quicker and doesnâ€™t require setting up a full server but will only test code run"},{"type":"text","text":" "},{"type":"text","text":"from request generation onwards."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below is using the "},{"type":"codeVoice","code":".router"},{"type":"text","text":" framework to test"}]},{"code":["let router = Router()","router.get(\"\/hello\") { _ in","    return \"hello\"","}","let app = Application(router: router)","app.test(.router) { client in","    \/\/ does my app return \"hello\" in the body for this route","    client.execute(uri: \"\/hello\", method: .GET) { response in","        XCTAssertEqual(String(buffer: response.body), \"hello\")","    }","}"],"syntax":"swift","type":"codeListing"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"]]},"variants":[{"paths":["\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Test ","type":"text"},{"code":"Application","type":"codeVoice"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"kind":"symbol","title":"TestHTTPScheme","abstract":[{"type":"text","text":"HTTP Scheme to use with AsyncHTTPClient test framework"}],"navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestHTTPScheme","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","type":"topic","url":"\/documentation\/hummingbirdtesting\/testhttpscheme","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TestClientProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","navigatorTitle":[{"text":"TestClientProtocol","kind":"identifier"}],"title":"TestClientProtocol","kind":"symbol","abstract":[{"type":"text","text":"Protocol for client used by HummingbirdTesting"}],"url":"\/documentation\/hummingbirdtesting\/testclientprotocol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"role":"symbol","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"test","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"TestingSetup","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"text":", (","kind":"text"},{"text":"any","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp","kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","title":"test(_:_:)","abstract":[{"text":"Test ","type":"text"},{"code":"Application","type":"codeVoice"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","title":"HummingbirdTesting","kind":"symbol","url":"\/documentation\/hummingbirdtesting","abstract":[{"text":"Test framework for Hummingbird.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestingSetup","kind":"identifier"}],"navigatorTitle":[{"text":"TestingSetup","kind":"identifier"}],"url":"\/documentation\/hummingbirdtesting\/testingsetup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","role":"symbol","kind":"symbol","title":"TestingSetup","abstract":[{"text":"Type of test framework","type":"text"}],"type":"topic"}}}