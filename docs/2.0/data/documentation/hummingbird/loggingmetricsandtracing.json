{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Apple has developed packages for each of the observability systems (","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-log","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-metrics","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-distributed-tracing","isActive":true,"type":"reference"},{"text":"). They provide a consistent API while not defining how the backend is implemented. With these it is possible to add observability to your own libraries without commiting to a certain implementation of each system.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Hummingbird has middleware for each of these systems. As these are provided as middleware you can add these to your application as and when you need them.","type":"text"}],"type":"paragraph"},{"text":"Logging","level":2,"type":"heading","anchor":"Logging"},{"type":"paragraph","inlineContent":[{"text":"Logs provides a record of discrete events over time. Each event has a timestamp, description and an array of metadata. Hummingbird automatically does some logging of events. You can control the fidelity of your logging by setting the application log level eg","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["application.logger.logLevel = .debug"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want a record of every request to the server you can add the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","isActive":true,"type":"reference"},{"type":"text","text":" middleware. You can control at what "},{"code":"logLevel","type":"codeVoice"},{"type":"text","text":" the request logging will occur and whether it includes information about each requests headers. eg"}]},{"syntax":"swift","type":"codeListing","code":["application.middleware.add(HBLogRequestsMiddleware(.info, includeHeaders: false))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you would like to add your own logging, or implement your own logging backend you can find out more "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/apple\/swift-log\/main\/documentation\/logging"},{"type":"text","text":". A complete list of logging implementations can be found "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-log#selecting-a-logging-backend-implementation-applications-only"},{"type":"text","text":"."}]},{"anchor":"Metrics","type":"heading","text":"Metrics","level":2},{"type":"paragraph","inlineContent":[{"text":"Metrics provides an overview of how your application is working over time. It allows you to create visualisations of the state of your application.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The middleware "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","isActive":true},{"type":"text","text":" will record how many requests are being made to each route, how long they took and how many failed. To add recording of these metrics to your Hummingbird application you need to add this middleware and bootstrap your chosen metrics backend. Below is an example setting up recording metrics with Prometheus, using the package "},{"type":"reference","identifier":"https:\/\/github.com\/swift-server-community\/SwiftPrometheus","isActive":true},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["import Metrics","import Prometheus","","\/\/ Bootstrap Prometheus","let prometheus = PrometheusClient()","MetricsSystem.bootstrap(PrometheusMetricsFactory(client: prometheus))","","\/\/ Add metrics middleware","application.middleware.add(HBMetricsMiddleware())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you would like to record your own metrics, or implement your own metrics backed you can find out more "},{"identifier":"https:\/\/swiftpackageindex.com\/apple\/swift-metrics\/main\/documentation\/coremetrics","type":"reference","isActive":true},{"type":"text","text":". A list of metrics backend implementations can be found "},{"identifier":"https:\/\/github.com\/apple\/swift-metrics#selecting-a-metrics-backend-implementation-applications-only","type":"reference","isActive":true},{"type":"text","text":"."}]},{"anchor":"Tracing","type":"heading","text":"Tracing","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tracing is used to understand how data flows through an applicationâ€™s various services."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The middleware "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","isActive":true},{"type":"text","text":" will record spans for each request made to your application and attach the relevant metadata about request and responses. To add tracing to your Hummingbird application you need to add this middleware and bootstrap your chosen tracing backend. Below is an example setting up tracing using the Open Telemetry package "},{"type":"reference","identifier":"https:\/\/github.com\/slashmo\/swift-otel","isActive":true},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["import OpenTelemetry","import Tracing","","\/\/ Bootstrap Open Telemetry","let otel = OTel(serviceName: \"example\", eventLoopGroup: application.eventLoopGroup)","try otel.start().wait()","InstrumentationSystem.bootstrap(otel.tracer())","","\/\/ Add tracing middleware","application.middleware.add(HBTracingMiddleware(recordingHeaders: [\"content-type\", \"content-length\"]))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift implementation of tracing relies on task local variables to propagate the tracing context down the callstack. The internals of Hummingbird are EventLoop based so task local variables may not be propagated correctly. Instead we use an "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","type":"reference"},{"type":"text","text":" extension to propagate the context. When you move between async and EventLoopFuture based functions it will move the context between task local variables and the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","type":"reference"},{"type":"text","text":" extension."}]},{"type":"paragraph","inlineContent":[{"text":"There are different APIs for setting up spans and setting the tracing context when in async or EventLoopFuture based functions. To set the tracing context in an async function use ","type":"text"},{"type":"codeVoice","code":"ServiceContext.withValue"},{"text":" while in an EventLoop based middleware use ","type":"text"},{"type":"codeVoice","code":"HBRequest.withServiceContext"},{"text":". To setup a new span in an async function use ","type":"text"},{"type":"codeVoice","code":"InstrumentationSystem.tracer.withSpan"},{"text":" while in an EventLoop based middleware use ","type":"text"},{"type":"codeVoice","code":"HBRequest.withSpan"},{"text":". If you want the tracing context to propagate to the services you are using from your route handlers then these need to be Swift concurrency based.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you would like to find out more about tracing, or implement your own tracing backend you can find out more "},{"identifier":"https:\/\/swiftpackageindex.com\/apple\/swift-distributed-tracing\/main\/documentation\/tracing","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware"],"title":"Reference"}],"kind":"article","metadata":{"modules":[{"name":"Hummingbird"}],"title":"Logging, Metrics and Tracing","role":"collectionGroup"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Guides"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","interfaceLanguage":"swift"},"references":{"https://github.com/apple/swift-log":{"titleInlineContent":[{"text":"swift-log","type":"text"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-log","title":"swift-log","identifier":"https:\/\/github.com\/apple\/swift-log"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"title":"HBRequest","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/hbrequest"},"https://github.com/apple/swift-metrics#selecting-a-metrics-backend-implementation-applications-only":{"titleInlineContent":[{"text":"here","type":"text"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-metrics#selecting-a-metrics-backend-implementation-applications-only","title":"here","identifier":"https:\/\/github.com\/apple\/swift-metrics#selecting-a-metrics-backend-implementation-applications-only"},"https://github.com/apple/swift-log#selecting-a-logging-backend-implementation-applications-only":{"titleInlineContent":[{"text":"here","type":"text"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-log#selecting-a-logging-backend-implementation-applications-only","title":"here","identifier":"https:\/\/github.com\/apple\/swift-log#selecting-a-logging-backend-implementation-applications-only"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","kind":"article","title":"Persistent data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"title":"Encoding and Decoding","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","title":"Hummingbird","role":"collection","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Context","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/requestcontext"},"https://swiftpackageindex.com/apple/swift-distributed-tracing/main/documentation/tracing":{"titleInlineContent":[{"text":"here","type":"text"}],"type":"link","url":"https:\/\/swiftpackageindex.com\/apple\/swift-distributed-tracing\/main\/documentation\/tracing","title":"here","identifier":"https:\/\/swiftpackageindex.com\/apple\/swift-distributed-tracing\/main\/documentation\/tracing"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","title":"Hummingbird","role":"collection","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"https://github.com/apple/swift-distributed-tracing":{"titleInlineContent":[{"text":"swift-distributed-tracing","type":"text"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-distributed-tracing","title":"swift-distributed-tracing","identifier":"https:\/\/github.com\/apple\/swift-distributed-tracing"},"https://swiftpackageindex.com/apple/swift-log/main/documentation/logging":{"titleInlineContent":[{"text":"here","type":"text"}],"type":"link","url":"https:\/\/swiftpackageindex.com\/apple\/swift-log\/main\/documentation\/logging","title":"here","identifier":"https:\/\/swiftpackageindex.com\/apple\/swift-log\/main\/documentation\/logging"},"https://github.com/swift-server-community/SwiftPrometheus":{"titleInlineContent":[{"text":"SwiftPrometheus","type":"text"}],"type":"link","url":"https:\/\/github.com\/swift-server-community\/SwiftPrometheus","title":"SwiftPrometheus","identifier":"https:\/\/github.com\/swift-server-community\/SwiftPrometheus"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBTracingMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","url":"\/documentation\/hummingbird\/hbtracingmiddleware","role":"symbol","type":"topic","navigatorTitle":[{"text":"HBTracingMiddleware","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBTracingMiddleware","kind":"identifier"}],"title":"HBTracingMiddleware","kind":"symbol","abstract":[{"text":"Middleware creating Distributed Tracing spans for each request.","type":"text"}]},"https://github.com/apple/swift-metrics":{"titleInlineContent":[{"text":"swift-metrics","type":"text"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-metrics","title":"swift-metrics","identifier":"https:\/\/github.com\/apple\/swift-metrics"},"https://swiftpackageindex.com/apple/swift-metrics/main/documentation/coremetrics":{"titleInlineContent":[{"text":"here","type":"text"}],"type":"link","url":"https:\/\/swiftpackageindex.com\/apple\/swift-metrics\/main\/documentation\/coremetrics","title":"here","identifier":"https:\/\/swiftpackageindex.com\/apple\/swift-metrics\/main\/documentation\/coremetrics"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","kind":"article","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMetricsMiddleware":{"url":"\/documentation\/hummingbird\/hbmetricsmiddleware","title":"HBMetricsMiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMetricsMiddleware","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBMetricsMiddleware","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Middleware recording metrics for each request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","title":"Router"},"https://github.com/slashmo/swift-otel":{"titleInlineContent":[{"text":"swift-otel","type":"text"}],"type":"link","url":"https:\/\/github.com\/slashmo\/swift-otel","title":"swift-otel","identifier":"https:\/\/github.com\/slashmo\/swift-otel"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBLogRequestsMiddleware":{"url":"\/documentation\/hummingbird\/hblogrequestsmiddleware","title":"HBLogRequestsMiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBLogRequestsMiddleware","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBLogRequestsMiddleware","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Middleware outputting to log for every call to server","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","role":"symbol"}}}