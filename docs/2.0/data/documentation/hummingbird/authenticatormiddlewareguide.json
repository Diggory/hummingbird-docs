{"sections":[],"kind":"article","metadata":{"roleHeading":"Article","title":"Authenticator Middleware","role":"article","images":[{"identifier":"logo.png","type":"icon"}]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware"},{"type":"text","text":". This requires you implement the function "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","type":"reference"},{"text":" that returns a value conforming to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":". When you return valid authentication data from your "},{"code":"authenticate","type":"codeVoice"},{"type":"text","text":" function it is recorded in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property"},{"type":"text","text":" member of your request context."}],"type":"paragraph"},{"anchor":"Usage","type":"heading","level":2,"text":"Usage"},{"inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct, otherwise it returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> Identity? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"]},{"inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["router.add(middleware: BasicAuthenticator())"],"type":"codeListing"},{"inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"context.identity"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    let user = context.requireIdentity()","    return user","}"],"type":"codeListing"},{"inlineContent":[{"text":"You can require that that authentication was successful and authentication data is available by adding the middleware ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},{"type":"text","text":" after your authentication middleware"}],"type":"paragraph"},{"code":["router.addMiddleware {","    BasicAuthenticator()","    IsAuthenticatedMiddleware()","}"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"title":"Related Documentation"},{"title":"Authentication","anchor":"Authentication","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddlewareGuide"},"abstract":[{"type":"text","text":"Request authentication middleware"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"role":"symbol","type":"topic","title":"AuthRequestContext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/identity-swift.property":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"identity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdAuth0B14RequestContextP8IdentityQa","text":"Identity","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext\/identity-swift.property","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","kind":"symbol","abstract":[{"type":"text","text":"The authenticated identity"}],"title":"identity","role":"symbol","required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"role":"article","title":"One Time Passwords","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","url":"\/documentation\/hummingbird\/onetimepasswords","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Hummingbird Documentation","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AuthenticatorMiddleware"}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","role":"symbol","title":"AuthenticatorMiddleware"},"logo.png":{"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)":{"title":"authenticate(request:context:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","kind":"symbol","type":"topic","required":true,"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"authenticate","kind":"identifier"},{"kind":"text","text":"("},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Identity","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP8IdentityQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Called by middleware to see if request can authenticate."}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"abstract":[{"text":"Middleware returning 401 for unauthenticated requests","type":"text"}],"title":"IsAuthenticatedMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"url":"\/documentation\/hummingbird\/sessions","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","title":"Sessions","abstract":[{"text":"Session based authentication","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","role":"article"}}}