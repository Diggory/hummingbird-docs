{"sections":[],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"anchor":"Related-Documentation"},{"title":"Authentication","generated":true,"anchor":"Authentication","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"]}],"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"Authenticator Middleware","roleHeading":"Article","role":"article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Request authentication middleware","type":"text"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","isActive":true},{"text":". This requires you implement the function ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","isActive":true,"type":"reference"},{"text":" that returns a value conforming to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference","isActive":true},{"text":". When you return valid authentication data from your ","type":"text"},{"type":"codeVoice","code":"authenticate"},{"type":"text","text":" function it is recorded in the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","isActive":true,"type":"reference"},{"type":"text","text":" member of your request context."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Usage","text":"Usage"},{"inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"code":"User","type":"codeVoice"},{"type":"text","text":" struct, otherwise it returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> Identity? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"type":"codeListing","code":["router.add(middleware: BasicAuthenticator())"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"code":"context.identity","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    let user = context.requireIdentity()","    return user","}"]},{"type":"paragraph","inlineContent":[{"text":"You can require that that authentication was successful and authentication data is available by adding the middleware ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},{"text":" after your authentication middleware","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["router.addMiddleware {","    BasicAuthenticator()","    IsAuthenticatedMiddleware()","}"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddlewareGuide"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","title":"Sessions","url":"\/documentation\/hummingbird\/sessions","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Session based authentication","type":"text"}],"role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)":{"type":"topic","kind":"symbol","abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"required":true,"title":"authenticate(request:context:)","role":"symbol","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"authenticate"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"request"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Context","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Identity","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP8IdentityQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","title":"AuthenticatorMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AuthenticatorMiddleware","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AuthenticatorMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"type":"topic","kind":"symbol","abstract":[{"text":"Middleware returning 401 for unauthenticated requests","type":"text"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","title":"IsAuthenticatedMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}]},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/identity-swift.property":{"type":"topic","title":"identity","required":true,"role":"symbol","abstract":[{"type":"text","text":"The authenticated identity"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"identity"},{"kind":"text","text":": "},{"text":"Identity","preciseIdentifier":"s:15HummingbirdAuth0B14RequestContextP8IdentityQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext\/identity-swift.property"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"type":"topic","role":"collection","kind":"article","title":"Hummingbird Documentation","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AuthRequestContext"}],"kind":"symbol","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"type":"topic","title":"AuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","url":"\/documentation\/hummingbird\/onetimepasswords","role":"article","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"title":"One Time Passwords","type":"topic"}}}