{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Request Context"},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":", "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","isActive":true},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","isActive":true},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let router = HBRouter(context: MyContext.self)"],"type":"codeListing"},{"level":2,"type":"heading","text":"Creating a context type","anchor":"Creating-a-context-type"},{"inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" and a single member variable"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","    }","}"],"type":"codeListing"},{"level":2,"type":"heading","text":"Encoding\/Decoding","anchor":"EncodingDecoding"},{"inlineContent":[{"type":"text","text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By replacing the contents of the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" above with the following you have setup JSON decoding and encoding of requests and responses."}],"type":"paragraph"},{"syntax":"swift","code":["self.coreContext = .init(","    requestDecoder: JSONDecoder(),","    responseEncoder: JSONEncoder(),","    allocator: allocator,","    logger: logger"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Passing data forward","anchor":"Passing-data-forward"},{"inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","    var additionalData: String?","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: HBMiddlewareProtocol {","    func handle(","        _ request: HBRequest, ","        context: MyRequestContext, ","        next: (HBRequest, MyRequestContext) async throws -> HBResponse","    ) async throws -> HBResponse {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now anything run after ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"text":" can access the ","type":"text"},{"type":"codeVoice","code":"additionalData"},{"text":" set in ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Authentication Middleware","anchor":"Authentication-Middleware"},{"inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public struct MyRequestContext: HBAuthRequestContextProtocol {","    public var coreContext: HBCoreRequestContext","    \/\/ required by HBAuthRequestContextProtocol","    public var auth: HBLoginCache","","    public init(","        allocator: ByteBufferAllocator,","        logger: Logger","    ) {","        self.coreContext = .init(allocator: allocator, logger: logger)","        self.auth = .init()","    }","}"],"type":"codeListing"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"type":"text","text":" does provide "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext"},{"type":"text","text":": a default implementation of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},{"type":"text","text":"."}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","kind":"article","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContext":{"title":"HBAuthRequestContext","type":"topic","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContext"}],"role":"symbol","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","kind":"article","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"HBBasicRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"HBBasicRequestContext","url":"\/documentation\/hummingbird\/hbbasicrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"title":"HBRouter","url":"\/documentation\/hummingbird\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"title":"HBRequestContext","url":"\/documentation\/hummingbird\/hbrequestcontext","abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}],"navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthRequestContextProtocol"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContextProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","role":"symbol","title":"HBAuthRequestContextProtocol","kind":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","kind":"symbol","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","role":"collectionGroup","title":"Error Handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","kind":"article","role":"collectionGroup"}}}