{"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Request Context"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext"},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ByteBufferAllocator"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let router = HBRouter(context: MyContext.self)"],"type":"codeListing"},{"level":2,"anchor":"Creating-a-context-type","type":"heading","text":"Creating a context type"},{"inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" and a single member variable"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","    }","}"],"type":"codeListing"},{"level":2,"anchor":"EncodingDecoding","type":"heading","text":"Encoding\/Decoding"},{"inlineContent":[{"type":"text","text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By replacing the contents of the "},{"code":"init","type":"codeVoice"},{"type":"text","text":" above with the following you have setup JSON decoding and encoding of requests and responses."}],"type":"paragraph"},{"syntax":"swift","code":["self.coreContext = .init(","    requestDecoder: JSONDecoder(),","    responseEncoder: JSONEncoder(),","    allocator: allocator,","    logger: logger"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Passing-data-forward","type":"heading","text":"Passing data forward"},{"inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","    var additionalData: String?","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: HBMiddlewareProtocol {","    func handle(","        _ request: HBRequest, ","        context: MyRequestContext, ","        next: (HBRequest, MyRequestContext) async throws -> HBResponse","    ) async throws -> HBResponse {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now anything run after "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":" can access the "},{"code":"additionalData","type":"codeVoice"},{"type":"text","text":" set in "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Authentication-Middleware","type":"heading","text":"Authentication Middleware"},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["public struct MyRequestContext: HBAuthRequestContextProtocol {","    public var coreContext: HBCoreRequestContext","    \/\/ required by HBAuthRequestContextProtocol","    public var auth: HBLoginCache","","    public init(","        allocator: ByteBufferAllocator,","        logger: Logger","    ) {","        self.coreContext = .init(allocator: allocator, logger: logger)","        self.auth = .init()","    }","}"],"type":"codeListing"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"text":" does provide ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","type":"reference","isActive":true},{"text":": a default implementation of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true,"title":"Guides"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","interfaceLanguage":"swift"},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"],"title":"Reference"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBasicRequestContext"}],"url":"\/documentation\/hummingbird\/hbbasicrequestcontext","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"title":"HBBasicRequestContext","navigatorTitle":[{"kind":"identifier","text":"HBBasicRequestContext"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestContext"}],"url":"\/documentation\/hummingbird\/hbrequestcontext","abstract":[{"type":"text","text":"Protocol for a request context that can be created from a NIO Channel"}],"title":"HBRequestContext","navigatorTitle":[{"kind":"identifier","text":"HBRequestContext"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"role":"collectionGroup","title":"Encoding and Decoding","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","type":"topic","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthRequestContext"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontext","abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"HBAuthRequestContext","navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContext"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/router","title":"Router","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird","type":"topic","kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","url":"\/documentation\/hummingbirdauth","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthRequestContextProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContextProtocol"}],"kind":"symbol","role":"symbol","type":"topic","title":"HBAuthRequestContextProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","kind":"symbol","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"url":"\/documentation\/hummingbird\/hbrouter","title":"HBRouter","type":"topic","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing"}}}