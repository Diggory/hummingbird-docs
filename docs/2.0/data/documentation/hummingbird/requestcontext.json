{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true,"title":"Guides"}],"sections":[],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":", "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}]},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","type":"reference","isActive":true},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","type":"reference","isActive":true},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}]},{"type":"codeListing","code":["let router = HBRouter(context: MyContext.self)"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Creating-a-context-type","text":"Creating a context type"},{"type":"paragraph","inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","isActive":true},{"text":". This requires an ","type":"text"},{"code":"init()","type":"codeVoice"},{"text":" and a single member variable","type":"text"}]},{"type":"codeListing","code":["struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","    }","}"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"EncodingDecoding","text":"Encoding\/Decoding"},{"type":"paragraph","inlineContent":[{"text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By replacing the contents of the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" above with the following you have setup JSON decoding and encoding of requests and responses.","type":"text"}]},{"type":"codeListing","code":["self.coreContext = .init(","    requestDecoder: JSONDecoder(),","    responseEncoder: JSONEncoder(),","    allocator: allocator,","    logger: logger"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"reference"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Passing-data-forward","text":"Passing data forward"},{"type":"paragraph","inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}]},{"type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","    var additionalData: String?","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: HBMiddlewareProtocol {","    func handle(","        _ request: HBRequest, ","        context: MyRequestContext, ","        next: (HBRequest, MyRequestContext) async throws -> HBResponse","    ) async throws -> HBResponse {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Now anything run after ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":" can access the ","type":"text"},{"code":"additionalData","type":"codeVoice"},{"text":" set in ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Authentication-Middleware","text":"Authentication Middleware"},{"type":"paragraph","inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","isActive":true},{"text":".","type":"text"}]},{"type":"codeListing","code":["public struct MyRequestContext: HBAuthRequestContextProtocol {","    public var coreContext: HBCoreRequestContext","    \/\/ required by HBAuthRequestContextProtocol","    public var auth: HBLoginCache","","    public init(","        allocator: ByteBufferAllocator,","        logger: Logger","    ) {","        self.coreContext = .init(allocator: allocator, logger: logger)","        self.auth = .init()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"text":" does provide ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","isActive":true,"type":"reference"},{"text":": a default implementation of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"kind":"content"}],"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Request Context"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"],"title":"Reference"}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"type":"topic","kind":"symbol","title":"HBAuthRequestContextProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","kind":"article","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"type":"topic","kind":"symbol","title":"HBRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestContext","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbrequestcontext","abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"title":"Encoding and Decoding","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbbasicrequestcontext","navigatorTitle":[{"text":"HBBasicRequestContext","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","role":"symbol","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"title":"HBBasicRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","kind":"symbol","title":"HummingbirdAuth","role":"collection","url":"\/documentation\/hummingbirdauth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"HBAuthRequestContext","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContext"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthRequestContext"}],"type":"topic","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"HBResponder"},{"text":" that will follow these rules.","type":"text"}],"title":"HBRouter","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","kind":"article","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","title":"Hummingbird","role":"collection","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","title":"Hummingbird","role":"collection","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","kind":"article","title":"Persistent data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"}}}