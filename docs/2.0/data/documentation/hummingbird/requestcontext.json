{"kind":"article","topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"]}],"seeAlsoSections":[{"title":"Guides","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","isActive":true,"type":"reference"},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":", ","type":"text"},{"code":"ByteBufferAllocator","type":"codeVoice"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","type":"reference","isActive":true},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","type":"reference","isActive":true},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let router = HBRouter(context: MyContext.self)"]},{"level":2,"anchor":"Creating-a-context-type","type":"heading","text":"Creating a context type"},{"inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" and a single member variable"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","    }","}"]},{"level":2,"anchor":"EncodingDecoding","type":"heading","text":"Encoding\/Decoding"},{"inlineContent":[{"type":"text","text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By replacing the contents of the "},{"code":"init","type":"codeVoice"},{"type":"text","text":" above with the following you have setup JSON decoding and encoding of requests and responses."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["self.coreContext = .init(","    requestDecoder: JSONDecoder(),","    responseEncoder: JSONEncoder(),","    allocator: allocator,","    logger: logger"]},{"inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Passing-data-forward","type":"heading","text":"Passing data forward"},{"inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","    var additionalData: String?","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: HBMiddlewareProtocol {","    func handle(","        _ request: HBRequest, ","        context: MyRequestContext, ","        next: (HBRequest, MyRequestContext) async throws -> HBResponse","    ) async throws -> HBResponse {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"]},{"inlineContent":[{"type":"text","text":"Now anything run after "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":" can access the "},{"code":"additionalData","type":"codeVoice"},{"type":"text","text":" set in "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Authentication-Middleware","type":"heading","text":"Authentication Middleware"},{"inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct MyRequestContext: HBAuthRequestContextProtocol {","    public var coreContext: HBCoreRequestContext","    \/\/ required by HBAuthRequestContextProtocol","    public var auth: HBLoginCache","","    public init(","        allocator: ByteBufferAllocator,","        logger: Logger","    ) {","        self.coreContext = .init(allocator: allocator, logger: logger)","        self.auth = .init()","    }","}"]},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"text":" does provide ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext"},{"text":": a default implementation of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},{"text":".","type":"text"}],"type":"paragraph"}]}],"metadata":{"title":"Request Context","role":"collectionGroup","modules":[{"name":"Hummingbird"}]},"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"abstract":[{"type":"text","text":"Protocol for a request context that can be created from a NIO Channel"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestContext"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","title":"HBRequestContext","role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"navigatorTitle":[{"kind":"identifier","text":"HBRouter"}],"type":"topic","url":"\/documentation\/hummingbird\/hbrouter","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","role":"symbol","kind":"symbol","title":"HBRouter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"title":"HBAuthRequestContextProtocol","type":"topic","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","role":"collection","kind":"article","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"article","type":"topic","role":"collectionGroup","title":"Router","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","kind":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"navigatorTitle":[{"kind":"identifier","text":"HBBasicRequestContext"}],"url":"\/documentation\/hummingbird\/hbbasicrequestcontext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicRequestContext","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"HBBasicRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContext":{"navigatorTitle":[{"text":"HBAuthRequestContext","kind":"identifier"}],"title":"HBAuthRequestContext","type":"topic","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext"}}}