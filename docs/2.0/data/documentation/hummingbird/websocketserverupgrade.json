{"abstract":[{"type":"text","text":"Support for upgrading HTTP1 connections to WebSocket."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","title":"WebSocket Server Upgrade","role":"article","modules":[{"name":"HummingbirdWebSocket"}]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/WebSocketServerUpgrade","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Before a HTTP connection can be upgraded to a WebSocket connection a server must process an initial upgrade request and respond with a switching protocols response. HummingbirdWebSocket provides a server child channel setup that implements this for you with entry points to decide whether the upgrade should occur and then how to handle the upgraded WebSocket connection.","type":"text"}],"type":"paragraph"},{"anchor":"Setup","text":"Setup","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"You can access this by setting the "},{"code":"server","type":"codeVoice"},{"type":"text","text":" parameter in "},{"code":"Application.init()","type":"codeVoice"},{"type":"text","text":" to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder\/http1WebSocketUpgrade(configuration:additionalChannelHandlers:shouldUpgrade:)-9qdwg","isActive":true},{"type":"text","text":". This is initialized with a closure that returns either "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/ShouldUpgradeResult\/dontUpgrade","isActive":true},{"type":"text","text":" to not perform the WebSocket upgrade or "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/ShouldUpgradeResult\/upgrade(_:_:)","isActive":true},{"type":"text","text":" along with the closure handling the WebSocket connection."}],"type":"paragraph"},{"syntax":"swift","code":["let app = Application(","    router: router,","    server: .http1WebSocketUpgrade { request, channel, logger in","        \/\/ upgrade if request URI is \"\/ws\"","        guard request.uri == \"\/ws\" else { return .dontUpgrade }","        \/\/ The upgrade response includes the headers to include in the response and ","        \/\/ the WebSocket handler","        return .upgrade([:]) { inbound, outbound, context in","            for try await frame in inbound {","                \/\/ send \"Received\" for every frame we receive","                try await outbound.write(.text(\"Received\"))","            }","        }","    }",")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Alternatively you can provide a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"type":"text","text":" using a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" that conforms to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/WebSocketRequestContext"},{"type":"text","text":". The router can be the same router as you use for your HTTP requests, but it is preferable to use a separate router. Using a router means you can add middleware to process the initial upgrade request before it is handled eg for authenticating the request."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Setup WebSocket router","let wsRouter = Router(context: BasicWebSocketRequestContext.self)","\/\/ add middleware","wsRouter.middlewares.add(LogRequestsMiddleware())","wsRouter.middlewares.add(BasicAuthenticator())","\/\/ An upgrade only occurs if a WebSocket path is matched","wsRouter.ws(\"\/ws\") { request, context in","    \/\/ allow upgrade","    .upgrade([:])","} onUpgrade: { inbound, outbound, context in","    for try await frame in inbound {","        \/\/ send \"Received\" for every frame we receive","        try await outbound.write(.text(\"Received\"))","    }","}","let app = Application(","    router: router,","    server: .http1WebSocketUpgrade(webSocketRouter: wsRouter)",")"],"type":"codeListing"},{"anchor":"WebSocket-Handler","text":"WebSocket Handler","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The WebSocket handle function has three parameters: an inbound sequence of WebSocket frames ( "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSCore\/WebSocketInboundStream"},{"type":"text","text":"), an outbound WebSocket frame writer ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSCore\/WebSocketOutboundWriter"},{"type":"text","text":") and a context parameter. The WebSocket is kept open as long as you donâ€™t leave this function. PING, PONG and CLOSE frames are managed internally. If you want to send a regular PING keep-alive you can control that via the WebSocket configuration. By default servers send a PING every 30 seconds."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Below is a simple input and response style connection a frame is read from the inbound stream, processed and then a response is written back. If the connection is closed the inbound stream will end and we exit the function."}],"type":"paragraph"},{"syntax":"swift","code":["wsRouter.ws(\"\/ws\") { inbound, outbound, context in","    for try await frame in inbound {","        let response = await process(frame)","        try await outbound.write(response)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"If the reading and writing from your WebSocket connection are asynchronous then you can use a structured ","type":"text"},{"code":"TaskGroup","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["wsRouter.ws(\"\/ws\") { inbound, outbound, context in","    try await withThrowingTaskGroup(of: Void.self) { group in","        group.addTask {","            for try await frame in inbound {","                await process(frame)","            }","        }","        group.addTask {","            for await frame in outboundFrameSource {","                try await outbound.write(frame)","            }","        }","        try await group.next()","        \/\/ once one task has finished, cancel the other","        group.cancelAll()","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You should not use unstructured Tasks to manage your WebSockets. If you use an unstructured Task it is harder to control the lifecycle of these Tasks."}],"type":"paragraph"},{"anchor":"Frames-and-messages","text":"Frames and messages","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"A WebSocket message can be split across multiple WebSocket frames. The last frame indicated by the "},{"code":"FIN","type":"codeVoice"},{"type":"text","text":" flag being set to true. If you want to work with messages instead of frames you can convert the inbound stream of frames to a stream of messages using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSCore\/WebSocketInboundStream\/messages(maxSize:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["wsRouter.ws(\"\/ws\") { inbound, outbound, context in","    \/\/ We have set the maximum size of a message to be 1MB. If we don't set","    \/\/ a maximum size a client could keep sending us frames until we ran ","    \/\/ out of memory.","    for try await message in inbound.messages(maxSize: 1024*1024) {","        let response = await process(message)","        try await outbound.write(response)","    }","}"],"type":"codeListing"},{"anchor":"WebSocket-Context","text":"WebSocket Context","level":3,"type":"heading"},{"inlineContent":[{"text":"The context that is passed to the WebSocket handler along with the inbound stream and outbound writer is different depending on how you setup your WebSocket connection. In most cases the context only holds a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":" for logging output and a ","type":"text"},{"type":"codeVoice","code":"ByteBufferAllocator"},{"text":" if you need to allocate ","type":"text"},{"type":"codeVoice","code":"ByteBuffers"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But if the WebSocket was setup with a router, then the context also includes the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":" that initiated the WebSocket upgrade and the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":" from that same call. With this you can configure your WebSocket connection based on details from the initial request. Below we are using a query parameter to add a named WebSocket to a connection manager"}],"type":"paragraph"},{"syntax":"swift","code":["wsRouter.ws(\"chat\") { request, _ in","    \/\/ only allow upgrade if username query parameter exists","    guard request.uri.queryParameters[\"username\"] != nil else {","        return .dontUpgrade","    }","    return .upgrade([:])","} onUpgrade: { inbound, outbound, context in","    \/\/ only allow upgrade to continue if username query parameter exists","    guard let name = context.request.uri.queryParameters[\"username\"] else { return }","    await connectionManager.manageUser(name: String(name), inbound: inbound, outbound: outbound)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Alternatively you could use the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" to extract authentication data to get the userâ€™s name."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBuilder/http1WebSocketUpgrade(configuration:additionalChannelHandlers:shouldUpgrade:)-9qdwg":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"http1WebSocketUpgrade","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"configuration"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:20HummingbirdWebSocket0bC19ServerConfigurationV","kind":"typeIdentifier","text":"WebSocketServerConfiguration"},{"kind":"text","text":", "},{"kind":"externalParam","text":"additionalChannelHandlers"},{"kind":"text","text":": () -> ["},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"text":"RemovableChannelHandler","preciseIdentifier":"s:7NIOCore23RemovableChannelHandlerP","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"shouldUpgrade","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"HTTPRequest","preciseIdentifier":"s:9HTTPTypes11HTTPRequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:20HummingbirdWebSocket19ShouldUpgradeResultO","text":"ShouldUpgradeResult"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdWSCore20WebSocketDataHandlera","text":"WebSocketDataHandler"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:20HummingbirdWebSocket05HTTP1bC14UpgradeChannelV","text":"HTTP1WebSocketUpgradeChannel"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:20HummingbirdWebSocket05HTTP1bC14UpgradeChannelV7ContextV","text":"Context"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore17HTTPServerBuilderV","text":"HTTPServerBuilder"}],"title":"http1WebSocketUpgrade(configuration:additionalChannelHandlers:shouldUpgrade:)","abstract":[{"type":"text","text":"HTTP1 channel builder supporting a websocket upgrade"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder\/http1WebSocketUpgrade(configuration:additionalChannelHandlers:shouldUpgrade:)-9qdwg","url":"\/documentation\/hummingbirdcore\/httpserverbuilder\/http1websocketupgrade(configuration:additionalchannelhandlers:shouldupgrade:)-9qdwg","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket/WebSocketRequestContext":{"title":"WebSocketRequestContext","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebSocketRequestContext"}],"kind":"symbol","url":"\/documentation\/hummingbirdwebsocket\/websocketrequestcontext","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/WebSocketRequestContext","abstract":[{"text":"Request context protocol requirement for routers that support WebSockets","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"WebSocketRequestContext"}]},"logo.png":{"alt":null,"variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWSCore/WebSocketInboundStream":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSCore\/WebSocketInboundStream","title":"WebSocketInboundStream","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebSocketInboundStream"}],"url":"\/documentation\/hummingbirdwscore\/websocketinboundstream","abstract":[{"text":"Inbound WebSocket data frame AsyncSequence","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"WebSocketInboundStream"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWSCore/WebSocketOutboundWriter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSCore\/WebSocketOutboundWriter","type":"topic","url":"\/documentation\/hummingbirdwscore\/websocketoutboundwriter","role":"symbol","abstract":[{"text":"Outbound websocket writer","type":"text"}],"title":"WebSocketOutboundWriter","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WebSocketOutboundWriter","kind":"identifier"}],"navigatorTitle":[{"text":"WebSocketOutboundWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"navigatorTitle":[{"text":"Router","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket/ShouldUpgradeResult/dontUpgrade":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/ShouldUpgradeResult\/dontUpgrade","url":"\/documentation\/hummingbirdwebsocket\/shouldupgraderesult\/dontupgrade","abstract":[],"title":"ShouldUpgradeResult.dontUpgrade","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dontUpgrade","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWSCore/WebSocketInboundStream/messages(maxSize:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWSCore\/WebSocketInboundStream\/messages(maxSize:)","abstract":[{"text":"Convert to AsyncSequence of WebSocket messages","type":"text"}],"title":"messages(maxSize:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"messages","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:17HummingbirdWSCore29WebSocketInboundMessageStreamV","kind":"typeIdentifier","text":"WebSocketInboundMessageStream"}],"url":"\/documentation\/hummingbirdwscore\/websocketinboundstream\/messages(maxsize:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"navigatorTitle":[{"text":"Request","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdwebsocket","role":"collection","abstract":[{"text":"Adds support for upgrading HTTP connections to WebSocket.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","kind":"symbol","type":"topic","title":"HummingbirdWebSocket"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"kind":"symbol","title":"RequestContext","url":"\/documentation\/hummingbird\/requestcontext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","role":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket/ShouldUpgradeResult/upgrade(_:_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/ShouldUpgradeResult\/upgrade(_:_:)","url":"\/documentation\/hummingbirdwebsocket\/shouldupgraderesult\/upgrade(_:_:)","abstract":[],"title":"ShouldUpgradeResult.upgrade(_:_:)","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"upgrade","kind":"identifier"},{"text":"(","kind":"text"},{"text":"HTTPFields","kind":"typeIdentifier","preciseIdentifier":"s:9HTTPTypes10HTTPFieldsV"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:20HummingbirdWebSocket19ShouldUpgradeResultO5Valuexmfp"},{"text":")","kind":"text"}]}}}