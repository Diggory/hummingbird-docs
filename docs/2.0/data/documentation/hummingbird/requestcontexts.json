{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"kind":"article","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","isActive":true,"type":"reference"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":", "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouter"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicRequestContext"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let router = HBRouter(context: MyContext.self)"]},{"type":"heading","level":2,"anchor":"Creating-a-context-type","text":"Creating a context type"},{"inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","type":"reference"},{"text":". This requires an ","type":"text"},{"type":"codeVoice","code":"init()"},{"text":" and a single member variable","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","    }","}"],"syntax":"swift"},{"anchor":"EncodingDecoding","text":"Encoding\/Decoding","type":"heading","level":2},{"inlineContent":[{"text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By implementing the ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" member variables as below you have now setup JSON decoding and encoding of requests and responses.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyRequestContext: HBRequestContext {","    \/\/\/ Set request decoder to be JSONDecoder","    var requestDecoder: JSONDecoder { .init() }","    \/\/\/ Set response encoder to be JSONEncdoer","    var responseEncoder: JSONEncoder { .init() }","}"],"syntax":"swift"},{"inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Passing-data-forward","text":"Passing data forward","type":"heading","level":2},{"inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","    var additionalData: String?","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: HBMiddlewareProtocol {","    func handle(","        _ request: HBRequest, ","        context: MyRequestContext, ","        next: (HBRequest, MyRequestContext) async throws -> HBResponse","    ) async throws -> HBResponse {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Now anything run after ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"text":" can access the ","type":"text"},{"type":"codeVoice","code":"additionalData"},{"text":" set in ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Authentication-Middleware","text":"Authentication Middleware","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["public struct MyRequestContext: HBAuthRequestContextProtocol {","    public var coreContext: HBCoreRequestContext","    \/\/ required by HBAuthRequestContextProtocol","    public var auth: HBLoginCache","","    public init(","        allocator: ByteBufferAllocator,","        logger: Logger","    ) {","        self.coreContext = .init(allocator: allocator, logger: logger)","        self.auth = .init()","    }","}"],"syntax":"swift"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"type":"text","text":" does provide "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","type":"reference","isActive":true},{"type":"text","text":": a default implementation of "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"HBBaseRequestContext","text":"HBBaseRequestContext","type":"heading","level":2},{"inlineContent":[{"code":"HBRequestContext","type":"codeVoice"},{"type":"text","text":" conforms to the protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBaseRequestContext"},{"type":"text","text":". "},{"code":"HBBaseRequestContext","type":"codeVoice"},{"type":"text","text":" defines requirements for accessing data from your context, while "},{"code":"HBRequestContext","type":"codeVoice"},{"type":"text","text":" defines requirements for initialization from a Swift NIO "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":". You will find in the codebase where data access is required the request context is required to conform to "},{"code":"HBBaseRequestContext","type":"codeVoice"},{"type":"text","text":" but "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication"},{"type":"text","text":" still requires the context to conform to "},{"code":"HBRequestContext","type":"codeVoice"},{"type":"text","text":" as it needs to be able to create a context for each request."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This allows us to support running from AWS Lambda where we have no "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" to create the context from. Instead we have another protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaRequestContext","type":"reference","isActive":true},{"type":"text","text":" that defines how we create a context from the lambda context and event that triggered the request."}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouter"],"title":"Reference"}],"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Request Contexts"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","role":"collectionGroup","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContextProtocol"}],"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthRequestContextProtocol"}],"title":"HBAuthRequestContextProtocol","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBBaseRequestContext":{"url":"\/documentation\/hummingbirdlambda\/hbbaserequestcontext","kind":"symbol","title":"HBBaseRequestContext","navigatorTitle":[{"kind":"identifier","text":"HBBaseRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBaseRequestContext","type":"topic","role":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBaseRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContext":{"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","title":"HBAuthRequestContext","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontext","navigatorTitle":[{"text":"HBAuthRequestContext","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBAuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBBasicRequestContext":{"navigatorTitle":[{"text":"HBBasicRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBasicRequestContext"}],"title":"HBBasicRequestContext","url":"\/documentation\/hummingbirdlambda\/hbbasicrequestcontext","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouter":{"url":"\/documentation\/hummingbirdlambda\/hbrouter","kind":"symbol","title":"HBRouter","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouter","type":"topic","role":"symbol","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","title":"Persistent data","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","url":"\/documentation\/hummingbird\/migratingtov2","type":"topic","title":"Migrating to Hummingbird v2","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"role":"collection","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth","url":"\/documentation\/hummingbirdauth"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","role":"collection","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","url":"\/documentation\/hummingbird\/router","type":"topic","title":"Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLambdaRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLambdaRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBLambdaRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hblambdarequestcontext","kind":"symbol","type":"topic","title":"HBLambdaRequestContext","abstract":[{"text":"A Request Context that contains the Event that triggered the Lambda","type":"text"}],"navigatorTitle":[{"text":"HBLambdaRequestContext","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplication":{"url":"\/documentation\/hummingbirdlambda\/hbapplication","navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"type":"topic","title":"HBApplication","abstract":[{"type":"text","text":"Application class. Brings together all the components of Hummingbird together"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestContext":{"abstract":[{"type":"text","text":"Protocol for a request context that can be created from a NIO Channel"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","title":"HBRequestContext","url":"\/documentation\/hummingbirdlambda\/hbrequestcontext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestContext"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestContext"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","url":"\/documentation\/hummingbird\/testing","type":"topic","title":"Testing","kind":"article"}}}