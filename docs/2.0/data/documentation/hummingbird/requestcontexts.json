{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"metadata":{"roleHeading":"API Collection","title":"Request Contexts","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides"}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Reference"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":", "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}]},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}]},{"type":"codeListing","code":["let router = Router(context: MyRequestContext.self)"],"syntax":"swift"},{"type":"heading","text":"Creating a context type","anchor":"Creating-a-context-type","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init(source:)"},{"type":"text","text":" and a single member variable "},{"type":"codeVoice","code":"coreContext"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","type":"reference","isActive":true},{"text":" holds the base set of information needed by the Hummingbird ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" to process a ","type":"text"},{"code":"Request","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init"},{"type":"text","text":" takes one parameter of type "},{"type":"codeVoice","code":"Source"},{"type":"text","text":". "},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is an associatedtype for the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" protocol and provides setup data for the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":". By default this is set to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","isActive":true},{"type":"text","text":" which provides access to the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that created the request."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},{"type":"text","text":" your RequestContext will need to conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},{"type":"text","text":" and in that case the "},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},{"type":"text","text":" which provide access to the "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" that triggered the lambda and the "},{"type":"codeVoice","code":"LambdaContext"},{"type":"text","text":" from swift-aws-lambda-runtime."}]},{"type":"heading","text":"Encoding\/Decoding","anchor":"EncodingDecoding","level":2},{"type":"paragraph","inlineContent":[{"text":"By default request decoding and response encoding uses ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" respectively. You can override this by setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" member variables in your ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":". Below we are setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" to a decode\/encode JSON with a "},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"type":"text","text":" of seconds since 1970. The default in Hummingbird is ISO8601."}]},{"type":"codeListing","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},{"type":"text","text":"."}]},{"type":"heading","text":"Passing data forward","anchor":"Passing-data-forward","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}]},{"type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now anything run after "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":" can access the "},{"code":"additionalData","type":"codeVoice"},{"type":"text","text":" set in "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","text":"Authentication Middleware","anchor":"Authentication-Middleware","level":2},{"type":"paragraph","inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var auth: LoginCache","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.auth = .init()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference"},{"type":"text","text":" does provide "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","type":"reference"},{"type":"text","text":": a default implementation of "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference"},{"type":"text","text":"."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"url":"\/documentation\/hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","url":"\/documentation\/hummingbirdlambda","title":"HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","navigatorTitle":[{"text":"Router","kind":"identifier"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"text":" that will follow these rules.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/router","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","type":"topic","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","kind":"article","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"url":"\/documentation\/hummingbirdauth\/authrequestcontext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"type":"topic","title":"AuthRequestContext","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"kind":"symbol","title":"ApplicationRequestContextSource","type":"topic","role":"symbol","navigatorTitle":[{"text":"ApplicationRequestContextSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","abstract":[{"text":"RequestContext source for contexts created by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ApplicationRequestContextSource","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"url":"\/documentation\/hummingbird\/requestcontext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. Holds data associated with"},{"text":" ","type":"text"},{"type":"text","text":"a request. Provides context for request processing"}],"type":"topic","title":"RequestContext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LambdaRequestContext"}],"abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","title":"LambdaRequestContext","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","title":"LambdaRequestContextSource","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","type":"topic","role":"article","title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","type":"topic","role":"article","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/jobsguide","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"Jobs","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","type":"topic","url":"\/documentation\/hummingbirdauth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicAuthRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"BasicAuthRequestContext"}],"abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","title":"BasicAuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","type":"topic","role":"collectionGroup","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"navigatorTitle":[{"kind":"identifier","text":"Application"}],"role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"title":"Application","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"url":"\/documentation\/hummingbird\/corerequestcontextstorage","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreRequestContextStorage","kind":"identifier"}],"abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}],"type":"topic","title":"CoreRequestContextStorage","navigatorTitle":[{"text":"CoreRequestContextStorage","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","kind":"article","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"title":"Logging, Metrics and Tracing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/basicrequestcontext","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"title":"BasicRequestContext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext"}}}