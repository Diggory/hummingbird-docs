{"sections":[],"topicSections":[{"anchor":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Reference"}],"seeAlsoSections":[{"generated":true,"title":"Guides","anchor":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"text":", ","type":"text"},{"code":"ByteBufferAllocator","type":"codeVoice"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext"},{"type":"text","text":" the default implementation of a request context provided by Hummingbird."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let router = Router(context: MyRequestContext.self)"]},{"text":"Creating a context type","level":2,"anchor":"Creating-a-context-type","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires an "},{"code":"init(source:)","type":"codeVoice"},{"type":"text","text":" and a single member variable "},{"code":"coreContext","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"},{"text":" holds the base set of information needed by the Hummingbird ","type":"text"},{"code":"Router","type":"codeVoice"},{"type":"text","text":" to process a "},{"code":"Request","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" takes one parameter of type ","type":"text"},{"code":"Source","type":"codeVoice"},{"type":"text","text":". "},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is an associatedtype for the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" protocol and provides setup data for the "},{"type":"codeVoice","code":"RequestContext"},{"text":". By default this is set to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource"},{"text":" which provides access to the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that created the request."}]},{"inlineContent":[{"text":"If you are using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},{"type":"text","text":" your RequestContext will need to conform to "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","type":"reference"},{"type":"text","text":" and in that case the "},{"code":"Source","type":"codeVoice"},{"type":"text","text":" is a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},{"type":"text","text":" which provide access to the "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" that triggered the lambda and the "},{"type":"codeVoice","code":"LambdaContext"},{"type":"text","text":" from swift-aws-lambda-runtime."}],"type":"paragraph"},{"level":2,"text":"Encoding\/Decoding","anchor":"EncodingDecoding","type":"heading"},{"inlineContent":[{"type":"text","text":"By default request decoding and response encoding uses "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"JSONEncoder","type":"codeVoice"},{"text":" respectively. You can override this by setting the ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" member variables in your "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":". Below we are setting the "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"text":" to a decode\/encode JSON with a ","type":"text"},{"type":"codeVoice","code":"dateDecodingStratrgy"},{"text":" of seconds since 1970. The default in Hummingbird is ISO8601.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"anchor":"Passing-data-forward","type":"heading","text":"Passing data forward","level":2},{"inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"]},{"inlineContent":[{"type":"text","text":"Now anything run after "},{"type":"codeVoice","code":"MyMiddleware"},{"text":" can access the ","type":"text"},{"type":"codeVoice","code":"additionalData"},{"type":"text","text":" set in "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Using RequestContextSource","level":2,"anchor":"Using-RequestContextSource","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource"},{"type":"text","text":". If you are running a Hummingbird server then this contains the Swift NIO "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint."}]},{"code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Authentication Middleware","anchor":"Authentication-Middleware"},{"inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference"},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"],"type":"codeListing"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"type":"text","text":" does provide "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","type":"reference","isActive":true},{"text":": a default implementation of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"modules":[{"name":"Hummingbird"}],"roleHeading":"API Collection","title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"title":"LambdaRequestContext","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/request","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","navigatorTitle":[{"text":"Request","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"type":"topic","role":"overview","kind":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","title":"Store Data with Fluent","url":"\/tutorials\/fluent","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"title":"HummingbirdLambda","url":"\/documentation\/hummingbirdlambda","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","type":"topic","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"abstract":[{"text":"Implementation of a basic request context that supports authenticators","type":"text"}],"title":"BasicAuthRequestContext","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicAuthRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BasicAuthRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection","type":"topic","url":"\/documentation\/hummingbirdauth"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router","role":"symbol","navigatorTitle":[{"text":"Router","kind":"identifier"}],"type":"topic","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"title":"Application","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","kind":"symbol","navigatorTitle":[{"text":"Application","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"url":"\/documentation\/hummingbird\/application"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"identifier":"logo.png","type":"icon"}],"title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","url":"\/documentation\/hummingbird\/routerguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"role":"article","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"abstract":[{"type":"text","text":"Protocol for source of request contexts"}],"kind":"symbol","title":"RequestContextSource","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RequestContextSource","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestcontextsource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","role":"symbol","navigatorTitle":[{"text":"RequestContextSource","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","type":"topic","title":"Persistent data","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","role":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}],"url":"\/documentation\/hummingbird\/requestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"url":"\/documentation\/hummingbird\/corerequestcontextstorage","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CoreRequestContextStorage"}],"title":"CoreRequestContextStorage","abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","navigatorTitle":[{"kind":"identifier","text":"CoreRequestContextStorage"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"kind":"symbol","title":"AuthRequestContext","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","role":"symbol","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRequestContextSource"}],"type":"topic","title":"ApplicationRequestContextSource","abstract":[{"type":"text","text":"RequestContext source for contexts created by "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"ApplicationRequestContextSource"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"collectionGroup","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collectionGroup","type":"topic","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"article","title":"Jobs","url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"title":"LambdaRequestContextSource","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LambdaRequestContextSource","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","type":"topic","abstract":[],"role":"symbol"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"url":"\/documentation\/hummingbird\/basicrequestcontext","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BasicRequestContext","kind":"identifier"}],"title":"BasicRequestContext","abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}]}}}