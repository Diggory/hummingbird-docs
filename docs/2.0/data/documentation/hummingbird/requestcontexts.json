{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"metadata":{"role":"collectionGroup","title":"Request Contexts","modules":[{"name":"Hummingbird"}]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Reference"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":", "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","isActive":true,"type":"reference"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","isActive":true,"type":"reference"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let router = Router(context: MyContext.self)"],"syntax":"swift"},{"text":"Creating a context type","anchor":"Creating-a-context-type","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"type":"text","text":". This requires an "},{"code":"init()","type":"codeVoice"},{"type":"text","text":" and a single member variable"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContext","","    init(channel: Channel, logger: Logger) {","        self.coreContext = .init(allocator: channel.allocator, logger: logger)","    }","}"],"syntax":"swift"},{"text":"Encoding\/Decoding","anchor":"EncodingDecoding","type":"heading","level":2},{"inlineContent":[{"text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By implementing the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" member variables as below you have now setup JSON decoding and encoding of requests and responses.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder","    var requestDecoder: JSONDecoder { .init() }","    \/\/\/ Set response encoder to be JSONEncdoer","    var responseEncoder: JSONEncoder { .init() }","}"],"syntax":"swift"},{"inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Passing data forward","anchor":"Passing-data-forward","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContext","    var additionalData: String?","","    init(channel: Channel, logger: Logger) {","        self.coreContext = .init(allocator: channel.allocator, logger: logger)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Now anything run after ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"text":" can access the ","type":"text"},{"type":"codeVoice","code":"additionalData"},{"text":" set in ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Authentication Middleware","anchor":"Authentication-Middleware","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContext","    \/\/ required by AuthRequestContext","    public var auth: LoginCache","","    public init(channel: Channel, logger: Logger) {","        self.coreContext = .init(allocator: channel.allocator, logger: logger)","        self.auth = .init()","    }","}"],"syntax":"swift"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"text":" does provide ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","isActive":true,"type":"reference"},{"text":": a default implementation of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"BaseRequestContext","anchor":"BaseRequestContext","type":"heading","level":2},{"inlineContent":[{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" conforms to the protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","isActive":true,"type":"reference"},{"type":"text","text":". "},{"type":"codeVoice","code":"BaseRequestContext"},{"type":"text","text":" defines requirements for accessing data from your context, while "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" defines requirements for initialization from a Swift NIO "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":". You will find in the codebase where data access is required the request context is required to conform to "},{"type":"codeVoice","code":"BaseRequestContext"},{"type":"text","text":" but "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"type":"text","text":" still requires the context to conform to "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" as it needs to be able to create a context for each request."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This allows us to support running from AWS Lambda where we have no "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" to create the context from. Instead we have another protocol "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},{"type":"text","text":" that defines how we create a context from the lambda context and event that triggered the request."}],"type":"paragraph"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides","generated":true}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"title":"Middleware","type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","role":"collectionGroup","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"title":"Testing","type":"topic","role":"article","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","type":"topic","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","role":"collectionGroup","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","type":"topic","title":"Jobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"url":"\/documentation\/hummingbird\/jobsguide","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"kind":"symbol","title":"BasicRequestContext","url":"\/documentation\/hummingbird\/basicrequestcontext","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"BaseRequestContext"}],"title":"BaseRequestContext","url":"\/documentation\/hummingbird\/baserequestcontext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseRequestContext"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"navigatorTitle":[{"text":"BasicAuthRequestContext","kind":"identifier"}],"title":"BasicAuthRequestContext","type":"topic","role":"symbol","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"title":"Migrating to Hummingbird v2","type":"topic","role":"article","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"symbol","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Router"}],"title":"Router","type":"topic","url":"\/documentation\/hummingbird\/router","navigatorTitle":[{"kind":"identifier","text":"Router"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"role":"symbol","url":"\/documentation\/hummingbird\/requestcontext","type":"topic","abstract":[{"type":"text","text":"Protocol for a request context that can be created from a NIO Channel"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"title":"RequestContext","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"role":"collection","type":"topic","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"kind":"symbol","navigatorTitle":[{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"role":"symbol","type":"topic","title":"Application","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"title":"Service Lifecycle","type":"topic","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"topic","title":"AuthRequestContext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"AuthRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","role":"collectionGroup","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","title":"HummingbirdAuth","type":"topic","url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"title":"LambdaRequestContext"}}}