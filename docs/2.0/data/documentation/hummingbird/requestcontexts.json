{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"generated":true}],"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","isActive":true},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":", "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}]},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","isActive":true,"type":"reference"},{"type":"text","text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext"},{"type":"text","text":" the default implementation of a request context provided by Hummingbird."}]},{"code":["let router = HBRouter(context: MyContext.self)"],"type":"codeListing","syntax":"swift"},{"text":"Creating a context type","type":"heading","anchor":"Creating-a-context-type","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","isActive":true,"type":"reference"},{"type":"text","text":". This requires an "},{"code":"init()","type":"codeVoice"},{"type":"text","text":" and a single member variable"}]},{"code":["struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Encoding\/Decoding","type":"heading","anchor":"EncodingDecoding","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most likely reason you would setup your own context is because you want to set the request decoder and response encoder. By replacing the contents of the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" above with the following you have setup JSON decoding and encoding of requests and responses."}]},{"code":["self.coreContext = .init(","    requestDecoder: JSONDecoder(),","    responseEncoder: JSONEncoder(),","    allocator: allocator,","    logger: logger"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"reference"},{"text":".","type":"text"}]},{"text":"Passing data forward","type":"heading","anchor":"Passing-data-forward","level":2},{"type":"paragraph","inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}]},{"code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: HBRequestContext {","    var coreContext: HBCoreRequestContext","    var additionalData: String?","","    init(allocator: ByteBufferAllocator, logger: Logger) {","        self.coreContext = .init(","            allocator: allocator,","            logger: logger","        )","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: HBMiddlewareProtocol {","    func handle(","        _ request: HBRequest, ","        context: MyRequestContext, ","        next: (HBRequest, MyRequestContext) async throws -> HBResponse","    ) async throws -> HBResponse {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Now anything run after ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":" can access the ","type":"text"},{"code":"additionalData","type":"codeVoice"},{"text":" set in ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"Authentication Middleware","type":"heading","anchor":"Authentication-Middleware","level":2},{"type":"paragraph","inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","type":"reference","isActive":true},{"text":".","type":"text"}]},{"code":["public struct MyRequestContext: HBAuthRequestContextProtocol {","    public var coreContext: HBCoreRequestContext","    \/\/ required by HBAuthRequestContextProtocol","    public var auth: HBLoginCache","","    public init(","        allocator: ByteBufferAllocator,","        logger: Logger","    ) {","        self.coreContext = .init(allocator: allocator, logger: logger)","        self.auth = .init()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"type":"text","text":" does provide "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","isActive":true},{"type":"text","text":": a default implementation of "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","isActive":true},{"type":"text","text":"."}]}],"kind":"content"}],"sections":[],"metadata":{"role":"collectionGroup","title":"Request Contexts","modules":[{"name":"Hummingbird"}]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"],"title":"Reference"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"navigatorTitle":[{"kind":"identifier","text":"HBRouter"}],"type":"topic","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"url":"\/documentation\/hummingbird\/hbrouter","title":"HBRouter","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","title":"Hummingbird","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","title":"Encoding and Decoding","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","title":"Persistent data","kind":"article","type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContextProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContextProtocol","navigatorTitle":[{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"title":"HBAuthRequestContextProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContextProtocol","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdauth\/hbauthrequestcontextprotocol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBasicRequestContext"}],"title":"HBBasicRequestContext","url":"\/documentation\/hummingbird\/hbbasicrequestcontext","navigatorTitle":[{"kind":"identifier","text":"HBBasicRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","role":"symbol","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","kind":"article","role":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"kind":"symbol","abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","role":"symbol","navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}],"title":"HBRequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup","kind":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","role":"collectionGroup","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthRequestContext":{"navigatorTitle":[{"kind":"identifier","text":"HBAuthRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthRequestContext","title":"HBAuthRequestContext","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthrequestcontext","role":"symbol","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}]}}}