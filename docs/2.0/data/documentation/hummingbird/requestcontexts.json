{"kind":"article","sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Reference"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ByteBufferAllocator"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"reference"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"reference"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}]},{"syntax":"swift","code":["let router = Router(context: MyRequestContext.self)"],"type":"codeListing"},{"anchor":"Creating-a-context-type","text":"Creating a context type","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":". This requires an "},{"code":"init(source:)","type":"codeVoice"},{"type":"text","text":" and a single member variable "},{"code":"coreContext","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","type":"reference","isActive":true},{"type":"text","text":" holds the base set of information needed by the Hummingbird "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" to process a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"init","type":"codeVoice"},{"type":"text","text":" takes one parameter of type "},{"code":"Source","type":"codeVoice"},{"type":"text","text":". "},{"code":"Source","type":"codeVoice"},{"type":"text","text":" is an associatedtype for the "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" protocol and provides setup data for the "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":". By default this is set to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","type":"reference","isActive":true},{"type":"text","text":" which provides access to the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that created the request."}]},{"type":"paragraph","inlineContent":[{"text":"If you are using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},{"text":" your RequestContext will need to conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},{"text":" and in that case the ","type":"text"},{"code":"Source","type":"codeVoice"},{"text":" is a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},{"text":" which provide access to the ","type":"text"},{"code":"Event","type":"codeVoice"},{"text":" that triggered the lambda and the ","type":"text"},{"code":"LambdaContext","type":"codeVoice"},{"text":" from swift-aws-lambda-runtime.","type":"text"}]},{"anchor":"EncodingDecoding","text":"Encoding\/Decoding","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default request decoding and response encoding uses "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" respectively. You can override this by setting the "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" member variables in your "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":". Below we are setting the "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" to a decode\/encode JSON with a "},{"type":"codeVoice","code":"dateDecodingStratrgy"},{"type":"text","text":" of seconds since 1970. The default in Hummingbird is ISO8601."}]},{"syntax":"swift","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"anchor":"Passing-data-forward","text":"Passing data forward","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}]},{"syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now anything run after "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":" can access the "},{"type":"codeVoice","code":"additionalData"},{"type":"text","text":" set in "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":"."}]},{"anchor":"Using-RequestContextSource","text":"Using RequestContextSource","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource"},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint.","type":"text"}]},{"syntax":"swift","code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"],"type":"codeListing"},{"anchor":"Authentication-Middleware","text":"Authentication Middleware","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":"."}]},{"syntax":"swift","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var auth: LoginCache","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.auth = .init()","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"type":"text","text":" does provide "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","isActive":true,"type":"reference"},{"type":"text","text":": a default implementation of "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}],"metadata":{"roleHeading":"API Collection","role":"collectionGroup","title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"Hummingbird"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides","generated":true}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"title":"Request","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"url":"\/documentation\/hummingbirdcore\/request","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicRequestContext","kind":"identifier"}],"title":"BasicRequestContext","role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/basicrequestcontext","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"url":"\/documentation\/hummingbirdlambda","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"role":"collection","title":"HummingbirdLambda","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"title":"BasicAuthRequestContext","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BasicAuthRequestContext","kind":"identifier"}],"type":"topic","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BasicAuthRequestContext"}],"url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"navigatorTitle":[{"text":"RequestContextSource","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContextSource","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Protocol for source of request contexts","type":"text"}],"title":"RequestContextSource","url":"\/documentation\/hummingbird\/requestcontextsource","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreRequestContextStorage","kind":"identifier"}],"abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"title":"CoreRequestContextStorage","kind":"symbol","navigatorTitle":[{"text":"CoreRequestContextStorage","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","url":"\/documentation\/hummingbird\/corerequestcontextstorage"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"url":"\/documentation\/hummingbird\/router","title":"Router","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"Router","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"abstract":[{"type":"text","text":"RequestContext source for contexts created by "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","navigatorTitle":[{"text":"ApplicationRequestContextSource","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ApplicationRequestContextSource","kind":"identifier"}],"title":"ApplicationRequestContextSource","role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","title":"Service Lifecycle","role":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"title":"Jobs","kind":"article","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"title":"Hummingbird","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"collectionGroup","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"title":"Middleware","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"title":"LambdaRequestContextSource","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"role":"symbol","navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"title":"LambdaRequestContext","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbirdauth"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","title":"Error Handling"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"title":"AuthRequestContext","kind":"symbol","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","role":"collectionGroup","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/routerguide","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2","type":"topic","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"title":"RequestContext","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"url":"\/documentation\/hummingbird\/requestcontext","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"title":"Testing","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"title":"Application","kind":"symbol","navigatorTitle":[{"text":"Application","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"type":"image","identifier":"logo.png"}}}