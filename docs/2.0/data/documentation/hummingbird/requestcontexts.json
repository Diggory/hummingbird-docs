{"sections":[],"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"anchor":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Reference"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"metadata":{"title":"Request Contexts","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"Hummingbird"}],"roleHeading":"API Collection"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides","anchor":"Guides"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"code":"Logger","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ByteBufferAllocator"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you create your "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","isActive":true,"type":"reference"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"reference","isActive":true},{"type":"text","text":" the default implementation of a request context provided by Hummingbird."}]},{"code":["let router = Router(context: MyRequestContext.self)"],"type":"codeListing","syntax":"swift"},{"text":"Creating a context type","anchor":"Creating-a-context-type","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init(source:)"},{"type":"text","text":" and a single member variable "},{"type":"codeVoice","code":"coreContext"},{"type":"text","text":"."}]},{"syntax":"swift","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"},{"type":"text","text":" holds the base set of information needed by the Hummingbird "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" to process a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"init"},{"text":" takes one parameter of type ","type":"text"},{"code":"Source","type":"codeVoice"},{"type":"text","text":". "},{"type":"codeVoice","code":"Source"},{"text":" is an associatedtype for the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" protocol and provides setup data for the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":". By default this is set to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource"},{"type":"text","text":" which provides access to the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that created the request."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},{"type":"text","text":" your RequestContext will need to conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},{"text":" and in that case the ","type":"text"},{"type":"codeVoice","code":"Source"},{"text":" is a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},{"text":" which provide access to the ","type":"text"},{"type":"codeVoice","code":"Event"},{"text":" that triggered the lambda and the ","type":"text"},{"type":"codeVoice","code":"LambdaContext"},{"type":"text","text":" from swift-aws-lambda-runtime."}]},{"text":"Encoding\/Decoding","level":2,"anchor":"EncodingDecoding","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default request decoding and response encoding uses "},{"type":"codeVoice","code":"JSONDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" respectively. You can override this by setting the "},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" member variables in your "},{"type":"codeVoice","code":"RequestContext"},{"text":". Below we are setting the ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" to a decode\/encode JSON with a "},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"type":"text","text":" of seconds since 1970. The default in Hummingbird is ISO8601."}]},{"code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Passing-data-forward","text":"Passing data forward"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}]},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now anything run after "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":" can access the "},{"type":"codeVoice","code":"additionalData"},{"type":"text","text":" set in "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":"."}]},{"text":"Using RequestContextSource","level":2,"anchor":"Using-RequestContextSource","type":"heading"},{"inlineContent":[{"type":"text","text":"You can also use the RequestContext to store information from the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","type":"reference","isActive":true},{"type":"text","text":". If you are running a Hummingbird server then this contains the Swift NIO "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint."}],"type":"paragraph"},{"code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"],"syntax":"swift","type":"codeListing"},{"text":"Authentication Middleware","level":2,"anchor":"Authentication-Middleware","type":"heading"},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"]},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"type":"text","text":" does provide "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","isActive":true},{"type":"text","text":": a default implementation of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","abstract":[{"type":"text","text":"Protocol for source of request contexts"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RequestContextSource","kind":"identifier"}],"role":"symbol","title":"RequestContextSource","type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontextsource","navigatorTitle":[{"kind":"identifier","text":"RequestContextSource"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}],"role":"symbol","url":"\/documentation\/hummingbird\/corerequestcontextstorage","title":"CoreRequestContextStorage","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CoreRequestContextStorage","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"CoreRequestContextStorage"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/routerguide","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Testing","type":"topic","kind":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","abstract":[{"type":"text","text":"RequestContext source for contexts created by "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ApplicationRequestContextSource","kind":"identifier"}],"role":"symbol","title":"ApplicationRequestContextSource","type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","navigatorTitle":[{"kind":"identifier","text":"ApplicationRequestContextSource"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","title":"LambdaRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"text":" that will follow these rules.","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbird\/router","title":"Router","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Router","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Router","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"role":"symbol","title":"RequestContext","type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"title":"Error Handling","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"navigatorTitle":[{"kind":"identifier","text":"AuthRequestContext"}],"title":"AuthRequestContext","type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AuthRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/authrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"role":"symbol","url":"\/documentation\/hummingbird\/application","title":"Application","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Application","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"Middleware","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"abstract":[{"type":"text","text":"Implementation of a basic request context that supports authenticators"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","navigatorTitle":[{"text":"BasicAuthRequestContext","kind":"identifier"}],"role":"symbol","title":"BasicAuthRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BasicAuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"title":"Jobs","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/jobsguide"},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"identifier":"logo.png","type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection","url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"title":"Hummingbird","type":"topic","kind":"article","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection","url":"\/documentation\/hummingbird","title":"Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"role":"symbol","url":"\/documentation\/hummingbird\/basicrequestcontext","title":"BasicRequestContext","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicRequestContext"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"title":"Service Lifecycle","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"kind":"symbol","type":"topic","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"LambdaRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","title":"LambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Request"}],"role":"symbol","title":"Request","type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","navigatorTitle":[{"kind":"identifier","text":"Request"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol","type":"topic","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","title":"HummingbirdLambda","url":"\/documentation\/hummingbirdlambda"}}}