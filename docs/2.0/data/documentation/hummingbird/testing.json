{"kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"],"title":"Related Documentation","anchor":"Related-Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server","generated":true,"title":"Hummingbird Server"}],"metadata":{"role":"article","images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","title":"Testing"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Writing tests for application APIs is an important part of the development process. They ensure everything works as you expected and that you don’t break functionality with future changes. Hummingbird provides a framework for testing your application as if it is a running server and you are a client connecting to it."}]},{"type":"heading","level":2,"text":"Example","anchor":"Example"},{"inlineContent":[{"text":"Lets create a simple application that says hello back to you. ie If your request is to ","type":"text"},{"code":"\/hello\/adam","type":"codeVoice"},{"type":"text","text":" it returns “Hello adam!”."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let router = Router()","router.get(\"hello\/{name}\") { _,context in","    return try \"Hello \\(context.parameters.require(\"name\"))!\"","}","let app = Application(router: router)"]},{"text":"Testing","anchor":"Testing","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can test the application returns the correct text as follows"}]},{"syntax":"swift","type":"codeListing","code":["func testApplicationReturnsCorrectText() async throw {","    try await app.test(.router) { client in","        try await client.execute(","            uri: \"\/hello\/john\",","            method: .get,","            headers: [:],  \/\/ default value","            body: nil      \/\/ default value","        ) { response in","            #expect(response.status == .ok)","            #expect(String(buffer: response.body) == \"Hello john!\")","        }","    }","}"]},{"anchor":"Applicationtest","type":"heading","level":3,"text":"`Application.test`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","type":"reference","isActive":true},{"text":" function takes two parameters, first the test framework to use and then the closure to run with the framework client. The test framework defines how we are going to test our application. There are three possible frameworks","type":"text"}]},{"type":"heading","level":4,"anchor":"Router-router","text":"Router (.router)"},{"type":"paragraph","inlineContent":[{"text":"The router test framework will send requests directly to the router. It does not need a running server to run tests. The main advantages of this is it is the quickest way to test your application but will not test anything outside of the router. In most cases you won’t need more than this.","type":"text"}]},{"level":4,"type":"heading","text":"Live (.live)","anchor":"Live-live"},{"inlineContent":[{"type":"text","text":"The live framework uses a live server, with an HTTP client attached on a single connection."}],"type":"paragraph"},{"anchor":"AsyncHTTPClient-ahc","text":"AsyncHTTPClient (.ahc)","level":4,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The AsyncHTTPClient framework is the same as the live framework except it uses "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swift-server\/async-http-client"},{"type":"text","text":" from swift-server as its HTTPClient. You can use this to test TLS and HTTP2 connections."}]},{"anchor":"Executing-requests-and-testing-the-response","text":"Executing requests and testing the response","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol\/execute(uri:method:headers:body:testCallback:)"},{"type":"text","text":" sends a request to your application and provides the response in a closure. If you return something from the closure then this is returned by "},{"code":"execute","type":"codeVoice"},{"text":". In the following example we are testing whether a session cookie works.","type":"text"}]},{"syntax":"swift","code":["@Test","func testApplicationReturnsCorrectText() async throw {","    try await app.test(.router) { client in","        \/\/ test login, returns a set-cookie header and extract","        let cookie = try await client.execute(","            uri: \"\/user\/login\", ","            method: .post, ","            headers: [.authorization: \"Basic blahblah\"]","        ) { response in","            #expect(response.status == .ok)","            return try #require(response.headers[.setCookie])","        }","        \/\/ check session cookie works","        try await client.execute(","            uri: \"\/user\/is-authenticated\", ","            method: .get, ","            headers: [.cookie: cookie]","        ) { response in","            #expect(response.status == .ok)","        }","    }","}"],"type":"codeListing"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","role":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","role":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"TestingSetup","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"text":", (","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}],"role":"symbol","title":"test(_:_:)","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Test "},{"code":"Application","type":"codeVoice"}]},"logo.png":{"type":"image","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","title":"Service Lifecycle","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"kind":"article","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","title":"Result Builder Router","type":"topic","url":"\/documentation\/hummingbird\/routerbuilderguide","abstract":[{"type":"text","text":"Building your router using a result builder."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestClientProtocol"}],"navigatorTitle":[{"text":"TestClientProtocol","kind":"identifier"}],"abstract":[{"text":"Protocol for client used by HummingbirdTesting","type":"text"}],"role":"symbol","type":"topic","title":"TestClientProtocol","url":"\/documentation\/hummingbirdtesting\/testclientprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","type":"topic","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"title":"Error Handling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","images":[{"type":"icon","identifier":"logo.png"}]},"https://github.com/swift-server/async-http-client":{"titleInlineContent":[{"text":"AsyncHTTPClient","type":"text"}],"type":"link","url":"https:\/\/github.com\/swift-server\/async-http-client","title":"AsyncHTTPClient","identifier":"https:\/\/github.com\/swift-server\/async-http-client"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Hummingbird Documentation","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol/execute(uri:method:headers:body:testCallback:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"execute","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Return"},{"kind":"text","text":">("},{"kind":"externalParam","text":"uri"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"method","kind":"externalParam"},{"kind":"text","text":": "},{"text":"HTTPRequest","kind":"typeIdentifier","preciseIdentifier":"s:9HTTPTypes11HTTPRequestV"},{"text":".","kind":"text"},{"preciseIdentifier":"s:9HTTPTypes11HTTPRequestV6MethodV","kind":"typeIdentifier","text":"Method"},{"text":", ","kind":"text"},{"text":"headers","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPFields","kind":"typeIdentifier","preciseIdentifier":"s:9HTTPTypes10HTTPFieldsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"body"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"testCallback","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"TestResponse","preciseIdentifier":"s:18HummingbirdTesting12TestResponseV"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolPAAE7execute3uri6method7headers4body12testCallbackqd__SS_9HTTPTypes11HTTPRequestV6MethodVAJ10HTTPFieldsV7NIOCore10ByteBufferVSgqd__AA0C8ResponseVYaKctYaKlF6ReturnL_qd__mfp","text":"Return"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Return","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolPAAE7execute3uri6method7headers4body12testCallbackqd__SS_9HTTPTypes11HTTPRequestV6MethodVAJ10HTTPFieldsV7NIOCore10ByteBufferVSgqd__AA0C8ResponseVYaKctYaKlF6ReturnL_qd__mfp"}],"abstract":[{"text":"Send request to associated test framework and call test callback on the response returned","type":"text"}],"role":"symbol","type":"topic","title":"execute(uri:method:headers:body:testCallback:)","url":"\/documentation\/hummingbirdtesting\/testclientprotocol\/execute(uri:method:headers:body:testcallback:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol\/execute(uri:method:headers:body:testCallback:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"article","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]}}}