{"abstract":[{"type":"text","text":"Template inheritance and parents is an optional part of the Mustache specification."}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Template inheritance allows you to override elements of an included partial. It allows you to create a base page template, or parent as it is called in the mustache manual, and override elements of it with your page content. A parent that includes overriding elements is indicated with a ","type":"text"},{"type":"codeVoice","code":"{{<parent}}"},{"type":"text","text":". Note this is different from the normal partial reference which uses "},{"type":"codeVoice","code":">"},{"text":". This is a section tag so needs a ending tag as well. Inside the section the tagged sections to override are added using the syntax ","type":"text"},{"code":"{{$tag}}contents{{\/tag}}","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"If your template is as follows","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["{{! mypage.mustache }}","{{<base}}","{{$head}}<title>My page title<\/title>{{\/head}}","{{$body}}Hello world{{\/body}}","{{\/base}}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And you partial is as follows"}]},{"syntax":null,"code":["{{! base.mustache }}","<html>","<head>","{{$head}}{{\/head}}","<\/head>","<body>","{{$body}}Default text{{\/body}}","<\/body>","<\/html>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You would get the following output when rendering "},{"code":"mypage.mustache","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["<html>","<head>","<title>My page title<\/title>","<\/head>","<body>","Hello world","<\/body>"],"syntax":null},{"inlineContent":[{"text":"Note the ","type":"text"},{"code":"{{$head}}","type":"codeVoice"},{"text":" section in ","type":"text"},{"type":"codeVoice","code":"base.mustache"},{"type":"text","text":" is replaced with the "},{"type":"codeVoice","code":"{{$head}}"},{"text":" section included inside the ","type":"text"},{"type":"codeVoice","code":"{{<base}}"},{"type":"text","text":" partial reference from "},{"type":"codeVoice","code":"mypage.mustache"},{"type":"text","text":". The same occurs with the "},{"type":"codeVoice","code":"{{$body}}"},{"text":" section. In that case though a default value is supplied for the situation where a ","type":"text"},{"type":"codeVoice","code":"{{$body}}"},{"text":" section is not supplied.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"title":"Features","anchor":"Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"sections":[],"metadata":{"title":"Template Inheritance and parents","roleHeading":"Article","modules":[{"name":"Mustache"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"article"},"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","url":"\/documentation\/mustache","title":"Mustache","role":"collection","abstract":[{"type":"text","text":"Mustache template engine."}],"images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Transforming objects during render"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","title":"Transforms","kind":"article","type":"topic","role":"article","url":"\/documentation\/hummingbird\/transforms"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","title":"Lambdas","kind":"article","type":"topic","role":"article","url":"\/documentation\/hummingbird\/lambdas"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Setting template render configuration settings."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","title":"Pragmas\/Configuration variables","kind":"article","type":"topic","role":"article","url":"\/documentation\/hummingbird\/pragmas"}}}