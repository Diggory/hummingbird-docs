{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"metadata":{"title":"Router","role":"collectionGroup","modules":[{"name":"Hummingbird"}]},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"generated":true}],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"]}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The default router that comes with Hummingbird uses a Trie based lookup. Routes are added using the function ","type":"text"},{"type":"codeVoice","code":"on"},{"type":"text","text":". You provide the URI path, the method and the handler function. Below is a simple route which returns “Hello” in the body of the response."}]},{"type":"codeListing","code":["let router = HBRouter()","router.on(\"\/hello\", method: .GET) { request, context in","    return \"Hello\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t provide a path then the default is for it to be “\/”."}]},{"type":"heading","anchor":"Methods","level":3,"text":"Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are shortcut functions for the most common HTTP methods. The above can be written as"}]},{"type":"codeListing","code":["let router = HBRouter()","app.router.get(\"\/hello\") { request, context in","    return \"Hello\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"There are shortcuts for ","type":"text"},{"code":"put","type":"codeVoice"},{"text":", ","type":"text"},{"code":"post","type":"codeVoice"},{"text":", ","type":"text"},{"code":"head","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"patch"},{"type":"text","text":" and "},{"type":"codeVoice","code":"delete"},{"type":"text","text":" as well."}]},{"type":"heading","anchor":"Response-generators","level":3,"text":"Response generators"},{"type":"paragraph","inlineContent":[{"text":"Route handlers are required to return a type conforming to the ","type":"text"},{"code":"HBResponseGenerator","type":"codeVoice"},{"text":" protocol. The ","type":"text"},{"code":"HBResponseGenerator","type":"codeVoice"},{"text":" protocol requires a type to be able to generate an ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":". For example ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" has been extended to conform to ","type":"text"},{"code":"HBResponseGenerator","type":"codeVoice"},{"text":" by returning an ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" with status ","type":"text"},{"code":".ok","type":"codeVoice"},{"text":",  a content-type header of ","type":"text"},{"code":"text-plain","type":"codeVoice"},{"text":" and a body holding the contents of the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["\/\/\/ Extend String to conform to ResponseGenerator","extension String: HBResponseGenerator {","    \/\/\/ Generate response holding string","    public func response(from request: HBRequest, context: some HBBaseRequestContext) -> HBResponse {","        let buffer = context.allocator.buffer(string: self)","        return HBResponse(status: .ok, headers: [\"content-type\": \"text\/plain; charset=utf-8\"], body: .byteBuffer(buffer))","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In addition to ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"HTTPResponseStatus","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" have also been extended to conform to ","type":"text"},{"code":"HBResponseGenerator","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to extend "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" objects to generate "},{"code":"HBResponse","type":"codeVoice"},{"type":"text","text":" by conforming these objects to "},{"code":"HBResponseEncodable","type":"codeVoice"},{"type":"text","text":". The object will use the response encoder attached to your context to encode these objects. If an object conforms to "},{"code":"HBResponseEncodable","type":"codeVoice"},{"type":"text","text":" then also so do arrays and dictionaries of these objects."}]},{"type":"heading","anchor":"Wildcards","level":3,"text":"Wildcards"},{"type":"paragraph","inlineContent":[{"text":"You can use wildcards to match sections of a path component.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A single ","type":"text"},{"code":"*","type":"codeVoice"},{"text":" will skip one path component","type":"text"}]},{"type":"codeListing","code":["app.router.get(\"\/files\/*\") { request, context in","    return request.uri.description","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Will match","type":"text"}]},{"type":"codeListing","code":["GET \/files\/test","GET \/files\/test2"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"*","type":"codeVoice"},{"type":"text","text":" at the start of a route component will match all path components with the same suffix."}]},{"type":"codeListing","code":["app.router.get(\"\/files\/*.jpg\") { request, context in","    return request.uri.description","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Will work for","type":"text"}]},{"type":"codeListing","code":["GET \/files\/test.jpg","GET \/files\/test2.jpg"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"*"},{"type":"text","text":" at the end of a route component will match all path components with the same prefix."}]},{"type":"codeListing","code":["app.router.get(\"\/files\/image.*\") { request, context in","    return request.uri.description","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Will work for","type":"text"}]},{"type":"codeListing","code":["GET \/files\/image.jpg","GET \/files\/image.png"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"**"},{"type":"text","text":" will match and capture all remaining path components."}]},{"type":"codeListing","code":["app.router.get(\"\/files\/**\") { request, context in","    \/\/ return catchAll captured string","    return context.parameters.getCatchAll().joined(separator: \"\/\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above will match routes and respond as follows"}]},{"type":"codeListing","code":["GET \/files\/image.jpg returns \"image.jpg\" in the response body","GET \/files\/folder\/image.png returns \"folder\/image.png\" in the response body"],"syntax":null},{"type":"heading","anchor":"Parameter-Capture","level":3,"text":"Parameter Capture"},{"type":"paragraph","inlineContent":[{"text":"You can extract parameters out of the URI by prefixing the path with a colon. This indicates that this path section is a parameter. The parameter name is the string following the colon. You can get access to the parameters extracted from the URI with ","type":"text"},{"code":"HBRequest.parameters","type":"codeVoice"},{"text":". If there are no URI parameters in the path, accessing ","type":"text"},{"code":"HBRequest.parameters","type":"codeVoice"},{"text":" will cause a crash, so don’t use it if you haven’t specified a parameter in the route path. This example extracts an id from the URI and uses it to return a specific user. so “\/user\/56” will return user with id 56.","type":"text"}]},{"type":"codeListing","code":["app.router.get(\"\/user\/:id\") { request in","    let id = request.parameters.get(\"id\", as: Int.self) else { throw HBHTTPError(.badRequest) }","    return getUser(id: id)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above if I fail to access the parameter as an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" then I throw an error. If you throw an "},{"type":"codeVoice","code":"HBHTTPError"},{"type":"text","text":" it will get converted to a valid HTTP response."}]},{"type":"paragraph","inlineContent":[{"text":"The parameter name in your route can also be of the form ","type":"text"},{"code":"{id}","type":"codeVoice"},{"text":", similar to OpenAPI specifications. With this form you can also extract parameter values from the URI that are prefixes or suffixes of a path component.","type":"text"}]},{"type":"codeListing","code":["app.router.get(\"\/files\/{image}.jpg\") { request in","    let imageName = request.parameters.get(\"image\") else { throw HBHTTPError(.badRequest) }","    return getImage(image: imageName)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the example above we match all paths that are a file with a jpg extension inside the files folder and then call a function with that image name.","type":"text"}]},{"type":"heading","anchor":"Groups","level":3,"text":"Groups"},{"type":"paragraph","inlineContent":[{"text":"Routes can be grouped together in a ","type":"text"},{"type":"codeVoice","code":"HBRouterGroup"},{"text":".  These allow for you to prefix a series of routes with the same path and more importantly apply middleware to only those routes. The example below is a group that includes five handlers all prefixed with the path “\/todos”.","type":"text"}]},{"type":"codeListing","code":["let app = HBApplication()","app.router.group(\"\/todos\")","    .put(use: createTodo)","    .get(use: listTodos)","    .get(\"{id}\", getTodo)","    .patch(\"{id}\", editTodo)","    .delete(\"{id}\", deleteTodo)"],"syntax":"swift"},{"type":"heading","anchor":"Route-handlers","level":3,"text":"Route handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A route handler "},{"code":"HBRouteHandler","type":"codeVoice"},{"type":"text","text":" allows you to encapsulate all the components required for a route, and provide separation of the extraction of input parameters from the request and the processing of those parameters. An example could be structrured as follows"}]},{"type":"codeListing","code":["struct AddOrder: HBRouteHandler {","    struct Input: Decodable {","        let name: String","        let amount: Double","    }","    struct Output: HBResponseEncodable {","        let id: String","    }","    let input: Input","    let user: User","    ","    init(from request: HBRequest, context: some HBAuthRequestContextProtocol) async throws {","        self.input = try await request.decode(as: Input.self, context: context)","        self.user = try context.auth.require(User.self)","    }","    func handle(context: some HBAuthRequestContextProtocol) async throws -> Output {","        let order = Order(user: self.user.id, details: self.input)","        let order = try await order.save(on: db)","        return Output(id: order.id)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here you can see the "},{"type":"codeVoice","code":"AddOrder"},{"type":"text","text":" route handler encapsulates everything you need to know about the add order route. The "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" structs are defined and any additional input parameters that need extracted from the "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":". The input parameters are extracted in the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" and then the those parameters are processed in the "},{"type":"codeVoice","code":"handle"},{"type":"text","text":" function. In this example we need to decode the "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" and using the authentication framework from "},{"type":"codeVoice","code":"HummingbirdAuth"},{"type":"text","text":" we get the authenticated user."}]},{"type":"paragraph","inlineContent":[{"text":"The following will add the handler to the application","type":"text"}]},{"type":"codeListing","code":["application.router.put(\"order\", use: AddOrder.self)"],"syntax":"swift"},{"type":"heading","anchor":"Request-body","level":3,"text":"Request body"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the request body is an AsyncSequence of ByteBuffers. You can treat it as a series of buffers or collect it into one larger buffer."}]},{"type":"codeListing","code":["\/\/ process each buffer in the sequence separately","for try await buffer in request.body {","    process(buffer)","}"],"syntax":"swift"},{"type":"codeListing","code":["\/\/ collect all the buffers in the sequence into a single buffer","let buffer = try await request.body.collate(maxSize: maximumBufferSizeAllowed)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Once you have read the sequence of buffers you cannot read it again. If you want to read the contents of a request body in middleware before it reaches the route handler, but still have it available for the route handler you can use ","type":"text"},{"code":"HBRequest.collateBody(context:)","type":"codeVoice"},{"text":". After this point though the request body cannot be treated as a sequence of buffers as it has already been collapsed into a single buffer.","type":"text"}]},{"type":"heading","anchor":"Editing-response-in-handler","level":3,"text":"Editing response in handler"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The standard way to provide a custom response from a route handler is to return a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" from that handler. This method loses a lot of the automation of encoding responses, generating the correct status code etc."}]},{"type":"paragraph","inlineContent":[{"text":"Instead you can return what is called a ","type":"text"},{"type":"codeVoice","code":"HBEditedResponse"},{"text":". This includes a type that can generate a response on its own via the ","type":"text"},{"type":"codeVoice","code":"HBResponseGenerator"},{"text":" protocol and includes additional edits to the response.","type":"text"}]},{"type":"codeListing","code":["application.router.post(\"test\") { request -> HBEditedResponse in","    return .init(","        status: .accepted,","        headers: [.contentType: \"application\/json\"],","        response: #\"{\"test\": \"value\"}\"#","    )","}"],"syntax":"swift"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","interfaceLanguage":"swift"},"kind":"article","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","role":"collection","kind":"article","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"type":"text","text":" that will follow these rules."}],"title":"HBRouter","navigatorTitle":[{"kind":"identifier","text":"HBRouter"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/hbrouter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","role":"collectionGroup","kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"text":" ","type":"text"},{"text":"suffix to the endpoint path","type":"text"}],"title":"HBRouterGroup","navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/hbroutergroup","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","kind":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","type":"topic","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"title":"HBRouterMethods","type":"topic","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbird\/hbroutermethods","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"collectionGroup","kind":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","role":"article","title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","kind":"article"}}}