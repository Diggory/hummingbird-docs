{"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Router"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true,"title":"Guides"}],"sections":[],"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"],"title":"Reference"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"The default router that comes with Hummingbird uses a Trie based lookup. Routes are added using the function "},{"type":"codeVoice","code":"on"},{"type":"text","text":". You provide the URI path, the method and the handler function. Below is a simple route which returns “Hello” in the body of the response."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let router = HBRouter()","router.on(\"\/hello\", method: .GET) { request, context in","    return \"Hello\"","}"]},{"inlineContent":[{"text":"If you don’t provide a path then the default is for it to be “\/”.","type":"text"}],"type":"paragraph"},{"text":"Methods","type":"heading","level":3,"anchor":"Methods"},{"inlineContent":[{"text":"There are shortcut functions for the most common HTTP methods. The above can be written as","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let router = HBRouter()","app.router.get(\"\/hello\") { request, context in","    return \"Hello\"","}"]},{"inlineContent":[{"text":"There are shortcuts for ","type":"text"},{"code":"put","type":"codeVoice"},{"text":", ","type":"text"},{"code":"post","type":"codeVoice"},{"text":", ","type":"text"},{"code":"head","type":"codeVoice"},{"text":", ","type":"text"},{"code":"patch","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"delete","type":"codeVoice"},{"text":" as well.","type":"text"}],"type":"paragraph"},{"text":"Response generators","type":"heading","level":3,"anchor":"Response-generators"},{"inlineContent":[{"type":"text","text":"Route handlers are required to return a type conforming to the "},{"code":"HBResponseGenerator","type":"codeVoice"},{"type":"text","text":" protocol. The "},{"code":"HBResponseGenerator","type":"codeVoice"},{"type":"text","text":" protocol requires a type to be able to generate an "},{"code":"HBResponse","type":"codeVoice"},{"type":"text","text":". For example "},{"code":"String","type":"codeVoice"},{"type":"text","text":" has been extended to conform to "},{"code":"HBResponseGenerator","type":"codeVoice"},{"type":"text","text":" by returning an "},{"code":"HBResponse","type":"codeVoice"},{"type":"text","text":" with status "},{"code":".ok","type":"codeVoice"},{"type":"text","text":",  a content-type header of "},{"code":"text-plain","type":"codeVoice"},{"type":"text","text":" and a body holding the contents of the "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Extend String to conform to ResponseGenerator","extension String: HBResponseGenerator {","    \/\/\/ Generate response holding string","    public func response(from request: HBRequest, context: some HBBaseRequestContext) -> HBResponse {","        let buffer = context.allocator.buffer(string: self)","        return HBResponse(status: .ok, headers: [\"content-type\": \"text\/plain; charset=utf-8\"], body: .byteBuffer(buffer))","    }","}"]},{"inlineContent":[{"type":"text","text":"In addition to "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":", "},{"type":"codeVoice","code":"HTTPResponseStatus"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" have also been extended to conform to "},{"type":"codeVoice","code":"HBResponseGenerator"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It is also possible to extend "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" objects to generate "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" by conforming these objects to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". The object will use the response encoder attached to your context to encode these objects. If an object conforms to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":" then also so do arrays and dictionaries of these objects."}],"type":"paragraph"},{"text":"Wildcards","type":"heading","level":3,"anchor":"Wildcards"},{"inlineContent":[{"text":"You can use wildcards to match sections of a path component.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A single "},{"code":"*","type":"codeVoice"},{"type":"text","text":" will skip one path component"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["app.router.get(\"\/files\/*\") { request, context in","    return request.uri.description","}"]},{"inlineContent":[{"type":"text","text":"Will match"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["GET \/files\/test","GET \/files\/test2"]},{"inlineContent":[{"type":"text","text":"A "},{"code":"*","type":"codeVoice"},{"type":"text","text":" at the start of a route component will match all path components with the same suffix."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["app.router.get(\"\/files\/*.jpg\") { request, context in","    return request.uri.description","}"]},{"inlineContent":[{"type":"text","text":"Will work for"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["GET \/files\/test.jpg","GET \/files\/test2.jpg"]},{"inlineContent":[{"text":"A ","type":"text"},{"code":"*","type":"codeVoice"},{"text":" at the end of a route component will match all path components with the same prefix.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["app.router.get(\"\/files\/image.*\") { request, context in","    return request.uri.description","}"]},{"inlineContent":[{"text":"Will work for","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["GET \/files\/image.jpg","GET \/files\/image.png"]},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"**"},{"text":" will match and capture all remaining path components.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["app.router.get(\"\/files\/**\") { request, context in","    \/\/ return catchAll captured string","    return context.parameters.getCatchAll().joined(separator: \"\/\")","}"]},{"inlineContent":[{"text":"The above will match routes and respond as follows","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["GET \/files\/image.jpg returns \"image.jpg\" in the response body","GET \/files\/folder\/image.png returns \"folder\/image.png\" in the response body"]},{"text":"Parameter Capture","type":"heading","level":3,"anchor":"Parameter-Capture"},{"inlineContent":[{"type":"text","text":"You can extract parameters out of the URI by prefixing the path with a colon. This indicates that this path section is a parameter. The parameter name is the string following the colon. You can get access to the parameters extracted from the URI with "},{"type":"codeVoice","code":"HBRequest.parameters"},{"type":"text","text":". If there are no URI parameters in the path, accessing "},{"type":"codeVoice","code":"HBRequest.parameters"},{"type":"text","text":" will cause a crash, so don’t use it if you haven’t specified a parameter in the route path. This example extracts an id from the URI and uses it to return a specific user. so “\/user\/56” will return user with id 56."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["app.router.get(\"\/user\/:id\") { request in","    let id = request.parameters.get(\"id\", as: Int.self) else { throw HBHTTPError(.badRequest) }","    return getUser(id: id)","}"]},{"inlineContent":[{"text":"In the example above if I fail to access the parameter as an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" then I throw an error. If you throw an ","type":"text"},{"code":"HBHTTPError","type":"codeVoice"},{"text":" it will get converted to a valid HTTP response.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The parameter name in your route can also be of the form "},{"type":"codeVoice","code":"{id}"},{"type":"text","text":", similar to OpenAPI specifications. With this form you can also extract parameter values from the URI that are prefixes or suffixes of a path component."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["app.router.get(\"\/files\/{image}.jpg\") { request in","    let imageName = request.parameters.get(\"image\") else { throw HBHTTPError(.badRequest) }","    return getImage(image: imageName)","}"]},{"inlineContent":[{"text":"In the example above we match all paths that are a file with a jpg extension inside the files folder and then call a function with that image name.","type":"text"}],"type":"paragraph"},{"text":"Groups","type":"heading","level":3,"anchor":"Groups"},{"inlineContent":[{"type":"text","text":"Routes can be grouped together in a "},{"code":"HBRouterGroup","type":"codeVoice"},{"type":"text","text":".  These allow for you to prefix a series of routes with the same path and more importantly apply middleware to only those routes. The example below is a group that includes five handlers all prefixed with the path “\/todos”."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.router.group(\"\/todos\")","    .put(use: createTodo)","    .get(use: listTodos)","    .get(\"{id}\", getTodo)","    .patch(\"{id}\", editTodo)","    .delete(\"{id}\", deleteTodo)"]},{"text":"Route handlers","type":"heading","level":3,"anchor":"Route-handlers"},{"inlineContent":[{"type":"text","text":"A route handler "},{"type":"codeVoice","code":"HBRouteHandler"},{"type":"text","text":" allows you to encapsulate all the components required for a route, and provide separation of the extraction of input parameters from the request and the processing of those parameters. An example could be structrured as follows"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct AddOrder: HBRouteHandler {","    struct Input: Decodable {","        let name: String","        let amount: Double","    }","    struct Output: HBResponseEncodable {","        let id: String","    }","    let input: Input","    let user: User","    ","    init(from request: HBRequest, context: some HBAuthRequestContextProtocol) async throws {","        self.input = try await request.decode(as: Input.self, context: context)","        self.user = try context.auth.require(User.self)","    }","    func handle(context: some HBAuthRequestContextProtocol) async throws -> Output {","        let order = Order(user: self.user.id, details: self.input)","        let order = try await order.save(on: db)","        return Output(id: order.id)","    }","}"]},{"inlineContent":[{"text":"Here you can see the ","type":"text"},{"code":"AddOrder","type":"codeVoice"},{"text":" route handler encapsulates everything you need to know about the add order route. The ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" structs are defined and any additional input parameters that need extracted from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":". The input parameters are extracted in the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" and then the those parameters are processed in the ","type":"text"},{"code":"handle","type":"codeVoice"},{"text":" function. In this example we need to decode the ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" and using the authentication framework from ","type":"text"},{"code":"HummingbirdAuth","type":"codeVoice"},{"text":" we get the authenticated user.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following will add the handler to the application"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["application.router.put(\"order\", use: AddOrder.self)"]},{"text":"Request body","type":"heading","level":3,"anchor":"Request-body"},{"inlineContent":[{"type":"text","text":"By default the request body is an AsyncSequence of ByteBuffers. You can treat it as a series of buffers or collect it into one larger buffer."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ process each buffer in the sequence separately","for try await buffer in request.body {","    process(buffer)","}"]},{"syntax":"swift","type":"codeListing","code":["\/\/ collect all the buffers in the sequence into a single buffer","let buffer = try await request.body.collate(maxSize: maximumBufferSizeAllowed)","}"]},{"inlineContent":[{"text":"Once you have read the sequence of buffers you cannot read it again. If you want to read the contents of a request body in middleware before it reaches the route handler, but still have it available for the route handler you can use ","type":"text"},{"code":"HBRequest.collateBody(context:)","type":"codeVoice"},{"text":". After this point though the request body cannot be treated as a sequence of buffers as it has already been collapsed into a single buffer.","type":"text"}],"type":"paragraph"},{"text":"Editing response in handler","type":"heading","level":3,"anchor":"Editing-response-in-handler"},{"inlineContent":[{"type":"text","text":"The standard way to provide a custom response from a route handler is to return a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" from that handler. This method loses a lot of the automation of encoding responses, generating the correct status code etc."}],"type":"paragraph"},{"inlineContent":[{"text":"Instead you can return what is called a ","type":"text"},{"code":"HBEditedResponse","type":"codeVoice"},{"text":". This includes a type that can generate a response on its own via the ","type":"text"},{"code":"HBResponseGenerator","type":"codeVoice"},{"text":" protocol and includes additional edits to the response.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["application.router.post(\"test\") { request -> HBEditedResponse in","    return .init(","        status: .accepted,","        headers: [.contentType: \"application\/json\"],","        response: #\"{\"test\": \"value\"}\"#","    )","}"]}]}],"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"role":"symbol","title":"HBRouterGroup","type":"topic","url":"\/documentation\/hummingbird\/hbroutergroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird","type":"topic","kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","kind":"symbol","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"url":"\/documentation\/hummingbird\/hbrouter","title":"HBRouter","type":"topic","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"role":"collectionGroup","title":"Encoding and Decoding","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","type":"topic","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","url":"\/documentation\/hummingbird\/requestcontext","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Context","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"role":"symbol","abstract":[{"type":"text","text":"Conform to "},{"code":"HBRouterMethods","type":"codeVoice"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"type":"topic","url":"\/documentation\/hummingbird\/hbroutermethods","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"title":"HBRouterMethods","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"}}}