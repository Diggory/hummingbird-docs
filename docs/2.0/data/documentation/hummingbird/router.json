{"kind":"symbol","seeAlsoSections":[{"title":"Router","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"],"generated":true}],"abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"code":"Responder","type":"codeVoice"},{"type":"text","text":" that will follow these rules."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/init(context:options:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/middlewares"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/add(_:method:responder:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/buildResponder()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/group(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/on(_:method:use:)-3copy"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/RouterMethods-Implementations"],"generated":true}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/hummingbird\/router"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Context","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Context","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:11Hummingbird18BaseRequestContextP","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","text":"BaseRequestContext"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"type":"codeVoice","code":"Router"},{"type":"text","text":" requires an implementation of  the "},{"type":"codeVoice","code":"on(path:method:use)"},{"type":"text","text":" functions but because it"},{"type":"text","text":" "},{"type":"text","text":"also conforms to "},{"type":"codeVoice","code":"RouterMethods"},{"type":"text","text":" it is also possible to call the method specific functions "},{"type":"codeVoice","code":"get"},{"type":"text","text":", "},{"type":"codeVoice","code":"put"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"head"},{"type":"text","text":", "},{"type":"codeVoice","code":"post"},{"type":"text","text":" and "},{"type":"codeVoice","code":"patch"},{"type":"text","text":".  The route handler closures all return objects conforming to"},{"type":"text","text":" "},{"type":"codeVoice","code":"ResponseGenerator"},{"type":"text","text":".  This allows us to support routes which return a multitude of types eg"}],"type":"paragraph"},{"syntax":null,"code":["router.get(\"string\") { _, _ -> String in","    return \"string\"","}","router.post(\"status\") { _, _ -> HTTPResponseStatus in","    return .ok","}","router.data(\"data\") { request, context -> ByteBuffer in","    return context.allocator.buffer(string: \"buffer\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"The default ","type":"text"},{"type":"codeVoice","code":"Router"},{"text":" setup in ","type":"text"},{"type":"codeVoice","code":"Application"},{"text":" is the ","type":"text"},{"type":"codeVoice","code":"TrieRouter"},{"text":" . This uses a","type":"text"},{"text":" ","type":"text"},{"text":"trie to partition all the routes for faster access. It also supports wildcards and parameter extraction","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["router.get(\"user\/*\", use: anyUser)","router.get(\"user\/:id\", use: userWithId)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Both of these match routes which start with “\/user” and the next path segment being anything."},{"type":"text","text":" "},{"type":"text","text":"The second version extracts the path segment out and adds it to "},{"code":"Request.parameters","type":"codeVoice"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"text","text":"key “id”."}],"type":"paragraph"}]}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods"],"kind":"relationships","type":"conformsTo"}],"metadata":{"title":"Router","modules":[{"name":"Hummingbird"}],"navigatorTitle":[{"kind":"identifier","text":"Router"}],"role":"symbol","roleHeading":"Class","externalID":"s:11Hummingbird6RouterC","symbolKind":"class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Router"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"]]},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","title":"Router","type":"topic","url":"\/documentation\/hummingbird\/routerguide","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/init(context:options:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/init(context:options:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird6RouterC7Contextxmfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RouterOptions","preciseIdentifier":"s:11Hummingbird13RouterOptionsV"},{"kind":"text","text":")"}],"url":"\/documentation\/hummingbird\/router\/init(context:options:)","title":"init(context:options:)","abstract":[],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponder":{"kind":"symbol","navigatorTitle":[{"text":"HTTPResponder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/httpresponder","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponder","kind":"identifier"}],"title":"HTTPResponder","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CallbackResponder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CallbackResponder"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CallbackResponder","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"url":"\/documentation\/hummingbird\/callbackresponder","role":"symbol","title":"CallbackResponder","navigatorTitle":[{"text":"CallbackResponder","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/buildResponder()":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/buildResponder()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buildResponder"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"RouterResponder","preciseIdentifier":"s:11Hummingbird15RouterResponderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird6RouterC7Contextxmfp"},{"kind":"text","text":">"}],"url":"\/documentation\/hummingbird\/router\/buildresponder()","title":"buildResponder()","abstract":[{"text":"build responder from router","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/middlewares":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/middlewares","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"middlewares"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MiddlewareGroup","preciseIdentifier":"s:11Hummingbird15MiddlewareGroupC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird6RouterC7Contextxmfp"},{"kind":"text","text":">"}],"url":"\/documentation\/hummingbird\/router\/middlewares","title":"middlewares","abstract":[],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"BaseRequestContext"}],"title":"BaseRequestContext","type":"topic","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","url":"\/documentation\/hummingbird\/baserequestcontext","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGroup":{"url":"\/documentation\/hummingbird\/routergroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","role":"symbol","title":"RouterGroup","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RouterGroup","kind":"identifier"}],"navigatorTitle":[{"text":"RouterGroup","kind":"identifier"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"text":"suffix to the endpoint path","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"kind":"symbol","title":"RouterPath","type":"topic","navigatorTitle":[{"text":"RouterPath","kind":"identifier"}],"url":"\/documentation\/hummingbird\/routerpath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","abstract":[{"text":"Split router path into components","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterOptions":{"kind":"symbol","title":"RouterOptions","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterOptions"}],"url":"\/documentation\/hummingbird\/routeroptions","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterOptions"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterOptions","abstract":[{"text":"Router Options","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMethods":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterMethods"}],"role":"symbol","url":"\/documentation\/hummingbird\/routermethods","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterMethods"}],"type":"topic","title":"RouterMethods","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"RouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/group(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/group(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"group"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"RouterGroup","preciseIdentifier":"s:11Hummingbird11RouterGroupV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird6RouterC7Contextxmfp"},{"kind":"text","text":">"}],"url":"\/documentation\/hummingbird\/router\/group(_:)","title":"group(_:)","abstract":[{"text":"return new ","type":"text"},{"code":"RouterGroup","type":"codeVoice"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterResponder":{"url":"\/documentation\/hummingbird\/routerresponder","title":"RouterResponder","type":"topic","navigatorTitle":[{"text":"RouterResponder","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterResponder","abstract":[{"type":"text","text":"Directs requests to handlers based on the request uri and method."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Router"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"kind":"symbol","role":"symbol","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Router"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouteHandler":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouteHandler"}],"role":"symbol","url":"\/documentation\/hummingbird\/routehandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteHandler"}],"type":"topic","title":"RouteHandler","abstract":[{"type":"text","text":"Object for handling requests."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/on(_:method:use:)-3copy":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/on(_:method:use:)-3copy","abstract":[{"type":"text","text":"Add path for closure returning type conforming to ResponseGenerator"}],"title":"on(_:method:use:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"on"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"method"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9HTTPTypes11HTTPRequestV","kind":"typeIdentifier","text":"HTTPRequest"},{"kind":"text","text":"."},{"preciseIdentifier":"s:9HTTPTypes11HTTPRequestV6MethodV","text":"Method","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"use","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird6RouterC7Contextxmfp","text":"Context","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird17ResponseGeneratorP","text":"ResponseGenerator","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/router\/on(_:method:use:)-3copy","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/RouterMethods-Implementations":{"abstract":[],"title":"RouterMethods Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/router\/routermethods-implementations","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/RouterMethods-Implementations"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"kind":"symbol","navigatorTitle":[{"text":"EndpointPath","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","role":"symbol","abstract":[{"text":"Endpoint path storage","type":"text"}],"type":"topic","title":"EndpointPath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EndpointPath","kind":"identifier"}],"url":"\/documentation\/hummingbird\/endpointpath"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponderBuilder":{"kind":"symbol","navigatorTitle":[{"text":"HTTPResponderBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","role":"symbol","abstract":[{"text":"A type that has a single method to build a HTTPResponder","type":"text"}],"type":"topic","title":"HTTPResponderBuilder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponderBuilder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/httpresponderbuilder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/add(_:method:responder:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/add(_:method:responder:)","abstract":[{"type":"text","text":"Add route to router"}],"title":"add(_:method:responder:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"add"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"method"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPRequest","preciseIdentifier":"s:9HTTPTypes11HTTPRequestV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Method","preciseIdentifier":"s:9HTTPTypes11HTTPRequestV6MethodV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"responder"},{"text":": ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird13HTTPResponderP","text":"HTTPResponder","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:11Hummingbird6RouterC7Contextxmfp","text":"Context","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"url":"\/documentation\/hummingbird\/router\/add(_:method:responder:)","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","type":"topic","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","type":"topic","kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"}}}