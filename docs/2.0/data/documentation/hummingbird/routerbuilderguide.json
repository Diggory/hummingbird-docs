{"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Result Builder Router","roleHeading":"API Collection","modules":[{"name":"HummingbirdRouter"}],"role":"collectionGroup"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"]]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"code":"HummingbirdRouter","type":"codeVoice"},{"type":"text","text":" provides an alternative to the standard trie based "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"text":" that is in the Hummingbird module. ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder"},{"text":" uses a result builder to construct your router.","type":"text"}]},{"type":"codeListing","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"syntax":"swift"},{"anchor":"RequestContext","level":2,"type":"heading","text":"RequestContext"},{"type":"paragraph","inlineContent":[{"text":"To be able to use the result builder router you need to provide a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":" that conforms to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","isActive":true},{"text":". This contains an additional support struct ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","isActive":true},{"type":"text","text":" required by the result builder."}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"]},{"type":"heading","text":"Common Route Verbs","anchor":"Common-Route-Verbs","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions."}]},{"code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"can be written as"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"type":"heading","level":2,"anchor":"Route-middleware","text":"Route middleware"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Routes can be initialised with their own result builder as long as they end with a route "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle"},{"text":" function that returns the response. This allows us to apply middleware to individual routes.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"If you are not adding the handler inline you can add the function reference without the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"]},{"type":"heading","level":2,"text":"RequestContext transformation","anchor":"RequestContext-transformation"},{"type":"paragraph","inlineContent":[{"text":"You can transform the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"text":" to a different type for a group of routes using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","type":"reference","isActive":true},{"text":". When you define the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" type you are converting to you need to define how you initialize it from the original "},{"type":"codeVoice","code":"RequestContext"},{"text":".","type":"text"}]},{"syntax":"swift","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"type":"codeVoice","code":"RequestContext"},{"text":" the conversion is added as follows","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"]},{"anchor":"Controllers","level":3,"type":"heading","text":"Controllers"},{"inlineContent":[{"type":"text","text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","isActive":true},{"text":" you can add the contained routes directly into your router eg","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"]},{"level":3,"text":"Differences from trie router","type":"heading","anchor":"Differences-from-trie-router"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"code":"RouterBuilder","type":"codeVoice"},{"text":" and the more traditional trie based ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" that comes with ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"text":" and this is related to how middleware are processed in groups.","type":"text"}]},{"inlineContent":[{"text":"With the trie based ","type":"text"},{"type":"codeVoice","code":"Router"},{"text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","type":"reference","isActive":true},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"code":"RouteGroup","type":"codeVoice"},{"type":"text","text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent "},{"type":"codeVoice","code":"RouteGroup"},{"text":" paths to be matched for it to run.","type":"text"}]}],"kind":"content"}],"sections":[],"kind":"article","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder"],"anchor":"Reference","title":"Reference"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"title":"init(_:context:builder:)","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildHandler","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildContext","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"RouterPath","preciseIdentifier":"s:11Hummingbird10RouterPathV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"text":"ChildContext","kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp"},{"kind":"text","text":".Type, "},{"text":"builder","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","text":"ChildHandler","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","abstract":[{"text":"Create RouteGroup from RequestContext transform and result builder","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"role":"symbol","url":"\/documentation\/hummingbirdrouter\/routegroup","abstract":[{"type":"text","text":"Router middleware that applies a middleware chain to URIs with a specified prefix"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouteGroup"}],"title":"RouteGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","type":"topic","navigatorTitle":[{"text":"RouteGroup","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}],"abstract":[{"text":"Context data required by ","type":"text"},{"type":"codeVoice","code":"RouterBuilder"}],"title":"RouterBuilderContext","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"RouterBuilderContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Router"}],"abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"navigatorTitle":[{"text":"Router","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/router","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"url":"\/documentation\/hummingbirdrouter\/routerbuilder","abstract":[{"text":"Router built using a result builder","type":"text"}],"role":"symbol","type":"topic","title":"RouterBuilder","navigatorTitle":[{"text":"RouterBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterBuilder","kind":"identifier"}]},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterRequestContext","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdrouter\/routerrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","abstract":[{"text":"Protocol that all request contexts used with RouterBuilder should conform to.","type":"text"}],"navigatorTitle":[{"text":"RouterRequestContext","kind":"identifier"}],"title":"RouterRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Request"}],"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"navigatorTitle":[{"kind":"identifier","text":"Request"}],"title":"Request"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"url":"\/documentation\/hummingbirdrouter\/handle","type":"topic","navigatorTitle":[{"text":"Handle","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Handle","kind":"identifier"}],"abstract":[{"text":"Route Handler Middleware.","type":"text"}],"title":"Handle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"url":"\/documentation\/hummingbirdrouter","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"HummingbirdRouter","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"url":"\/documentation\/hummingbird\/requestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"role":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"url":"\/documentation\/hummingbirdrouter\/routercontroller","abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}],"role":"symbol","type":"topic","title":"RouterController","navigatorTitle":[{"kind":"identifier","text":"RouterController"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterController","kind":"identifier"}]}}}