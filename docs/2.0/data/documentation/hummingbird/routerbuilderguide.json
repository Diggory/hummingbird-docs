{"topicSections":[{"anchor":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder"],"title":"Reference"}],"metadata":{"roleHeading":"API Collection","title":"Result Builder Router","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"HummingbirdRouter"}],"role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"]]},"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"sections":[],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"code":"HummingbirdRouter","type":"codeVoice"},{"text":" provides an alternative to the standard trie based ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","isActive":true},{"text":" that is in the Hummingbird module. ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","isActive":true,"type":"reference"},{"type":"text","text":" uses a result builder to construct your router."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"]},{"level":2,"anchor":"RequestContext","text":"RequestContext","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to use the result builder router you need to provide a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"type":"text","text":" that conforms to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext"},{"text":". This contains an additional support struct ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","type":"reference","isActive":true},{"type":"text","text":" required by the result builder."}]},{"syntax":"swift","type":"codeListing","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"]},{"text":"Common Route Verbs","level":2,"type":"heading","anchor":"Common-Route-Verbs"},{"inlineContent":[{"text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions.","type":"text"}],"type":"paragraph"},{"code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"can be written as"}],"type":"paragraph"},{"code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"syntax":"swift","type":"codeListing"},{"text":"Route middleware","anchor":"Route-middleware","level":2,"type":"heading"},{"inlineContent":[{"text":"Routes can be initialised with their own result builder as long as they end with a route ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","type":"reference","isActive":true},{"text":" function that returns the response. This allows us to apply middleware to individual routes.","type":"text"}],"type":"paragraph"},{"code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you are not adding the handler inline you can add the function reference without the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"]},{"level":2,"type":"heading","text":"RequestContext transformation","anchor":"RequestContext-transformation"},{"type":"paragraph","inlineContent":[{"text":"You can transform the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" to a different type for a group of routes using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","type":"reference","isActive":true},{"text":". When you define the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" type you are converting to you need to define how you initialize it from the original "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Once you have defined how to perform the transform from your original ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" the conversion is added as follows"}],"type":"paragraph"},{"syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing"},{"level":3,"type":"heading","text":"Controllers","anchor":"Controllers"},{"inlineContent":[{"text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","isActive":true},{"type":"text","text":" you can add the contained routes directly into your router eg"}],"type":"paragraph"},{"syntax":"swift","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"],"type":"codeListing"},{"type":"heading","level":3,"anchor":"Differences-from-trie-router","text":"Differences from trie router"},{"inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"type":"codeVoice","code":"RouterBuilder"},{"text":" and the more traditional trie based ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" that comes with ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" and this is related to how middleware are processed in groups."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"With the trie based ","type":"text"},{"code":"Router","type":"codeVoice"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup"},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"type":"codeVoice","code":"RouteGroup"},{"type":"text","text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent "},{"type":"codeVoice","code":"RouteGroup"},{"text":" paths to be matched for it to run.","type":"text"}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"type":"topic","url":"\/documentation\/hummingbirdrouter\/routegroup","title":"RouteGroup","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"RouteGroup","kind":"identifier"}],"abstract":[{"type":"text","text":"Router middleware that applies a middleware chain to URIs with a specified prefix"}],"navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Request"}],"url":"\/documentation\/hummingbirdcore\/request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"title":"Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"kind":"symbol","title":"RouterBuilder","navigatorTitle":[{"kind":"identifier","text":"RouterBuilder"}],"abstract":[{"text":"Router built using a result builder","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RouterBuilder","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","url":"\/documentation\/hummingbirdrouter\/routerbuilder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","role":"symbol","url":"\/documentation\/hummingbirdrouter\/routercontroller","kind":"symbol","title":"RouterController","navigatorTitle":[{"text":"RouterController","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RouterController","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"type":"topic","url":"\/documentation\/hummingbirdrouter\/routerrequestcontext","title":"RouterRequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RouterRequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts used with RouterBuilder should conform to.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"RouterRequestContext"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestcontext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true,"type":"reference"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"title":"RequestContext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"navigatorTitle":[{"text":"Router","kind":"identifier"}],"url":"\/documentation\/hummingbird\/router","title":"Router","role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"text":" that will follow these rules.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterBuilderContext"}],"abstract":[{"type":"text","text":"Context data required by "},{"type":"codeVoice","code":"RouterBuilder"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RouterBuilderContext","kind":"identifier"}],"title":"RouterBuilderContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"type":"topic","url":"\/documentation\/hummingbirdrouter\/handle","title":"Handle","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Handle","kind":"identifier"}],"abstract":[{"text":"Route Handler Middleware.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Handle"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"type":"topic","abstract":[{"type":"text","text":"Create RouteGroup from RequestContext transform and result builder"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildHandler"},{"text":", ","kind":"text"},{"text":"ChildContext","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"RouterPath","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird10RouterPathV"},{"kind":"text","text":", "},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","text":"ChildContext"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"builder"},{"text":": () -> ","kind":"text"},{"text":"ChildHandler","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","role":"symbol","title":"init(_:context:builder:)"},"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/hummingbirdrouter","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}],"title":"HummingbirdRouter","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"}}}