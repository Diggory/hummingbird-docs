{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"]]},"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdRouter"},{"type":"text","text":" provides an alternative to the standard trie based "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","isActive":true},{"text":" that is in the Hummingbird module. ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","isActive":true},{"text":" uses a result builder to construct your router.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"]},{"anchor":"RequestContext","level":2,"type":"heading","text":"RequestContext"},{"inlineContent":[{"type":"text","text":"To be able to use the result builder router you need to provide a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" that conforms to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","isActive":true},{"type":"text","text":". This contains an additional support struct "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","type":"reference","isActive":true},{"text":" required by the result builder.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"]},{"text":"Common Route Verbs","level":2,"type":"heading","anchor":"Common-Route-Verbs"},{"inlineContent":[{"text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"inlineContent":[{"text":"can be written as","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"level":2,"text":"Route middleware","type":"heading","anchor":"Route-middleware"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Routes can be initialised with their own result builder as long as they end with a route "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle"},{"type":"text","text":" function that returns the response. This allows us to apply middleware to individual routes."}]},{"type":"codeListing","code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not adding the handler inline you can add the function reference without the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"]},{"type":"heading","text":"RequestContext transformation","level":2,"anchor":"RequestContext-transformation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can transform the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"type":"text","text":" to a different type for a group of routes using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)"},{"type":"text","text":". When you define the "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" type you are converting to you need to define how you initialize it from the original "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" the conversion is added as follows"}],"type":"paragraph"},{"code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Controllers","anchor":"Controllers","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController"},{"type":"text","text":" you can add the contained routes directly into your router eg"}]},{"type":"codeListing","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"],"syntax":"swift"},{"anchor":"Differences-from-trie-router","type":"heading","text":"Differences from trie router","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"type":"codeVoice","code":"RouterBuilder"},{"text":" and the more traditional trie based ","type":"text"},{"type":"codeVoice","code":"Router"},{"type":"text","text":" that comes with "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" and this is related to how middleware are processed in groups."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the trie based "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}]},{"inlineContent":[{"text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup"},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"type":"codeVoice","code":"RouteGroup"},{"type":"text","text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent "},{"type":"codeVoice","code":"RouteGroup"},{"type":"text","text":" paths to be matched for it to run."}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder"],"anchor":"Reference","title":"Reference"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"metadata":{"role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"HummingbirdRouter"}],"roleHeading":"API Collection","title":"Result Builder Router"},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestcontext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true,"type":"reference"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"kind":"symbol","title":"RequestContext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"url":"\/documentation\/hummingbirdrouter\/handle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","role":"symbol","kind":"symbol","title":"Handle","type":"topic","navigatorTitle":[{"text":"Handle","kind":"identifier"}],"abstract":[{"text":"Route Handler Middleware.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Handle","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"url":"\/documentation\/hummingbirdrouter\/routerbuilder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","role":"symbol","kind":"symbol","title":"RouterBuilder","type":"topic","navigatorTitle":[{"text":"RouterBuilder","kind":"identifier"}],"abstract":[{"text":"Router built using a result builder","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterBuilder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"abstract":[{"text":"Context data required by ","type":"text"},{"type":"codeVoice","code":"RouterBuilder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","title":"RouterBuilderContext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterBuilderContext"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterBuilderContext"}],"url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","role":"symbol","kind":"symbol","title":"init(_:context:builder:)","type":"topic","abstract":[{"text":"Create RouteGroup that transforms the RequestContext from result builder","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildHandler"},{"kind":"text","text":", "},{"text":"ChildContext","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird10RouterPathV","text":"RouterPath"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","text":"ChildContext","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"builder"},{"kind":"text","text":": () -> "},{"text":"ChildHandler","kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp"},{"text":")","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"navigatorTitle":[{"kind":"identifier","text":"Request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/request","kind":"symbol","title":"Request","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol"},"logo.png":{"alt":null,"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"url":"\/documentation\/hummingbirdrouter","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}],"kind":"symbol","title":"HummingbirdRouter","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"type":"topic","abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","title":"RouterController","role":"symbol","navigatorTitle":[{"text":"RouterController","kind":"identifier"}],"url":"\/documentation\/hummingbirdrouter\/routercontroller","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterController"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"navigatorTitle":[{"text":"RouteGroup","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouteGroup"}],"url":"\/documentation\/hummingbirdrouter\/routegroup","abstract":[{"text":"Router middleware that applies a middleware chain to URIs with a specified prefix","type":"text"}],"kind":"symbol","title":"RouteGroup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"url":"\/documentation\/hummingbirdrouter\/routerrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","role":"symbol","kind":"symbol","title":"RouterRequestContext","type":"topic","navigatorTitle":[{"text":"RouterRequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts used with RouterBuilder should conform to.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"navigatorTitle":[{"text":"Router","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Router"}],"url":"\/documentation\/hummingbird\/router","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"kind":"symbol","title":"Router","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"symbol"}}}