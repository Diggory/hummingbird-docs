{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdRouter"},{"text":" provides an alternative to the standard trie based ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","isActive":true,"type":"reference"},{"type":"text","text":" that is in the Hummingbird module. "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","isActive":true,"type":"reference"},{"text":" uses a result builder to construct your router.","type":"text"}]},{"syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing"},{"type":"heading","anchor":"RequestContext","level":2,"text":"RequestContext"},{"inlineContent":[{"type":"text","text":"To be able to use the result builder router you need to provide a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":" that conforms to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","isActive":true},{"text":". This contains an additional support struct ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","isActive":true},{"text":" required by the result builder.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Common-Route-Verbs","text":"Common Route Verbs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions."}]},{"type":"codeListing","syntax":"swift","code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"inlineContent":[{"text":"can be written as","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"level":2,"text":"Route middleware","type":"heading","anchor":"Route-middleware"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Routes can be initialised with their own result builder as long as they end with a route "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","type":"reference"},{"type":"text","text":" function that returns the response. This allows us to apply middleware to individual routes."}]},{"code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If you are not adding the handler inline you can add the function reference without the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"RequestContext-transformation","level":2,"text":"RequestContext transformation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can transform the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"type":"text","text":" to a different type for a group of routes using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","isActive":true},{"type":"text","text":". When you define the "},{"code":"RequestContext","type":"codeVoice"},{"text":" type you are converting to you need to define how you initialize it from the original ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":".","type":"text"}]},{"code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" the conversion is added as follows"}],"type":"paragraph"},{"syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing"},{"anchor":"Controllers","text":"Controllers","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController"},{"text":" you can add the contained routes directly into your router eg","type":"text"}],"type":"paragraph"},{"code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Differences from trie router","anchor":"Differences-from-trie-router"},{"inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"code":"RouterBuilder","type":"codeVoice"},{"type":"text","text":" and the more traditional trie based "},{"code":"Router","type":"codeVoice"},{"type":"text","text":" that comes with "},{"type":"codeVoice","code":"Hummingbird"},{"text":" and this is related to how middleware are processed in groups.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"With the trie based "},{"type":"codeVoice","code":"Router"},{"text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","isActive":true},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"type":"codeVoice","code":"RouteGroup"},{"text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent ","type":"text"},{"type":"codeVoice","code":"RouteGroup"},{"text":" paths to be matched for it to run.","type":"text"}],"type":"paragraph"}]}],"metadata":{"roleHeading":"API Collection","modules":[{"name":"HummingbirdRouter"}],"role":"collectionGroup","title":"Result Builder Router","images":[{"identifier":"logo.png","type":"icon"}]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"]]},"sections":[],"abstract":[{"type":"text","text":"Building your router using a result builder."}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder"],"title":"Reference","anchor":"Reference"}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/request","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","navigatorTitle":[{"text":"Request","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","role":"symbol","url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"RouterBuilderContext","kind":"identifier"}],"type":"topic","title":"RouterBuilderContext","abstract":[{"type":"text","text":"Context data required by "},{"code":"RouterBuilder","type":"codeVoice"}],"navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","role":"collection","url":"\/documentation\/hummingbirdrouter","type":"topic","title":"HummingbirdRouter","abstract":[{"text":"Alternative result builder based router for Hummingbird.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","title":"RouterController","navigatorTitle":[{"text":"RouterController","kind":"identifier"}],"url":"\/documentation\/hummingbirdrouter\/routercontroller","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RouterController","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"title":"RouterRequestContext","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","kind":"symbol","navigatorTitle":[{"text":"RouterRequestContext","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RouterRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol that all request contexts used with RouterBuilder should conform to."}],"url":"\/documentation\/hummingbirdrouter\/routerrequestcontext"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","kind":"symbol","title":"RouterBuilder","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"RouterBuilder","kind":"identifier"}],"abstract":[{"text":"Router built using a result builder","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"RouterBuilder"}],"type":"topic","url":"\/documentation\/hummingbirdrouter\/routerbuilder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","role":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}],"url":"\/documentation\/hummingbird\/requestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","kind":"symbol","title":"Handle","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Handle","kind":"identifier"}],"abstract":[{"type":"text","text":"Route Handler Middleware."}],"navigatorTitle":[{"kind":"identifier","text":"Handle"}],"type":"topic","url":"\/documentation\/hummingbirdrouter\/handle","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","kind":"symbol","title":"RouteGroup","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"RouteGroup","kind":"identifier"}],"abstract":[{"text":"Router middleware that applies a middleware chain to URIs with a specified prefix","type":"text"}],"navigatorTitle":[{"text":"RouteGroup","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdrouter\/routegroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router","role":"symbol","navigatorTitle":[{"text":"Router","kind":"identifier"}],"type":"topic","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","abstract":[{"type":"text","text":"Create RouteGroup from RequestContext transform and result builder"}],"kind":"symbol","role":"symbol","title":"init(_:context:builder:)","url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildHandler","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ChildContext","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:11Hummingbird10RouterPathV","kind":"typeIdentifier","text":"RouterPath"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChildContext","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"builder"},{"kind":"text","text":": () -> "},{"text":"ChildHandler","kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp"},{"text":")","kind":"text"}]}}}