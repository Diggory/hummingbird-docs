{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Each migration includs an ","type":"text"},{"type":"codeVoice","code":"apply"},{"text":" method that applies the change and a ","type":"text"},{"type":"codeVoice","code":"revert"},{"text":" method that reverts the change.","type":"text"}]},{"code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}]},{"level":3,"type":"heading","text":"Adding migrations","anchor":"Adding-migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","type":"reference","isActive":true},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"code":"add","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"]},{"level":3,"anchor":"Applying-migrations","type":"heading","text":"Applying migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"type":"paragraph","inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" set to true, the "},{"code":"apply","type":"codeVoice"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to false.","type":"text"}]},{"type":"heading","anchor":"Reverting-migrations","text":"Reverting migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The user calls ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"type":"text","text":". This will revert all the migrations applied to the database."}]}]},{"content":[{"inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","isActive":true,"type":"reference"},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Migration-groups","type":"heading","level":3,"text":"Migration groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}]},{"inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"code":"\/PostgresMigrations\/DatabaseMigrationsGroup","type":"codeVoice"},{"text":" and add a new static variable for the migration group id.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}]},{"syntax":"swift","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist driver that come with "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","isActive":true},{"type":"text","text":" and the job queue driver from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},{"type":"text","text":" both use groups to separate their migrations from any the user might add."}]},{"level":3,"anchor":"Reference","text":"Reference","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true,"title":"Articles","anchor":"Articles"}],"metadata":{"role":"article","modules":[{"name":"HummingbirdPostgres"},{"name":"PostgresMigrations"}],"roleHeading":"Article","title":"Database Migrations","images":[{"identifier":"logo.png","type":"icon"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"type":"text","text":"Managing database structure changes."}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"url":"\/documentation\/jobspostgres","title":"JobsPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","kind":"symbol","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"title":"register(_:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"DatabaseMigration","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrationgroup","title":"DatabaseMigrationGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","abstract":[{"type":"text","text":"Group identifier for a group of migrations."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DatabaseMigrationGroup","kind":"identifier"}],"navigatorTitle":[{"text":"DatabaseMigrationGroup","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"title":"DatabaseMigration","url":"\/documentation\/postgresmigrations\/databasemigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigration"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigration"}],"role":"symbol","abstract":[{"text":"Protocol for a database migration","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"title":"HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","kind":"symbol","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Working with Postgres databases."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations","title":"DatabaseMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","abstract":[{"text":"Database migration support","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigrations"}],"navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"kind":"symbol"},"logo.png":{"alt":null,"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","title":"revert(client:groups:logger:dryRun:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","abstract":[{"text":"Revert database migrations","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PostgresClient","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"groups"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup","kind":"typeIdentifier"},{"kind":"text","text":"], "},{"text":"logger","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"title":"beforeServerStarts(perform:)","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"beforeServerStarts"},{"kind":"text","text":"("},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"role":"collection","url":"\/documentation\/postgresmigrations","images":[{"type":"icon","identifier":"logo.png"}],"title":"PostgresMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","abstract":[{"text":"Postgres database migration service","type":"text"}],"type":"topic","kind":"symbol"}}}