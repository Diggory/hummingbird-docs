{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" method that applies the change and a "},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}]},{"code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data."}]},{"text":"Adding migrations","type":"heading","anchor":"Adding-migrations","level":3},{"type":"paragraph","inlineContent":[{"text":"You need to create a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"type":"codeVoice","code":"add"},{"text":".","type":"text"}]},{"code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"type":"codeListing","syntax":"swift"},{"text":"Applying migrations","type":"heading","anchor":"Applying-migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true},{"type":"text","text":"."}]},{"code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to true, the ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to false.","type":"text"}]},{"text":"Reverting migrations","type":"heading","anchor":"Reverting-migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The user calls ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"text":". This will revert all the migrations applied to the database.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","isActive":true,"type":"reference"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}]}]}]},{"text":"Migration groups","type":"heading","anchor":"Migration-groups","level":3},{"type":"paragraph","inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"text":" and add a new static variable for the migration group id.","type":"text"}]},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}]},{"code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}]},{"text":"Reference","type":"heading","anchor":"Reference","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup"}],"type":"paragraph"}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"kind":"article","metadata":{"modules":[{"name":"PostgresMigrations"}],"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","title":"Migrations","role":"article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Managing database structure changes.","type":"text"}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"title":"PostgresMigrations","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","url":"\/documentation\/postgresmigrations","abstract":[{"text":"Postgres database migration service","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","abstract":[{"type":"text","text":"Register migration without it being applied"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","kind":"typeIdentifier","text":"DatabaseMigration"},{"kind":"text","text":")"}],"title":"register(_:)","kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","type":"topic","kind":"symbol","role":"symbol","title":"beforeServerStarts(perform:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},"logo.png":{"variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png","type":"image"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"title":"DatabaseMigrations","url":"\/documentation\/postgresmigrations\/databasemigrations","abstract":[{"text":"Database migration support","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"title":"DatabaseMigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","abstract":[{"text":"Protocol for a database migration","type":"text"}],"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigration","navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigration","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"text":"client","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"role":"symbol","abstract":[{"type":"text","text":"Revert database migrations"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","type":"topic","title":"revert(client:groups:logger:dryRun:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigrationGroup"}],"title":"DatabaseMigrationGroup","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","abstract":[{"text":"Group identifier for a group of migrations.","type":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrationgroup","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrationGroup"}],"type":"topic","kind":"symbol"}}}