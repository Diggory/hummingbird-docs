{"kind":"article","metadata":{"role":"article","title":"Migrations","modules":[{"name":"HummingbirdPostgres"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Articles","generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"text":"Managing database structure changes.","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" method that applies the change and a "},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}]},{"type":"codeListing","code":["struct CreateMyTableMigration: PostgresMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}]},{"text":"Adding migrations","type":"heading","anchor":"Adding-migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","type":"reference","isActive":true},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["import HummingbirdPostgres","","let migrations = PostgresMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift"},{"text":"Applying migrations","type":"heading","anchor":"Applying-migrations","level":3},{"type":"paragraph","inlineContent":[{"text":"As you need an active ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" to apply migrations you need to run the migrate once you have called ","type":"text"},{"code":"PostgresClient.run","type":"codeVoice"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)"},{"text":".","type":"text"}]},{"type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.runBeforeServerStart {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to true, the "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}]},{"text":"Reverting migrations","type":"heading","anchor":"Reverting-migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The user calls "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","isActive":true,"type":"reference"},{"type":"text","text":". This will revert all the migrations applied to the database."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","type":"reference","isActive":true},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]}]},{"text":"Migration groups","type":"heading","anchor":"Migration-groups","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"type":"codeVoice","code":"PostgresMigrationGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}]},{"type":"codeListing","code":["extension PostgresMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}]},{"type":"codeListing","code":["extension CreateMyTableMigration {","    var group: PostgresMigrationGroup { .myGroup }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add."}]},{"text":"Reference","type":"heading","anchor":"Reference","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","type":"reference","isActive":true}]}]}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","kind":"article","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigration":{"kind":"symbol","url":"\/documentation\/hummingbirdpostgres\/postgresmigration","title":"PostgresMigration","abstract":[{"text":"Protocol for a database migration","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PostgresMigration"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresMigration"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrationGroup":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresMigrationGroup"}],"title":"PostgresMigrationGroup","abstract":[{"type":"text","text":"Group identifier for a group of migrations."}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","url":"\/documentation\/hummingbirdpostgres\/postgresmigrationgroup","navigatorTitle":[{"kind":"identifier","text":"PostgresMigrationGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/register(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","title":"register(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"preciseIdentifier":"s:19HummingbirdPostgres0B9MigrationP","kind":"typeIdentifier","text":"PostgresMigration"},{"kind":"text","text":")"}],"url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/register(_:)","kind":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresMigrations"}],"title":"PostgresMigrations","abstract":[{"type":"text","text":"Database migration support"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations","navigatorTitle":[{"kind":"identifier","text":"PostgresMigrations"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/revert(client:groups:logger:dryRun:)":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"PostgresMigrationGroup","kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdPostgres0B14MigrationGroupV"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/revert(client:groups:logger:dryrun:)","abstract":[{"type":"text","text":"Revert database migrations"}],"title":"revert(client:groups:logger:dryRun:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)","kind":"symbol","title":"runBeforeServerStart(_:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","type":"topic","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","kind":"symbol","title":"HummingbirdPostgres","abstract":[{"type":"text","text":"Working with Postgres databases."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres"}}}