{"abstract":[{"text":"Managing database structure changes.","type":"text"}],"sections":[],"metadata":{"roleHeading":"Article","role":"article","title":"Migrations","modules":[{"name":"HummingbirdPostgres"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]]},"kind":"article","seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Each migration includs an ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" method that applies the change and a ","type":"text"},{"code":"revert","type":"codeVoice"},{"text":" method that reverts the change.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct CreateMyTableMigration: PostgresMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data."}]},{"type":"heading","level":3,"anchor":"Adding-migrations","text":"Adding migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations"},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["import HummingbirdPostgres","","let migrations = PostgresMigrations()","await migrations.add(CreateMyTableMigration())"]},{"type":"heading","level":3,"anchor":"Applying-migrations","text":"Applying migrations"},{"type":"paragraph","inlineContent":[{"text":"As you need an active ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" to apply migrations you need to run the migrate once you have called ","type":"text"},{"code":"PostgresClient.run","type":"codeVoice"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.runBeforeServerStart {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" set to true, the "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" set to false."}]},{"type":"heading","level":3,"anchor":"Reverting-migrations","text":"Reverting migrations"},{"type":"paragraph","inlineContent":[{"text":"There are a number of situations where a migration maybe reverted.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The user calls ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","type":"reference","isActive":true},{"text":". This will revert all the migrations applied to the database.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","type":"reference"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]}]},{"type":"heading","level":3,"anchor":"Migration-groups","text":"Migration groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}]},{"type":"paragraph","inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"code":"PostgresMigrationGroup","type":"codeVoice"},{"text":" and add a new static variable for the migration group id.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension PostgresMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}]},{"type":"codeListing","syntax":"swift","code":["extension CreateMyTableMigration {","    var group: PostgresMigrationGroup { .myGroup }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}]},{"type":"paragraph","inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}]},{"type":"heading","level":3,"anchor":"Reference","text":"Reference"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","isActive":true}],"type":"paragraph"}]}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrations","kind":"identifier"}],"url":"\/documentation\/hummingbirdpostgres\/postgresmigrations","type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"PostgresMigrations","kind":"identifier"}],"abstract":[{"type":"text","text":"Database migration support"}],"title":"PostgresMigrations"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/revert(client:groups:logger:dryRun:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/revert(client:groups:logger:dryrun:)","kind":"symbol","abstract":[{"text":"Revert database migrations","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"PostgresClient","kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"PostgresMigrationGroup","kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdPostgres0B14MigrationGroupV"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"revert(client:groups:logger:dryRun:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/register(_:)":{"url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/register(_:)","abstract":[{"type":"text","text":"Register migration without it being applied"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdPostgres0B9MigrationP","text":"PostgresMigration"},{"kind":"text","text":")"}],"role":"symbol","title":"register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigration":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","url":"\/documentation\/hummingbirdpostgres\/postgresmigration","kind":"symbol","type":"topic","abstract":[{"text":"Protocol for a database migration","type":"text"}],"role":"symbol","title":"PostgresMigration","navigatorTitle":[{"text":"PostgresMigration","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigration","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","title":"HummingbirdPostgres","role":"collection","url":"\/documentation\/hummingbirdpostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrationGroup":{"abstract":[{"text":"Group identifier for a group of migrations.","type":"text"}],"navigatorTitle":[{"text":"PostgresMigrationGroup","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrationGroup","kind":"identifier"}],"url":"\/documentation\/hummingbirdpostgres\/postgresmigrationgroup","type":"topic","kind":"symbol","title":"PostgresMigrationGroup","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"title":"runBeforeServerStart(_:)","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}]}}}