{"metadata":{"role":"article","title":"Migrations","roleHeading":"Article","modules":[{"name":"HummingbirdPostgres"}]},"sections":[],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","abstract":[{"type":"text","text":"Managing database structure changes."}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" method that applies the change and a "},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}],"type":"paragraph"},{"type":"codeListing","code":["struct CreateMyTableMigration: PostgresMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"text":"Adding migrations","type":"heading","anchor":"Adding-migrations","level":3},{"inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","isActive":true},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"type":"codeVoice","code":"add"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["import HummingbirdPostgres","","let migrations = PostgresMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift"},{"text":"Applying migrations","type":"heading","anchor":"Applying-migrations","level":3},{"inlineContent":[{"text":"As you need an active ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" to apply migrations you need to run the migrate once you have called ","type":"text"},{"code":"PostgresClient.run","type":"codeVoice"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to true, the "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}],"type":"paragraph"},{"text":"Reverting migrations","type":"heading","anchor":"Reverting-migrations","level":3},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The user calls "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)"},{"type":"text","text":". This will revert all the migrations applied to the database."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","isActive":true},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}]}]}]},{"text":"Migration groups","type":"heading","anchor":"Migration-groups","level":3},{"inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"code":"PostgresMigrationGroup","type":"codeVoice"},{"text":" and add a new static variable for the migration group id.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension PostgresMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}],"type":"paragraph"},{"type":"codeListing","code":["extension CreateMyTableMigration {","    var group: PostgresMigrationGroup { .myGroup }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}],"type":"paragraph"},{"text":"Reference","type":"heading","anchor":"Reference","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","type":"reference","isActive":true}]}]}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"collectionGroup","type":"topic","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/revert(client:groups:logger:dryRun:)":{"abstract":[{"text":"Revert database migrations","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","type":"topic","title":"revert(client:groups:logger:dryRun:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PostgresClient","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"groups"},{"text":": [","kind":"text"},{"text":"PostgresMigrationGroup","kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdPostgres0B14MigrationGroupV"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/revert(client:groups:logger:dryrun:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"role":"symbol","type":"topic","title":"beforeServerStarts(perform:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"beforeServerStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"PostgresMigrations","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations","abstract":[{"text":"Database migration support","type":"text"}],"kind":"symbol","title":"PostgresMigrations","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","kind":"symbol","type":"topic","title":"HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/register(_:)":{"title":"register(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"PostgresMigration","kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdPostgres0B9MigrationP"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","abstract":[{"text":"Register migration without it being applied","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/register(_:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigration":{"abstract":[{"text":"Protocol for a database migration","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"PostgresMigration","kind":"identifier"}],"role":"symbol","type":"topic","title":"PostgresMigration","url":"\/documentation\/hummingbirdpostgres\/postgresmigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","navigatorTitle":[{"text":"PostgresMigration","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrationGroup":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PostgresMigrationGroup","kind":"identifier"}],"navigatorTitle":[{"text":"PostgresMigrationGroup","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","type":"topic","url":"\/documentation\/hummingbirdpostgres\/postgresmigrationgroup","kind":"symbol","abstract":[{"text":"Group identifier for a group of migrations.","type":"text"}],"title":"PostgresMigrationGroup"}}}