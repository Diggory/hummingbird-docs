{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"metadata":{"role":"article","title":"Database Migrations","modules":[{"name":"HummingbirdPostgres"},{"name":"PostgresMigrations"}],"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Articles","anchor":"Articles"}],"kind":"article","abstract":[{"text":"Managing database structure changes.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each migration includs an "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" method that applies the change and a "},{"code":"revert","type":"codeVoice"},{"text":" method that reverts the change.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"]},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Adding-migrations","text":"Adding migrations","type":"heading"},{"inlineContent":[{"text":"You need to create a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Applying-migrations","text":"Applying migrations"},{"inlineContent":[{"text":"As you need an active ","type":"text"},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"type":"paragraph","inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to true, the "},{"type":"codeVoice","code":"apply"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}]},{"text":"Reverting migrations","type":"heading","anchor":"Reverting-migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The user calls "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","isActive":true},{"text":". This will revert all the migrations applied to the database.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","isActive":true,"type":"reference"},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Migration-groups","type":"heading","level":3,"text":"Migration groups"},{"type":"paragraph","inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"type":"codeVoice","code":".default"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"code":"\/PostgresMigrations\/DatabaseMigrationsGroup","type":"codeVoice"},{"type":"text","text":" and add a new static variable for the migration group id."}],"type":"paragraph"},{"type":"codeListing","code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}]},{"type":"codeListing","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The persist driver that come with ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","isActive":true},{"text":" and the job queue driver from ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},{"text":" both use groups to separate their migrations from any the user might add.","type":"text"}]},{"anchor":"Reference","level":3,"type":"heading","text":"Reference"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","type":"reference","isActive":true}]}]}]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigrations"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrations"}],"url":"\/documentation\/postgresmigrations\/databasemigrations","abstract":[{"text":"Database migration support","type":"text"}],"title":"DatabaseMigrations","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","abstract":[{"text":"Revert database migrations","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PostgresClient","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"groups"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","kind":"typeIdentifier","text":"DatabaseMigrationGroup"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"logger"},{"kind":"text","text":": "},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":", "},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"}],"type":"topic","title":"revert(client:groups:logger:dryRun:)"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"kind":"symbol","type":"topic","url":"\/documentation\/jobspostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","title":"JobsPostgres","role":"collection","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"PostgresMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","abstract":[{"text":"Postgres database migration service","type":"text"}],"url":"\/documentation\/postgresmigrations","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"title":"DatabaseMigration","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"DatabaseMigration","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Protocol for a database migration"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigration"}],"kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"HummingbirdPostgres","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","abstract":[{"type":"text","text":"Working with Postgres databases."}],"url":"\/documentation\/hummingbirdpostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"role":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"title":"beforeServerStarts(perform:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"beforeServerStarts","kind":"identifier"},{"kind":"text","text":"("},{"text":"perform","kind":"externalParam"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigrationGroup"}],"url":"\/documentation\/postgresmigrations\/databasemigrationgroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","title":"DatabaseMigrationGroup","kind":"symbol","navigatorTitle":[{"text":"DatabaseMigrationGroup","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Group identifier for a group of migrations."}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","text":"DatabaseMigration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","title":"register(_:)","abstract":[{"text":"Register migration without it being applied","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","type":"topic"}}}