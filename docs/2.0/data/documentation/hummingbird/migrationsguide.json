{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"abstract":[{"text":"Managing database structure changes.","type":"text"}],"metadata":{"modules":[{"name":"PostgresMigrations"}],"role":"article","roleHeading":"Article","title":"Migrations","images":[{"type":"icon","identifier":"logo.png"}]},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints."}]},{"inlineContent":[{"type":"text","text":"Each migration includs an "},{"code":"apply","type":"codeVoice"},{"text":" method that applies the change and a ","type":"text"},{"type":"codeVoice","code":"revert"},{"text":" method that reverts the change.","type":"text"}],"type":"paragraph"},{"code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data."}]},{"level":3,"type":"heading","anchor":"Adding-migrations","text":"Adding migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","type":"reference"},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift","type":"codeListing"},{"anchor":"Applying-migrations","level":3,"type":"heading","text":"Applying migrations"},{"inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"text":" to apply migrations you need to run the migrate once you have called ","type":"text"},{"type":"codeVoice","code":"PostgresClient.run"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" set to true, the "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"text":"Reverting migrations","anchor":"Reverting-migrations","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The user calls "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"type":"text","text":". This will revert all the migrations applied to the database."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)"},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","anchor":"Migration-groups","text":"Migration groups"},{"type":"paragraph","inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}]},{"inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"code":"\/PostgresMigrations\/DatabaseMigrationsGroup","type":"codeVoice"},{"text":" and add a new static variable for the migration group id.","type":"text"}],"type":"paragraph"},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}]},{"code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}]},{"anchor":"Reference","type":"heading","text":"Reference","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","isActive":true}],"type":"paragraph"}]}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"url":"\/documentation\/postgresmigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","role":"collection","kind":"symbol","type":"topic","title":"PostgresMigrations","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Postgres database migration service"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DatabaseMigrationGroup"}],"kind":"symbol","role":"symbol","title":"DatabaseMigrationGroup","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrationGroup"}],"url":"\/documentation\/postgresmigrations\/databasemigrationgroup","type":"topic","abstract":[{"type":"text","text":"Group identifier for a group of migrations."}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrations"}],"url":"\/documentation\/postgresmigrations\/databasemigrations","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","role":"symbol","kind":"symbol","type":"topic","title":"DatabaseMigrations","abstract":[{"text":"Database migration support","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"type":"topic","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"role":"symbol","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","title":"beforeServerStarts(perform:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DatabaseMigration","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","kind":"symbol","abstract":[{"type":"text","text":"Protocol for a database migration"}],"role":"symbol","type":"topic","title":"DatabaseMigration","navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}],"url":"\/documentation\/postgresmigrations\/databasemigration"},"logo.png":{"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"text":"client","kind":"externalParam"},{"kind":"text","text":": "},{"text":"PostgresClient","preciseIdentifier":"s:11PostgresNIO0A6ClientC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"DatabaseMigrationGroup","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"logger"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"kind":"symbol","role":"symbol","title":"revert(client:groups:logger:dryRun:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","type":"topic","abstract":[{"type":"text","text":"Revert database migrations"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","text":"DatabaseMigration"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","kind":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"role":"symbol","type":"topic","title":"register(_:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)"}}}