{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints. The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","isActive":true,"type":"reference"},{"type":"text","text":" library that comes with HummingbirdPostgres provides support for setting up your own database migrations."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using Fluent then you should use the migration support that comes with Fluent."}]}],"type":"aside","style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" method that applies the change and a "},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}],"type":"paragraph"},{"code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}]},{"text":"Adding migrations","level":3,"type":"heading","anchor":"Adding-migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"type":"codeVoice","code":"add"},{"type":"text","text":"."}]},{"code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"Applying-migrations","text":"Applying migrations","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"As you need an active ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"code":"PostgresClient.run","type":"codeVoice"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true},{"text":".","type":"text"}]},{"code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"text":" set to true, the ","type":"text"},{"type":"codeVoice","code":"apply"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}]},{"anchor":"Reverting-migrations","text":"Reverting migrations","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The user calls "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","isActive":true,"type":"reference"},{"text":". This will revert all the migrations applied to the database.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","isActive":true,"type":"reference"},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}]}]}],"type":"unorderedList"},{"type":"heading","anchor":"Migration-groups","text":"Migration groups","level":3},{"inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"type":"codeVoice","code":".default"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"code":"\/PostgresMigrations\/DatabaseMigrationsGroup","type":"codeVoice"},{"type":"text","text":" and add a new static variable for the migration group id."}]},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"]},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"inlineContent":[{"text":"The persist driver that come with ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","isActive":true,"type":"reference"},{"type":"text","text":" and the job queue driver from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},{"type":"text","text":" both use groups to separate their migrations from any the user might add."}],"type":"paragraph"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"],"title":"Related Documentation"},{"anchor":"Database-Integration","generated":true,"title":"Database Integration","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Database Migrations","images":[{"type":"icon","identifier":"logo.png"}],"role":"article"},"abstract":[{"text":"Managing database structure changes.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"kind":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"beforeServerStarts","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","title":"beforeServerStarts(perform:)"},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"title":"Store Data with MongoKitten","type":"topic","kind":"overview","role":"overview","url":"\/tutorials\/mongokitten","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","abstract":[{"text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens.","type":"text"}]},"logo.png":{"alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"role":"symbol","type":"topic","title":"DatabaseMigrations","abstract":[{"type":"text","text":"Database migration support"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","url":"\/documentation\/postgresmigrations\/databasemigrations","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrations"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"title":"register(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","text":"DatabaseMigration"},{"text":")","kind":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"title":"JobsPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","url":"\/documentation\/jobspostgres","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","kind":"article","title":"Hummingbird Documentation","role":"collection","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigration","kind":"identifier"}],"navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}],"type":"topic","title":"DatabaseMigration","abstract":[{"type":"text","text":"Protocol for a database migration"}],"kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","role":"collection","title":"PostgresMigrations","abstract":[{"type":"text","text":"Postgres database migration service"}],"url":"\/documentation\/postgresmigrations","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"title":"HummingbirdPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","kind":"symbol","url":"\/documentation\/hummingbirdpostgres","role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"type":"topic","role":"overview","url":"\/tutorials\/fluent","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}],"title":"Store Data with Fluent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","kind":"overview"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"groups"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","kind":"typeIdentifier","text":"DatabaseMigrationGroup"},{"kind":"text","text":"], "},{"text":"logger","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier","text":"Logger"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"}],"title":"revert(client:groups:logger:dryRun:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","abstract":[{"type":"text","text":"Revert database migrations"}]}}}