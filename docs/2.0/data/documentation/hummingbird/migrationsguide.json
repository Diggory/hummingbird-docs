{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"sections":[],"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"Migrations","modules":[{"name":"PostgresMigrations"}],"roleHeading":"Article","role":"article"},"abstract":[{"type":"text","text":"Managing database structure changes."}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each migration includs an "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" method that applies the change and a "},{"code":"revert","type":"codeVoice"},{"type":"text","text":" method that reverts the change."}],"type":"paragraph"},{"syntax":"swift","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"anchor":"Adding-migrations","type":"heading","text":"Adding migrations","level":3},{"inlineContent":[{"text":"You need to create a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true,"type":"reference"},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"code":"add","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"type":"codeListing"},{"anchor":"Applying-migrations","type":"heading","text":"Applying migrations","level":3},{"inlineContent":[{"type":"text","text":"As you need an active "},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"code":"PostgresClient.run","type":"codeVoice"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"type":"codeListing"},{"inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to true, the ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"anchor":"Reverting-migrations","type":"heading","text":"Reverting migrations","level":3},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The user calls ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"text":". This will revert all the migrations applied to the database.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","type":"reference"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}]}]}],"type":"unorderedList"},{"anchor":"Migration-groups","type":"heading","text":"Migration groups","level":3},{"inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}],"type":"paragraph"},{"syntax":"swift","code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}],"type":"paragraph"},{"syntax":"swift","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}],"type":"paragraph"},{"anchor":"Reference","type":"heading","text":"Reference","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","type":"reference","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"references":{"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient"},{"kind":"text","text":", "},{"kind":"externalParam","text":"groups"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"logger"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"role":"symbol","type":"topic","title":"revert(client:groups:logger:dryRun:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","abstract":[{"text":"Revert database migrations","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigration"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","url":"\/documentation\/postgresmigrations\/databasemigration","abstract":[{"type":"text","text":"Protocol for a database migration"}],"title":"DatabaseMigration","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"DatabaseMigration","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"url":"\/documentation\/postgresmigrations\/databasemigrations","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"role":"symbol","title":"DatabaseMigrations","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","abstract":[{"text":"Database migration support","type":"text"}],"navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","title":"beforeServerStarts(perform:)","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"beforeServerStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"DatabaseMigration","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP"},{"kind":"text","text":")"}],"abstract":[{"text":"Register migration without it being applied","type":"text"}],"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","title":"register(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"DatabaseMigrationGroup","kind":"identifier"}],"title":"DatabaseMigrationGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrationGroup","kind":"identifier"}],"url":"\/documentation\/postgresmigrations\/databasemigrationgroup","abstract":[{"type":"text","text":"Group identifier for a group of migrations."}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"kind":"symbol","role":"collection","title":"PostgresMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/postgresmigrations","abstract":[{"type":"text","text":"Postgres database migration service"}]}}}