{"kind":"article","metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"HummingbirdPostgres"}],"title":"Migrations"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Articles"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]]},"abstract":[{"type":"text","text":"Managing database structure changes."}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each migration includs an "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" method that applies the change and a "},{"code":"revert","type":"codeVoice"},{"type":"text","text":" method that reverts the change."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct CreateMyTableMigration: PostgresMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"]},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"text":"Adding migrations","type":"heading","anchor":"Adding-migrations","level":3},{"inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations"},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"type":"codeVoice","code":"add"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import HummingbirdPostgres","","let migrations = PostgresMigrations()","await migrations.add(CreateMyTableMigration())"]},{"text":"Applying migrations","type":"heading","anchor":"Applying-migrations","level":3},{"inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.runBeforeServerStart {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"text":" set to true, the ","type":"text"},{"type":"codeVoice","code":"apply"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"text":"Reverting migrations","type":"heading","anchor":"Reverting-migrations","level":3},{"inlineContent":[{"text":"There are a number of situations where a migration maybe reverted.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The user calls ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","type":"reference","isActive":true},{"text":". This will revert all the migrations applied to the database.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)"},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]}]},{"text":"Migration groups","type":"heading","anchor":"Migration-groups","level":3},{"inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"type":"codeVoice","code":".default"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}],"type":"paragraph"},{"inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"code":"PostgresMigrationGroup","type":"codeVoice"},{"text":" and add a new static variable for the migration group id.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension PostgresMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"]},{"inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension CreateMyTableMigration {","    var group: PostgresMigrationGroup { .myGroup }","}"]},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}],"type":"paragraph"},{"text":"Reference","type":"heading","anchor":"Reference","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup"}]}]}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"url":"\/documentation\/hummingbirdpostgres","role":"collection","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","type":"topic","title":"HummingbirdPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/register(_:)":{"abstract":[{"type":"text","text":"Register migration without it being applied"}],"title":"register(_:)","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/register(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"text":"PostgresMigration","kind":"typeIdentifier","preciseIdentifier":"s:19HummingbirdPostgres0B9MigrationP"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","type":"topic","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrationGroup":{"abstract":[{"text":"Group identifier for a group of migrations.","type":"text"}],"navigatorTitle":[{"text":"PostgresMigrationGroup","kind":"identifier"}],"title":"PostgresMigrationGroup","url":"\/documentation\/hummingbirdpostgres\/postgresmigrationgroup","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrationGroup","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations":{"url":"\/documentation\/hummingbirdpostgres\/postgresmigrations","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrations","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","role":"symbol","type":"topic","navigatorTitle":[{"text":"PostgresMigrations","kind":"identifier"}],"abstract":[{"text":"Database migration support","type":"text"}],"title":"PostgresMigrations"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigration":{"url":"\/documentation\/hummingbirdpostgres\/postgresmigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration","navigatorTitle":[{"text":"PostgresMigration","kind":"identifier"}],"abstract":[{"text":"Protocol for a database migration","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","title":"PostgresMigration","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigration","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/revert(client:groups:logger:dryRun:)":{"url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/revert(client:groups:logger:dryrun:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","type":"topic","title":"revert(client:groups:logger:dryRun:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"text":"PostgresClient","kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"groups"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"PostgresMigrationGroup","preciseIdentifier":"s:19HummingbirdPostgres0B14MigrationGroupV"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"logger"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"abstract":[{"text":"Revert database migrations","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)","kind":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"role":"symbol","title":"runBeforeServerStart(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"kind":"text","text":"(() "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}]}}}