{"abstract":[{"type":"text","text":"Managing database structure changes."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Articles"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" method that applies the change and a "},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}],"type":"paragraph"},{"code":["struct CreateMyTableMigration: PostgresMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"anchor":"Adding-migrations","level":3,"text":"Adding migrations","type":"heading"},{"inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations"},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"type":"codeVoice","code":"add"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["import HummingbirdPostgres","","let migrations = PostgresMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift","type":"codeListing"},{"anchor":"Applying-migrations","level":3,"text":"Applying migrations","type":"heading"},{"inlineContent":[{"type":"text","text":"As you need an active "},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"code":"PostgresClient.run","type":"codeVoice"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.runBeforeServerStart {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to true, the "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}],"type":"paragraph"},{"anchor":"Reverting-migrations","level":3,"text":"Reverting migrations","type":"heading"},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The user calls "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","isActive":true},{"type":"text","text":". This will revert all the migrations applied to the database."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","isActive":true,"type":"reference"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Migration-groups","level":3,"text":"Migration groups","type":"heading"},{"inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"code":"PostgresMigrationGroup","type":"codeVoice"},{"text":" and add a new static variable for the migration group id.","type":"text"}],"type":"paragraph"},{"code":["extension PostgresMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}],"type":"paragraph"},{"code":["extension CreateMyTableMigration {","    var group: PostgresMigrationGroup { .myGroup }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"inlineContent":[{"text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add.","type":"text"}],"type":"paragraph"},{"anchor":"Reference","level":3,"text":"Reference","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]]},"metadata":{"modules":[{"name":"HummingbirdPostgres"}],"roleHeading":"Article","title":"Migrations","role":"article"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrationGroup":{"navigatorTitle":[{"text":"PostgresMigrationGroup","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrationGroup","kind":"identifier"}],"abstract":[{"text":"Group identifier for a group of migrations.","type":"text"}],"url":"\/documentation\/hummingbirdpostgres\/postgresmigrationgroup","title":"PostgresMigrationGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrationGroup","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/runBeforeServerStart(_:)":{"type":"topic","title":"runBeforeServerStart(_:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/runBeforeServerStart(_:)","url":"\/documentation\/hummingbird\/application\/runbeforeserverstart(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"runBeforeServerStart","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"title":"Persistent data","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"url":"\/documentation\/hummingbirdpostgres","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","abstract":[{"type":"text","text":"Working with Postgres databases."}],"title":"HummingbirdPostgres","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/register(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/register(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"PostgresMigration","preciseIdentifier":"s:19HummingbirdPostgres0B9MigrationP"},{"kind":"text","text":")"}],"title":"register(_:)","kind":"symbol","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/register(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigration":{"abstract":[{"text":"Protocol for a database migration","type":"text"}],"kind":"symbol","title":"PostgresMigration","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresMigration"}],"url":"\/documentation\/hummingbirdpostgres\/postgresmigration","navigatorTitle":[{"kind":"identifier","text":"PostgresMigration"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigration"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations/revert(client:groups:logger:dryRun:)":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:19HummingbirdPostgres0B14MigrationGroupV","text":"PostgresMigrationGroup","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations\/revert(client:groups:logger:dryRun:)","title":"revert(client:groups:logger:dryRun:)","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations\/revert(client:groups:logger:dryrun:)","abstract":[{"text":"Revert database migrations","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresMigrations":{"navigatorTitle":[{"text":"PostgresMigrations","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresMigrations","kind":"identifier"}],"title":"PostgresMigrations","type":"topic","url":"\/documentation\/hummingbirdpostgres\/postgresmigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresMigrations","role":"symbol","abstract":[{"type":"text","text":"Database migration support"}],"kind":"symbol"}}}