{"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"text":" method that applies the change and a ","type":"text"},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}]},{"syntax":"swift","type":"codeListing","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}]},{"type":"heading","level":3,"anchor":"Adding-migrations","text":"Adding migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true,"type":"reference"},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"type":"codeVoice","code":"add"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"]},{"type":"heading","anchor":"Applying-migrations","level":3,"text":"Applying migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"text":" to apply migrations you need to run the migrate once you have called ","type":"text"},{"type":"codeVoice","code":"PostgresClient.run"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference"},{"type":"text","text":"."}]},{"code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"code":"dryRun","type":"codeVoice"},{"text":" set to true, the ","type":"text"},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}]},{"type":"heading","level":3,"text":"Reverting migrations","anchor":"Reverting-migrations"},{"inlineContent":[{"text":"There are a number of situations where a migration maybe reverted.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The user calls "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","type":"reference","isActive":true},{"text":". This will revert all the migrations applied to the database.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied.","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Migration-groups","level":3,"type":"heading","text":"Migration groups"},{"inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}]},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"]},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist and job queue drivers that come with HummingbirdPostgres both use groups to separate their migrations from any the user might add."}]},{"text":"Reference","type":"heading","level":3,"anchor":"Reference"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","type":"reference","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"abstract":[{"type":"text","text":"Managing database structure changes."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"kind":"article","metadata":{"title":"Migrations","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"PostgresMigrations"}],"role":"article","roleHeading":"Article"},"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"title":"DatabaseMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations","abstract":[{"type":"text","text":"Database migration support"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigrations"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"abstract":[{"text":"Register migration without it being applied","type":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"text":"DatabaseMigration","kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP"},{"text":")","kind":"text"}],"title":"register(_:)","role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"PostgresMigrations","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","abstract":[{"type":"text","text":"Postgres database migration service"}],"role":"collection","url":"\/documentation\/postgresmigrations"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"groups"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dryRun"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","abstract":[{"type":"text","text":"Revert database migrations"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","title":"revert(client:groups:logger:dryRun:)"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"title":"DatabaseMigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigration","abstract":[{"text":"Protocol for a database migration","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DatabaseMigration"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DatabaseMigrationGroup"}],"title":"DatabaseMigrationGroup","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","abstract":[{"text":"Group identifier for a group of migrations.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrationGroup"}],"url":"\/documentation\/postgresmigrations\/databasemigrationgroup"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png","type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"title":"beforeServerStarts(perform:)","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")"}]}}}