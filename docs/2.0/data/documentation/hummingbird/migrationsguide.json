{"metadata":{"roleHeading":"Article","title":"Database Migrations","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"HummingbirdPostgres"},{"name":"PostgresMigrations"}],"role":"article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"]]},"seeAlsoSections":[{"generated":true,"anchor":"Articles","title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Each migration includs an ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" method that applies the change and a ","type":"text"},{"code":"revert","type":"codeVoice"},{"text":" method that reverts the change.","type":"text"}]},{"type":"codeListing","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}]},{"anchor":"Adding-migrations","text":"Adding migrations","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Applying-migrations","type":"heading","text":"Applying migrations"},{"type":"paragraph","inlineContent":[{"text":"As you need an active ","type":"text"},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to true, the "},{"code":"apply","type":"codeVoice"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"text":"Reverting migrations","level":3,"anchor":"Reverting-migrations","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The user calls ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","type":"reference"},{"text":". This will revert all the migrations applied to the database.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied.","type":"text"}]}]}]},{"level":3,"text":"Migration groups","type":"heading","anchor":"Migration-groups"},{"inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}],"type":"paragraph"},{"inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}],"type":"paragraph"},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"]},{"type":"paragraph","inlineContent":[{"text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The persist driver that come with "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","isActive":true,"type":"reference"},{"type":"text","text":" and the job queue driver from "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","isActive":true},{"text":" both use groups to separate their migrations from any the user might add.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Reference","text":"Reference","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"sections":[],"kind":"article","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"abstract":[{"text":"Managing database structure changes.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"title":"register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","type":"topic","abstract":[{"text":"Register migration without it being applied","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","text":"DatabaseMigration"},{"text":")","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"role":"collection","url":"\/documentation\/jobspostgres","title":"JobsPostgres","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationGroup":{"abstract":[{"type":"text","text":"Group identifier for a group of migrations."}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrationGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationGroup","title":"DatabaseMigrationGroup","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DatabaseMigrationGroup","kind":"identifier"}],"url":"\/documentation\/postgresmigrations\/databasemigrationgroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"kind":"text","text":"("},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"kind":"symbol","title":"beforeServerStarts(perform:)","type":"topic","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"logo.png":{"alt":null,"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"type":"topic","title":"PostgresMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","url":"\/documentation\/postgresmigrations","abstract":[{"text":"Postgres database migration service","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"abstract":[{"type":"text","text":"Protocol for a database migration"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigration"}],"url":"\/documentation\/postgresmigrations\/databasemigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","title":"DatabaseMigration","kind":"symbol","type":"topic","navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdPostgres","type":"topic","kind":"symbol","abstract":[{"text":"Working with Postgres databases.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"url":"\/documentation\/postgresmigrations\/databasemigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","role":"symbol","title":"DatabaseMigrations","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Database migration support"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DatabaseMigrations"}],"navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"title":"revert(client:groups:logger:dryRun:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","kind":"symbol","role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","abstract":[{"text":"Revert database migrations","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"text":"client","kind":"externalParam"},{"kind":"text","text":": "},{"text":"PostgresClient","kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"}]}}}