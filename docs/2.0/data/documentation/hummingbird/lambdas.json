{"metadata":{"role":"article","title":"Lambdas","modules":[{"name":"HummingbirdMustache"}],"roleHeading":"Article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"kind":"article","seeAlsoSections":[{"title":"Additional Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas"},"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"code":"HBMustacheLambda","type":"codeVoice"},{"type":"text","text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the object "},{"type":"codeVoice","code":"person"},{"type":"text","text":" defined below"}]},{"syntax":"swift","code":["struct Person {","    let name: String","    let wrapped: HBMustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: HBMustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"and the following mustache template"}]},{"syntax":"swift","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then ","type":"text"},{"code":"template.render(person)","type":"codeVoice"},{"text":" will output","type":"text"}]},{"syntax":null,"code":["<b>John is awesome.<\/b>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example the template constructed from the contents of the "},{"code":"wrapped","type":"codeVoice"},{"type":"text","text":" section of the mustache is passed to my "},{"code":"wrapped","type":"codeVoice"},{"type":"text","text":" function inside the "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" type."}]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"abstract":[{"text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature.","type":"text"}],"url":"\/documentation\/hummingbird\/templateinheritance","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","role":"article","title":"Template Inheritance","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}],"title":"HummingbirdMustache","url":"\/documentation\/hummingbirdmustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"url":"\/documentation\/hummingbird\/transforms","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","title":"Transforms","abstract":[{"type":"text","text":"Transforming objects during render"}],"type":"topic","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"url":"\/documentation\/hummingbird\/pragmas","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","title":"Pragmas\/Configuration variables","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"type":"topic","kind":"article","role":"article"}}}