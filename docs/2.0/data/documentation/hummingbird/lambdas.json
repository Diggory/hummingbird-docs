{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Add a ","type":"text"},{"code":"MustacheLambda","type":"codeVoice"},{"text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Given the object ","type":"text"},{"type":"codeVoice","code":"person"},{"text":" defined below","type":"text"}]},{"code":["struct Person {","    let name: String","    let wrapped: MustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: MustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"and the following mustache template","type":"text"}]},{"code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then "},{"type":"codeVoice","code":"template.render(person)"},{"type":"text","text":" will output"}]},{"code":["<b>John is awesome.<\/b>"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example the template constructed from the contents of the "},{"code":"wrapped","type":"codeVoice"},{"type":"text","text":" section of the mustache is passed to my "},{"code":"wrapped","type":"codeVoice"},{"type":"text","text":" function inside the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" type."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"generated":true,"title":"Additional Features"}],"metadata":{"role":"article","title":"Lambdas","roleHeading":"Article","modules":[{"name":"Mustache"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","url":"\/documentation\/mustache","type":"topic","title":"Mustache","abstract":[{"text":"Mustache template engine.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"title":"Transforms","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","kind":"article","url":"\/documentation\/hummingbird\/transforms","abstract":[{"type":"text","text":"Transforming objects during render"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"title":"Template Inheritance","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","kind":"article","url":"\/documentation\/hummingbird\/templateinheritance","abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"url":"\/documentation\/hummingbird\/pragmas","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","kind":"article","role":"article","type":"topic","title":"Pragmas\/Configuration variables"}}}