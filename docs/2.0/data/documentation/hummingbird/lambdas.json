{"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Add a ","type":"text"},{"code":"HBMustacheLambda","type":"codeVoice"},{"text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Given the object ","type":"text"},{"type":"codeVoice","code":"person"},{"text":" defined below","type":"text"}]},{"code":["struct Person {","    let name: String","    let wrapped: HBMustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: HBMustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"and the following mustache template","type":"text"}]},{"code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then "},{"code":"template.render(person)","type":"codeVoice"},{"type":"text","text":" will output"}]},{"code":["<b>John is awesome.<\/b>"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In this example the template constructed from the contents of the ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" section of the mustache is passed to my ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" function inside the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" type.","type":"text"}]}]}],"seeAlsoSections":[{"generated":true,"title":"Additional Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]}],"abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"HummingbirdMustache"}],"roleHeading":"Article","title":"Lambdas"},"kind":"article","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Transforming objects during render"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","title":"Transforms","url":"\/documentation\/hummingbird\/transforms"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"title":"Pragmas\/Configuration variables","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","kind":"article","role":"article","abstract":[{"text":"Setting template render configuration settings.","type":"text"}],"url":"\/documentation\/hummingbird\/pragmas","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","kind":"symbol","role":"collection","title":"HummingbirdMustache","url":"\/documentation\/hummingbirdmustache","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"title":"Template Inheritance","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","kind":"article","role":"article","abstract":[{"text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature.","type":"text"}],"url":"\/documentation\/hummingbird\/templateinheritance","type":"topic"}}}