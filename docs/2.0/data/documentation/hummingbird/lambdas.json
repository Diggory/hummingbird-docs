{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas"},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"MustacheLambda"},{"type":"text","text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda."}],"type":"paragraph"},{"inlineContent":[{"text":"Given the object ","type":"text"},{"type":"codeVoice","code":"person"},{"text":" defined below","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct Person {","    let name: String","    let wrapped: MustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: MustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"syntax":"swift"},{"inlineContent":[{"text":"and the following mustache template","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then "},{"code":"template.render(person)","type":"codeVoice"},{"type":"text","text":" will output"}],"type":"paragraph"},{"type":"codeListing","code":["<b>John is awesome.<\/b>"],"syntax":null},{"inlineContent":[{"type":"text","text":"In this example the template constructed from the contents of the "},{"type":"codeVoice","code":"wrapped"},{"type":"text","text":" section of the mustache is passed to my "},{"type":"codeVoice","code":"wrapped"},{"type":"text","text":" function inside the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" type."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"kind":"article","abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"metadata":{"title":"Lambdas","role":"article","modules":[{"name":"Mustache"}],"roleHeading":"Article"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"title":"Additional Features"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","role":"article","kind":"article","type":"topic","abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"url":"\/documentation\/hummingbird\/templateinheritance","title":"Template Inheritance"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","role":"article","kind":"article","type":"topic","abstract":[{"type":"text","text":"Transforming objects during render"}],"url":"\/documentation\/hummingbird\/transforms","title":"Transforms"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","role":"article","kind":"article","type":"topic","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"url":"\/documentation\/hummingbird\/pragmas","title":"Pragmas\/Configuration variables"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"kind":"symbol","type":"topic","title":"Mustache","url":"\/documentation\/mustache","role":"collection"}}}