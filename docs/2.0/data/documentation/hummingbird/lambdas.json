{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"generated":true,"title":"Additional Features"}],"metadata":{"role":"article","modules":[{"name":"HummingbirdMustache"}],"roleHeading":"Article","title":"Lambdas"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"HBMustacheLambda"},{"type":"text","text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda."}],"type":"paragraph"},{"inlineContent":[{"text":"Given the object ","type":"text"},{"code":"person","type":"codeVoice"},{"text":" defined below","type":"text"}],"type":"paragraph"},{"code":["struct Person {","    let name: String","    let wrapped: HBMustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: HBMustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"and the following mustache template"}],"type":"paragraph"},{"code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then "},{"code":"template.render(person)","type":"codeVoice"},{"type":"text","text":" will output"}],"type":"paragraph"},{"code":["<b>John is awesome.<\/b>"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"In this example the template constructed from the contents of the ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" section of the mustache is passed to my ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" function inside the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"paragraph"}]}],"sections":[],"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","kind":"article","role":"article","title":"Pragmas\/Configuration variables","url":"\/documentation\/hummingbird\/pragmas","abstract":[{"text":"Setting template render configuration settings.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"type":"topic","abstract":[{"text":"Mustache template engine.","type":"text"}],"title":"HummingbirdMustache","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","kind":"symbol","url":"\/documentation\/hummingbirdmustache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","kind":"article","role":"article","title":"Transforms","url":"\/documentation\/hummingbird\/transforms","abstract":[{"text":"Transforming objects during render","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"title":"Template Inheritance","abstract":[{"text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature.","type":"text"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","type":"topic","url":"\/documentation\/hummingbird\/templateinheritance","kind":"article"}}}