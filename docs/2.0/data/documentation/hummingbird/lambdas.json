{"seeAlsoSections":[{"generated":true,"title":"Additional Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","interfaceLanguage":"swift"},"kind":"article","abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"metadata":{"modules":[{"name":"Mustache"}],"roleHeading":"Article","title":"Lambdas","role":"article"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Add a "},{"code":"MustacheLambda","type":"codeVoice"},{"type":"text","text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda."}],"type":"paragraph"},{"inlineContent":[{"text":"Given the object ","type":"text"},{"type":"codeVoice","code":"person"},{"text":" defined below","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Person {","    let name: String","    let wrapped: MustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: MustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"type":"codeListing"},{"inlineContent":[{"text":"and the following mustache template","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)"],"type":"codeListing"},{"inlineContent":[{"text":"Then ","type":"text"},{"code":"template.render(person)","type":"codeVoice"},{"text":" will output","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["<b>John is awesome.<\/b>"],"type":"codeListing"},{"inlineContent":[{"text":"In this example the template constructed from the contents of the ","type":"text"},{"type":"codeVoice","code":"wrapped"},{"text":" section of the mustache is passed to my ","type":"text"},{"type":"codeVoice","code":"wrapped"},{"text":" function inside the ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" type.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","kind":"symbol","title":"Mustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"type":"topic","url":"\/documentation\/mustache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"role":"article","url":"\/documentation\/hummingbird\/templateinheritance","type":"topic","abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"title":"Template Inheritance","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"title":"Pragmas\/Configuration variables","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","abstract":[{"text":"Setting template render configuration settings.","type":"text"}],"role":"article","kind":"article","url":"\/documentation\/hummingbird\/pragmas","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","role":"article","abstract":[{"type":"text","text":"Transforming objects during render"}],"type":"topic","kind":"article","title":"Transforms","url":"\/documentation\/hummingbird\/transforms"}}}