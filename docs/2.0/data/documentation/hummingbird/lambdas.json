{"seeAlsoSections":[{"title":"Additional Features","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature."}],"type":"paragraph"},{"inlineContent":[{"text":"Add a ","type":"text"},{"code":"MustacheLambda","type":"codeVoice"},{"text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Given the object "},{"type":"codeVoice","code":"person"},{"type":"text","text":" defined below"}],"type":"paragraph"},{"type":"codeListing","code":["struct Person {","    let name: String","    let wrapped: MustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: MustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"and the following mustache template"}],"type":"paragraph"},{"type":"codeListing","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)"],"syntax":"swift"},{"inlineContent":[{"text":"Then ","type":"text"},{"type":"codeVoice","code":"template.render(person)"},{"text":" will output","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["<b>John is awesome.<\/b>"],"syntax":null},{"inlineContent":[{"text":"In this example the template constructed from the contents of the ","type":"text"},{"type":"codeVoice","code":"wrapped"},{"text":" section of the mustache is passed to my ","type":"text"},{"type":"codeVoice","code":"wrapped"},{"text":" function inside the ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" type.","type":"text"}],"type":"paragraph"}]}],"sections":[],"kind":"article","abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"metadata":{"roleHeading":"Article","title":"Lambdas","modules":[{"name":"Mustache"}],"role":"article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"kind":"article","role":"article","abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","title":"Template Inheritance","url":"\/documentation\/hummingbird\/templateinheritance","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"type":"topic","title":"Transforms","url":"\/documentation\/hummingbird\/transforms","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","kind":"article","abstract":[{"type":"text","text":"Transforming objects during render"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"abstract":[{"type":"text","text":"Setting template render configuration settings."}],"url":"\/documentation\/hummingbird\/pragmas","type":"topic","kind":"article","title":"Pragmas\/Configuration variables","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","url":"\/documentation\/mustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"title":"Mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","type":"topic"}}}