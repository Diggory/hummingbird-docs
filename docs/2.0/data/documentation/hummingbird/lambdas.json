{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"generated":true,"title":"Additional Features"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","interfaceLanguage":"swift"},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"HummingbirdMustache"}],"title":"Lambdas"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Add a ","type":"text"},{"type":"codeVoice","code":"HBMustacheLambda"},{"text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Given the object "},{"type":"codeVoice","code":"person"},{"type":"text","text":" defined below"}],"type":"paragraph"},{"syntax":"swift","code":["struct Person {","    let name: String","    let wrapped: HBMustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: HBMustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"and the following mustache template"}],"type":"paragraph"},{"syntax":"swift","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then "},{"type":"codeVoice","code":"template.render(person)"},{"type":"text","text":" will output"}],"type":"paragraph"},{"syntax":null,"code":["<b>John is awesome.<\/b>"],"type":"codeListing"},{"inlineContent":[{"text":"In this example the template constructed from the contents of the ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" section of the mustache is passed to my ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" function inside the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","url":"\/documentation\/hummingbird\/pragmas","abstract":[{"text":"Setting template render configuration settings.","type":"text"}],"type":"topic","role":"article","title":"Pragmas\/Configuration variables","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"abstract":[{"text":"Transforming objects during render","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/transforms","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","type":"topic","title":"Transforms"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"url":"\/documentation\/hummingbirdmustache","type":"topic","abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","role":"collection","kind":"symbol","title":"HummingbirdMustache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"title":"Template Inheritance","type":"topic","abstract":[{"text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","role":"article","url":"\/documentation\/hummingbird\/templateinheritance"}}}