{"metadata":{"title":"Lambdas","role":"article","modules":[{"name":"Mustache"}],"roleHeading":"Article"},"sections":[],"abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"title":"Additional Features","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Add a ","type":"text"},{"type":"codeVoice","code":"MustacheLambda"},{"text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the object "},{"code":"person","type":"codeVoice"},{"text":" defined below","type":"text"}]},{"type":"codeListing","code":["struct Person {","    let name: String","    let wrapped: MustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: MustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"and the following mustache template"}]},{"type":"codeListing","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then ","type":"text"},{"code":"template.render(person)","type":"codeVoice"},{"text":" will output","type":"text"}]},{"type":"codeListing","code":["<b>John is awesome.<\/b>"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"In this example the template constructed from the contents of the ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" section of the mustache is passed to my ","type":"text"},{"code":"wrapped","type":"codeVoice"},{"text":" function inside the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" type.","type":"text"}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"url":"\/documentation\/hummingbird\/templateinheritance","abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","role":"article","kind":"article","type":"topic","title":"Template Inheritance"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","abstract":[{"text":"Mustache template engine.","type":"text"}],"title":"Mustache","kind":"symbol","url":"\/documentation\/mustache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"type":"topic","title":"Transforms","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","kind":"article","url":"\/documentation\/hummingbird\/transforms","role":"article","abstract":[{"text":"Transforming objects during render","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"url":"\/documentation\/hummingbird\/pragmas","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","role":"article","kind":"article","type":"topic","title":"Pragmas\/Configuration variables"}}}