{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library doesnâ€™t provide a lambda implementation but it does provide something akin to the lambda feature."}]},{"type":"paragraph","inlineContent":[{"text":"Add a ","type":"text"},{"code":"HBMustacheLambda","type":"codeVoice"},{"text":" to the object you want to be rendered and it can be used in a similar way to lambdas are used in Mustache. When you create a section referencing the lambda the contents of the section are passed as a template along with the current object to the lamdba function. This is slightly different from the standard implementation where the unprocessed text is passed to the lambda.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the object "},{"code":"person","type":"codeVoice"},{"type":"text","text":" defined below"}]},{"syntax":"swift","code":["struct Person {","    let name: String","    let wrapped: HBMustacheLambda","}","let person = Person(","    name: \"John\", ","    wrapped: HBMustacheLambda { object, template in","        return \"<b>\\(template.render(object))<\/b>\"","    }",")",""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"and the following mustache template"}]},{"syntax":"swift","code":["let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try HBMustacheTemplate(string: mustache)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then "},{"code":"template.render(person)","type":"codeVoice"},{"type":"text","text":" will output"}]},{"syntax":null,"code":["<b>John is awesome.<\/b>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example the template constructed from the contents of the "},{"type":"codeVoice","code":"wrapped"},{"type":"text","text":" section of the mustache is passed to my "},{"type":"codeVoice","code":"wrapped"},{"type":"text","text":" function inside the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" type."}]}],"kind":"content"}],"abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache"]]},"metadata":{"roleHeading":"Article","title":"Lambdas","modules":[{"name":"HummingbirdMustache"}],"role":"article"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"generated":true,"title":"Additional Features"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"kind":"article","role":"article","abstract":[{"type":"text","text":"Transforming objects during render"}],"title":"Transforms","url":"\/documentation\/hummingbird\/transforms","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","kind":"symbol","url":"\/documentation\/hummingbirdmustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"title":"HummingbirdMustache","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"kind":"article","role":"article","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"title":"Pragmas\/Configuration variables","url":"\/documentation\/hummingbird\/pragmas","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"type":"topic","url":"\/documentation\/hummingbird\/templateinheritance","kind":"article","role":"article","abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","title":"Template Inheritance"}}}