{"abstract":[{"text":"Return as a single ByteBuffer. This function is required as ","type":"text"},{"code":"ByteBuffer.collect(upTo:)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"assumes the request body can be iterated.","type":"text"}],"metadata":{"modules":[{"name":"HummingbirdCore"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"collate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"}],"role":"symbol","externalID":"s:15HummingbirdCore13HBRequestBodyO7collate7maxSize7NIOCore10ByteBufferVSi_tYaKF","symbolKind":"method","title":"collate(maxSize:)"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody\/collate(maxSize:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/hbrequestbody\/collate(maxsize:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"collate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"}],"languages":["swift"],"platforms":["Linux"]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"url":"\/documentation\/hummingbirdcore","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestBody":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestBody"}],"navigatorTitle":[{"kind":"identifier","text":"HBRequestBody"}],"abstract":[],"url":"\/documentation\/hummingbird\/hbrequestbody","kind":"symbol","title":"HBRequestBody","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestBody/collate(maxSize:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"collate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"}],"title":"collate(maxSize:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody\/collate(maxSize:)","type":"topic","url":"\/documentation\/hummingbird\/hbrequestbody\/collate(maxsize:)","abstract":[{"type":"text","text":"Return as a single ByteBuffer. This function is required as "},{"code":"ByteBuffer.collect(upTo:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"assumes the request body can be iterated."}]}}}