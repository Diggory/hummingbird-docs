{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"}],"metadata":{"modules":[{"name":"Hummingbird"}],"title":"Encoding and Decoding","role":"collectionGroup"},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"],"title":"Reference"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" has two member variables "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"decode(_:from)"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"encode(_:from)","type":"codeVoice"},{"text":" function that creates a ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value and the original request that generated it.","type":"text"}],"type":"paragraph"},{"code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol that come with the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Setting up HBApplication","anchor":"Setting-up-HBApplication"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" are ","type":"text"},{"type":"codeVoice","code":"Null"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" before you can use ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" in Hummingbird. ","type":"text"},{"type":"codeVoice","code":"HummingbirdFoundation"},{"text":" includes two such implementations. ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Decoding Requests","anchor":"Decoding-Requests"},{"inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" method in the following manner"}],"type":"paragraph"},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Decoder.decode","type":"codeVoice"},{"type":"text","text":" functions "},{"code":"HBRequest.decode","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":". I use the function "},{"code":"HBRequest.failure","type":"codeVoice"},{"type":"text","text":" to generate the failed "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Encoding Responses","anchor":"Encoding-Responses"},{"inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}],"type":"paragraph"},{"code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Decoding\/Encoding based on Request headers","anchor":"DecodingEncoding-based-on-Request-headers"},{"inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}],"type":"paragraph"},{"code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"code":"HBResponseEncoder","type":"codeVoice"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"role":"symbol","title":"HBResponseEncoder","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbresponseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"collectionGroup","kind":"article","title":"Logging, Metrics and Tracing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"url":"\/documentation\/hummingbird\/hbrequestdecoder","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"title":"HBRequestDecoder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","title":"Testing","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","title":"Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","title":"Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"role":"symbol","type":"topic","url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"title":"URLEncodedFormDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","title":"Router","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"collectionGroup","kind":"article","title":"Error Handling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"}}}