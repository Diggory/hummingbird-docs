{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"],"title":"Reference"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"The request context ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"text":" that is provided alongside your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","isActive":true,"type":"reference"},{"text":" has two member variables ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","isActive":true,"type":"reference"},{"text":". These define how requests\/responses are decoded\/encoded.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","isActive":true},{"type":"text","text":" which requires a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","isActive":true},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}]},{"type":"codeListing","code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some RequestContext) throws -> T","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","type":"reference"},{"text":" which requires a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","type":"reference"},{"text":" function that creates a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value and the original request that generated it.","type":"text"}]},{"type":"codeListing","code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some RequestContext) throws -> Response","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol that come with the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"Request"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" types on how you might want to decode\/encode your data.","type":"text"}]},{"type":"heading","level":2,"text":"Setting up your encoder\/decoder","anchor":"Setting-up-your-encoderdecoder"},{"type":"paragraph","inlineContent":[{"text":"The default implementations of ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" are ","type":"text"},{"type":"codeVoice","code":"Hummingbird\/JSONDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Hummingbird\/JSONEncoder"},{"text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want to use JSON you need to setup you own "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" in a custom request context. For instance "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","type":"reference","isActive":true},{"type":"text","text":" for request decoding and "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference","isActive":true},{"type":"text","text":" for response encoding. The router is then initialized with this context. Read "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"reference","isActive":true},{"type":"text","text":" to find out more about request contexts."}]},{"type":"codeListing","code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"syntax":"swift"},{"type":"heading","level":2,"text":"Decoding Requests","anchor":"Decoding-Requests"},{"type":"paragraph","inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","isActive":true,"type":"reference"},{"text":" method in the following manner","type":"text"}]},{"type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Like the standard ","type":"text"},{"type":"codeVoice","code":"Decoder.decode"},{"text":" functions ","type":"text"},{"type":"codeVoice","code":"Request.decode"},{"text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of ","type":"text"},{"type":"codeVoice","code":"ByteBuffers"},{"text":". We need to collate the request body into one buffer before we can decode it.","type":"text"}]},{"type":"heading","level":2,"text":"Encoding Responses","anchor":"Encoding-Responses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"code":"ResponseEncodable","type":"codeVoice"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"code":"User","type":"codeVoice"},{"type":"text","text":" object from the above example we can do this"}]},{"type":"codeListing","code":["extension User: ResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"Decoding\/Encoding based on Request headers","anchor":"DecodingEncoding-based-on-Request-headers"},{"type":"paragraph","inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"type":"codeVoice","code":"RequestDecoder"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"text":" based on the “content-type” header.","type":"text"}]},{"type":"codeListing","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some RequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"type":"codeVoice","code":"ResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}],"kind":"content"}],"metadata":{"title":"Encoding and Decoding","roleHeading":"API Collection","modules":[{"name":"Hummingbird"}],"role":"collectionGroup"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"title":"Jobs","kind":"article","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/requestDecoder-5rq7e":{"defaultImplementations":1,"abstract":[{"type":"text","text":"Request decoder"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/requestcontext\/requestdecoder-5rq7e","required":true,"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestDecoder","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP7DecoderQa","text":"Decoder","kind":"typeIdentifier"}],"title":"requestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder-3mece":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","title":"responseEncoder","abstract":[{"type":"text","text":"Response encoder"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa"}],"kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext\/responseencoder-3mece","required":true,"role":"symbol","defaultImplementations":1},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/responseencoder","navigatorTitle":[{"kind":"identifier","text":"ResponseEncoder"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncoder"}],"title":"ResponseEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","title":"Router","url":"\/documentation\/hummingbird\/routerguide","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. Holds data associated with"},{"type":"text","text":" "},{"type":"text","text":"a request. Provides context for request processing"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"title":"RequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"type":"topic","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","abstract":[{"text":"Encode value returned by handler to request","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:SE","text":"Encodable"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdCore8ResponseV","kind":"typeIdentifier","text":"Response"}],"kind":"symbol","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","title":"encode(_:from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/urlencodedformdecoder","navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"title":"URLEncodedFormDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/requestdecoder","navigatorTitle":[{"text":"RequestDecoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestDecoder","kind":"identifier"}],"title":"RequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","url":"\/documentation\/hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request/decode(as:context:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","title":"decode(as:context:)","abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"type":"codeVoice","code":"Application.decoder"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"text":"<","kind":"text"},{"text":"Type","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp","text":"Type","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp","text":"Type","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/request\/decode(as:context:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"title":"Error Handling","kind":"article","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"title":"Hummingbird","kind":"article","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"title":"decode(_:from:context:)","required":true,"abstract":[{"type":"text","text":"Decode type from request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","role":"article","title":"Service Lifecycle","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"title":"Request","kind":"symbol","url":"\/documentation\/hummingbird\/request"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","type":"topic","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"title":"Persistent data","kind":"article","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"title":"URLEncodedFormEncoder","kind":"symbol","url":"\/documentation\/hummingbird\/urlencodedformencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","title":"Testing","type":"topic","url":"\/documentation\/hummingbird\/testing"}}}