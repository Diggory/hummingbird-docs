{"sections":[],"metadata":{"roleHeading":"API Collection","title":"Encoding and Decoding","role":"collectionGroup","modules":[{"name":"Hummingbird"}],"images":[{"identifier":"logo.png","type":"icon"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"anchor":"Reference","title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The request context "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"text":" that is provided alongside your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"type":"text","text":" has two member variables "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece"},{"text":". These define how requests\/responses are decoded\/encoded.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","type":"reference","isActive":true},{"type":"text","text":" which requires a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","isActive":true},{"text":" function that decodes a ","type":"text"},{"code":"Request","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some RequestContext) throws -> T","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","type":"reference","isActive":true},{"text":" which requires a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)"},{"text":" function that creates a ","type":"text"},{"code":"Response","type":"codeVoice"},{"type":"text","text":" from a "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some RequestContext) throws -> Response","}"]},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"code":"Request","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" types on how you might want to decode\/encode your data."}],"type":"paragraph"},{"anchor":"Setting-up-your-encoderdecoder","level":2,"type":"heading","text":"Setting up your encoder\/decoder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default implementations of "},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" are "},{"type":"codeVoice","code":"Hummingbird\/JSONDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hummingbird\/JSONEncoder"},{"type":"text","text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses."}]},{"inlineContent":[{"text":"If you don’t want to use JSON you need to setup you own ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" in a custom request context. For instance "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","isActive":true,"type":"reference"},{"text":" for request decoding and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference"},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"reference","isActive":true},{"type":"text","text":" to find out more about request contexts."}],"type":"paragraph"},{"code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"type":"codeListing","syntax":"swift"},{"text":"Decoding Requests","type":"heading","anchor":"Decoding-Requests","level":2},{"inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","isActive":true},{"text":" method in the following manner","type":"text"}],"type":"paragraph"},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Decoder.decode"},{"text":" functions ","type":"text"},{"code":"Request.decode","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"type":"codeVoice","code":"ByteBuffers"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}],"type":"paragraph"},{"type":"heading","anchor":"Encoding-Responses","text":"Encoding Responses","level":2},{"inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"type":"codeVoice","code":"ResponseEncodable"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" object from the above example we can do this","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension User: ResponseEncodable {}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"text":"Decoding\/Encoding based on Request headers","level":2,"anchor":"DecodingEncoding-based-on-Request-headers","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"codeVoice","code":"RequestDecoder"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"text":" based on the “content-type” header.","type":"text"}]},{"type":"codeListing","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some RequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"code":"ResponseEncoder","type":"codeVoice"},{"text":" based on the “accepts” header in the request.","type":"text"}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"anchor":"Guides"}],"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","url":"\/documentation\/hummingbird\/routerguide","images":[{"type":"icon","identifier":"logo.png"}],"title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","title":"RequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"type":"text","text":" "},{"text":"that is associated with a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/requestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request/decode(as:context:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Type"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Type","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp"},{"kind":"text","text":".Type, "},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp","text":"Type","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","title":"decode(as:context:)","url":"\/documentation\/hummingbirdcore\/request\/decode(as:context:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","role":"symbol","abstract":[{"text":"Decode request using decoder stored at ","type":"text"},{"code":"Application.decoder","type":"codeVoice"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","title":"Service Lifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"title":"Jobs","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/jobsguide","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}]},"logo.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","kind":"article","type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"title":"URLEncodedFormDecoder","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/urlencodedformdecoder","role":"symbol","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder-3mece":{"kind":"symbol","required":true,"type":"topic","abstract":[{"text":"Response encoder","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"responseEncoder"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa","text":"Encoder","kind":"typeIdentifier"}],"defaultImplementations":1,"role":"symbol","title":"responseEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","url":"\/documentation\/hummingbird\/requestcontext\/responseencoder-3mece"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:SE","text":"Encodable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Response","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore8ResponseV"}],"role":"symbol","title":"encode(_:from:context:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","abstract":[{"type":"text","text":"Encode value returned by handler to request"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"title":"ResponseEncoder","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/responseencoder","kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","title":"Request","kind":"symbol","navigatorTitle":[{"text":"Request","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"url":"\/documentation\/hummingbirdcore\/request","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"title":"URLEncodedFormEncoder","type":"topic","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","role":"symbol","url":"\/documentation\/hummingbird\/urlencodedformencoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"collectionGroup","title":"Middleware","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"images":[{"identifier":"logo.png","type":"icon"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"title":"Testing","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/testing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","kind":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/requestDecoder-5rq7e":{"defaultImplementations":1,"url":"\/documentation\/hummingbird\/requestcontext\/requestdecoder-5rq7e","abstract":[{"type":"text","text":"Request decoder"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"requestDecoder","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP7DecoderQa","kind":"typeIdentifier","text":"Decoder"}],"type":"topic","title":"requestDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","role":"symbol","kind":"symbol","required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","abstract":[{"type":"text","text":"Decode type from request"}],"title":"decode(_:from:context:)","required":true,"url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/requestcontexts","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","kind":"symbol","type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"title":"RequestDecoder","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","navigatorTitle":[{"text":"RequestDecoder","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RequestDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestdecoder","kind":"symbol","type":"topic","role":"symbol"}}}