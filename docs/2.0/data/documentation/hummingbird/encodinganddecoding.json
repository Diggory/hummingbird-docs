{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The request context "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","isActive":true},{"type":"text","text":" that is provided alongside your "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","isActive":true},{"type":"text","text":" has two member variables "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/requestDecoder-9nsum","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/responseEncoder-65htn","isActive":true},{"type":"text","text":". These define how requests\/responses are decoded\/encoded."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" must conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","type":"reference","isActive":true},{"text":" which requires a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","type":"reference","isActive":true},{"text":" function that decodes a ","type":"text"},{"type":"codeVoice","code":"Request"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some BaseRequestContext) throws -> T","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","isActive":true,"type":"reference"},{"type":"text","text":" which requires a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true,"type":"reference"},{"type":"text","text":" function that creates a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value and the original request that generated it."}]},{"syntax":"swift","type":"codeListing","code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some BaseRequestContext) throws -> Response","}"]},{"type":"paragraph","inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" protocol that come with the ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system except you have additional information from the ","type":"text"},{"code":"Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"BaseRequestContext","type":"codeVoice"},{"text":" types on how you might want to decode\/encode your data.","type":"text"}]},{"text":"Setting up your encoder\/decoder","anchor":"Setting-up-your-encoderdecoder","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The default implementations of ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"Hummingbird\/JSONDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Hummingbird\/JSONEncoder","type":"codeVoice"},{"text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want to use JSON you need to setup you own "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" in a custom request context. For instance "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","type":"reference"},{"type":"text","text":" for request decoding and "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference"},{"type":"text","text":" for response encoding. The router is then initialized with this context. Read "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"reference"},{"type":"text","text":" to find out more about request contexts."}]},{"syntax":"swift","type":"codeListing","code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"]},{"text":"Decoding Requests","anchor":"Decoding-Requests","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","type":"reference","isActive":true},{"text":" method in the following manner","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Decoder.decode"},{"type":"text","text":" functions "},{"type":"codeVoice","code":"Request.decode"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"type":"codeVoice","code":"ByteBuffers"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}]},{"text":"Encoding Responses","anchor":"Encoding-Responses","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"code":"ResponseEncodable","type":"codeVoice"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" object from the above example we can do this","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension User: ResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"text":"Decoding\/Encoding based on Request headers","anchor":"DecodingEncoding-based-on-Request-headers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"type":"codeVoice","code":"RequestDecoder"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"text":" based on the “content-type” header.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some BaseRequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"type":"codeVoice","code":"ResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}],"kind":"content"}],"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"],"title":"Reference"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true,"title":"Guides"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Encoding and Decoding","roleHeading":"API Collection"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA04BaseB7ContextRd_0_r0_lF1TL_qd__mfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"BaseRequestContext","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA04BaseB7ContextRd_0_r0_lF1TL_qd__mfp"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","type":"topic","title":"decode(_:from:context:)","role":"symbol","abstract":[{"type":"text","text":"Decode type from request"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request":{"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"role":"symbol","url":"\/documentation\/hummingbird\/request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"title":"Request"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","url":"\/documentation\/hummingbird\/testing","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestDecoder"}],"url":"\/documentation\/hummingbird\/requestdecoder","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","navigatorTitle":[{"kind":"identifier","text":"RequestDecoder"}],"title":"RequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"role":"symbol","title":"encode(_:from:context:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:SE","kind":"typeIdentifier","text":"Encodable"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP","text":"BaseRequestContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore8ResponseV","text":"Response"}],"url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","type":"topic","abstract":[{"text":"Encode value returned by handler to request","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"role":"symbol","url":"\/documentation\/hummingbird\/urlencodedformencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"title":"URLEncodedFormEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"role":"article","kind":"article","type":"topic","title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request/decode(as:context:)":{"role":"symbol","title":"decode(as:context:)","url":"\/documentation\/hummingbird\/request\/decode(as:context:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Type","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD04BaseC7ContextR_r0_lF4TypeL_xmfp","text":"Type","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseRequestContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Type","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD04BaseC7ContextR_r0_lF4TypeL_xmfp"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"code":"Application.decoder","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncoder"}],"url":"\/documentation\/hummingbird\/responseencoder","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","navigatorTitle":[{"kind":"identifier","text":"ResponseEncoder"}],"title":"ResponseEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"kind":"article","url":"\/documentation\/hummingbird\/jobsguide","title":"Jobs","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","title":"Migrating to Hummingbird v2","type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext/responseEncoder-65htn":{"role":"symbol","type":"topic","title":"responseEncoder","defaultImplementations":1,"url":"\/documentation\/hummingbird\/baserequestcontext\/responseencoder-65htn","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP7EncoderQa","text":"Encoder"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/responseEncoder-65htn","abstract":[{"type":"text","text":"Response encoder"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseRequestContext"}],"role":"symbol","url":"\/documentation\/hummingbird\/baserequestcontext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. Holds data associated with"},{"type":"text","text":" "},{"type":"text","text":"a request. Provides context for request processing"}],"navigatorTitle":[{"kind":"identifier","text":"BaseRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","title":"BaseRequestContext","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"collectionGroup","type":"topic","kind":"article","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","kind":"article","role":"collection","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/urlencodedformdecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"title":"URLEncodedFormDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext/requestDecoder-9nsum":{"type":"topic","abstract":[{"type":"text","text":"Request decoder"}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"requestDecoder","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11Hummingbird18BaseRequestContextP7DecoderQa","kind":"typeIdentifier","text":"Decoder"}],"url":"\/documentation\/hummingbird\/baserequestcontext\/requestdecoder-9nsum","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/requestDecoder-9nsum","title":"requestDecoder","kind":"symbol","defaultImplementations":1,"required":true}}}