{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"metadata":{"role":"collectionGroup","title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}]},"sections":[],"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" has two member variables "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"decode(_:from)"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"encode(_:from)","type":"codeVoice"},{"text":" function that creates a ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value and the original request that generated it.","type":"text"}],"type":"paragraph"},{"code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" protocol that come with the ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system except you have additional information from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Setting-up-HBApplication","type":"heading","text":"Setting up HBApplication"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" are ","type":"text"},{"type":"codeVoice","code":"Null"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" before you can use ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" in Hummingbird. ","type":"text"},{"type":"codeVoice","code":"HummingbirdFoundation"},{"text":" includes two such implementations. ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows"}],"type":"paragraph"},{"code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Decoding-Requests","type":"heading","text":"Decoding Requests"},{"inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" method in the following manner","type":"text"}],"type":"paragraph"},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Decoder.decode"},{"type":"text","text":" functions "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". I use the function "},{"type":"codeVoice","code":"HBRequest.failure"},{"type":"text","text":" to generate the failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Encoding-Responses","type":"heading","text":"Encoding Responses"},{"inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"code":"HBResponseEncodable","type":"codeVoice"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" object from the above example we can do this","type":"text"}],"type":"paragraph"},{"code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"DecodingEncoding-based-on-Request-headers","type":"heading","text":"Decoding\/Encoding based on Request headers"},{"inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","type":"reference","isActive":true},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","type":"reference","isActive":true},{"type":"text","text":" based on the “content-type” header."}],"type":"paragraph"},{"code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"role":"collection","title":"Hummingbird","kind":"article","type":"topic","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"title":"HBRequestDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","url":"\/documentation\/hummingbird\/hbrequestdecoder","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontext","title":"Request Context","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"type":"topic","title":"URLEncodedFormDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/router","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"title":"HBResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbresponseencoder","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}]}}}