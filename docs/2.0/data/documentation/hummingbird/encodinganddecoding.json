{"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"generated":true}],"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Encoding and Decoding"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" has two member variables "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"code":"decoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBRequestDecoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"decode(_:from)","type":"codeVoice"},{"text":" function that decodes a ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBResponseEncoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"encode(_:from)","type":"codeVoice"},{"text":" function that creates a ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value and the original request that generated it.","type":"text"}]},{"type":"codeListing","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system except you have additional information from the "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" class on how you might want to decode\/encode your data."}]},{"anchor":"Setting-up-HBApplication","type":"heading","level":2,"text":"Setting up HBApplication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default implementations of "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" are "},{"type":"codeVoice","code":"Null"},{"type":"text","text":" implementations that will assert if used. So you have to setup your "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" before you can use "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" in Hummingbird. "},{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" includes two such implementations. "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application"}]},{"type":"codeListing","code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows"}]},{"type":"codeListing","code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"syntax":"swift"},{"anchor":"Decoding-Requests","type":"heading","level":2,"text":"Decoding Requests"},{"type":"paragraph","inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" method in the following manner","type":"text"}]},{"type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Like the standard ","type":"text"},{"type":"codeVoice","code":"Decoder.decode"},{"text":" functions ","type":"text"},{"type":"codeVoice","code":"HBRequest.decode"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". I use the function ","type":"text"},{"type":"codeVoice","code":"HBRequest.failure"},{"text":" to generate the failed ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":".","type":"text"}]},{"anchor":"Encoding-Responses","type":"heading","level":2,"text":"Encoding Responses"},{"type":"paragraph","inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"code":"HBResponseEncodable","type":"codeVoice"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" object from the above example we can do this","type":"text"}]},{"type":"codeListing","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"syntax":"swift"},{"anchor":"DecodingEncoding-based-on-Request-headers","type":"heading","level":2,"text":"Decoding\/Encoding based on Request headers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","type":"reference","isActive":true},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","type":"reference","isActive":true},{"type":"text","text":" based on the “content-type” header."}]},{"type":"codeListing","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}]}],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","role":"collection","url":"\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"role":"symbol","title":"URLEncodedFormDecoder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"type":"topic","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"title":"Testing","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","role":"collection","url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"type":"topic","abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"title":"HBResponseEncoder","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbresponseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","title":"Logging, Metrics and Tracing","kind":"article","type":"topic","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","url":"\/documentation\/hummingbird\/hbrequestdecoder","title":"HBRequestDecoder","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling"}}}