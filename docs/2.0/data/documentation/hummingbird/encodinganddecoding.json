{"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" has two member variables "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"decode(_:from)"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":"."}]},{"code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"encode(_:from)"},{"type":"text","text":" function that creates a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value and the original request that generated it."}]},{"code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" protocol that come with the ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system except you have additional information from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}]},{"text":"Setting up HBApplication","anchor":"Setting-up-HBApplication","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The default implementations of ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"Null","type":"codeVoice"},{"text":" implementations that will assert if used. So you have to setup your ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" before you can use ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" in Hummingbird. ","type":"text"},{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" includes two such implementations. ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application","type":"text"}]},{"code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}]},{"code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"type":"codeListing","syntax":"swift"},{"text":"Decoding Requests","anchor":"Decoding-Requests","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" method in the following manner","type":"text"}]},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Like the standard ","type":"text"},{"type":"codeVoice","code":"Decoder.decode"},{"text":" functions ","type":"text"},{"type":"codeVoice","code":"HBRequest.decode"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". I use the function ","type":"text"},{"type":"codeVoice","code":"HBRequest.failure"},{"text":" to generate the failed ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":".","type":"text"}]},{"text":"Encoding Responses","anchor":"Encoding-Responses","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"code":"HBResponseEncodable","type":"codeVoice"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"code":"User","type":"codeVoice"},{"type":"text","text":" object from the above example we can do this"}]},{"code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"text":"Decoding\/Encoding based on Request headers","anchor":"DecodingEncoding-based-on-Request-headers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","isActive":true,"type":"reference"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder","isActive":true,"type":"reference"},{"text":" based on the “content-type” header.","type":"text"}]},{"code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        guard let header = request.headers[\"content-type\"].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONDecoder().decode(type, from: request)","        case .applicationUrlEncoded:","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}],"kind":"content"}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"],"title":"Reference"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"role":"collectionGroup","title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/URLEncodedFormDecoder":{"type":"topic","title":"URLEncodedFormDecoder","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbirdfoundation\/urlencodedformdecoder","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/URLEncodedFormDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"title":"HBRequestDecoder","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"url":"\/documentation\/hummingbird\/hbrequestdecoder","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","type":"topic","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","title":"HBResponseEncoder","role":"symbol","url":"\/documentation\/hummingbird\/hbresponseencoder","type":"topic","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/router","title":"Router","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","title":"Migrating to Hummingbird v2","role":"article","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"role":"collection","url":"\/documentation\/hummingbird","title":"Hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"role":"collection","url":"\/documentation\/index","title":"Hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"}}}