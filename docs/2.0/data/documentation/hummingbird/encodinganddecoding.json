{"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"The request context "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","isActive":true},{"type":"text","text":" that is provided alongside your "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","isActive":true},{"type":"text","text":" has two member variables "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/requestDecoder-9nsum","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/responseEncoder-65htn","isActive":true},{"type":"text","text":". These define how requests\/responses are decoded\/encoded."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","isActive":true,"type":"reference"},{"type":"text","text":" which requires a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","isActive":true,"type":"reference"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some BaseRequestContext) throws -> T","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","isActive":true,"type":"reference"},{"text":" which requires a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true,"type":"reference"},{"text":" function that creates a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value and the original request that generated it.","type":"text"}],"type":"paragraph"},{"code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some BaseRequestContext) throws -> Response","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system except you have additional information from the "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"BaseRequestContext"},{"type":"text","text":" types on how you might want to decode\/encode your data."}],"type":"paragraph"},{"level":2,"anchor":"Setting-up-your-encoderdecoder","type":"heading","text":"Setting up your encoder\/decoder"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" are ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","isActive":true,"type":"reference"},{"text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you don’t want to use JSON you need to setup you own ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" in a custom request context. For instance ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","type":"reference"},{"text":" for request decoding and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference"},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"reference"},{"text":" to find out more about request contexts.","type":"text"}],"type":"paragraph"},{"code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Decoding-Requests","type":"heading","text":"Decoding Requests"},{"inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)"},{"text":" method in the following manner","type":"text"}],"type":"paragraph"},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Decoder.decode","type":"codeVoice"},{"type":"text","text":" functions "},{"code":"Request.decode","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"code":"ByteBuffers","type":"codeVoice"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}],"type":"paragraph"},{"level":2,"anchor":"Encoding-Responses","type":"heading","text":"Encoding Responses"},{"inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"code":"ResponseEncodable","type":"codeVoice"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" object from the above example we can do this","type":"text"}],"type":"paragraph"},{"code":["extension User: ResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"DecodingEncoding-based-on-Request-headers","type":"heading","text":"Decoding\/Encoding based on Request headers"},{"inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"code":"RequestDecoder","type":"codeVoice"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"URLEncodedFormDecoder","type":"codeVoice"},{"text":" based on the “content-type” header.","type":"text"}],"type":"paragraph"},{"code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some BaseRequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"type":"codeVoice","code":"ResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"generated":true}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Hummingbird"}],"title":"Encoding and Decoding","roleHeading":"API Collection","role":"collectionGroup"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/jobsguide","title":"Jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"url":"\/documentation\/hummingbird\/baserequestcontext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseRequestContext","kind":"identifier"}],"title":"BaseRequestContext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. Holds data associated with"},{"type":"text","text":" "},{"type":"text","text":"a request. Provides context for request processing"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","type":"topic","navigatorTitle":[{"text":"BaseRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","role":"collectionGroup","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","title":"Request Contexts","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"navigatorTitle":[{"kind":"identifier","text":"RequestDecoder"}],"role":"symbol","title":"RequestDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestDecoder"}],"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"type":"topic","url":"\/documentation\/hummingbird\/requestdecoder","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"url":"\/documentation\/hummingbird\/urlencodedformencoder","kind":"symbol","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","title":"URLEncodedFormEncoder","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","title":"encode(_:from:context:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Encode value returned by handler to request"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:SE","text":"Encodable"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"BaseRequestContext","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Response","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore8ResponseV"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext/responseEncoder-65htn":{"required":true,"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/responseEncoder-65htn","url":"\/documentation\/hummingbird\/baserequestcontext\/responseencoder-65htn","defaultImplementations":1,"title":"responseEncoder","abstract":[{"type":"text","text":"Response encoder"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11Hummingbird18BaseRequestContextP7EncoderQa","kind":"typeIdentifier","text":"Encoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"abstract":[{"type":"codeVoice","code":"JSONEncoder"},{"text":" facilitates the encoding of ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" values into JSON.","type":"text"}],"navigatorTitle":[{"text":"JSONEncoder","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/jsonencoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONEncoder","kind":"identifier"}],"title":"JSONEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request/decode(as:context:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Type"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD04BaseC7ContextR_r0_lF4TypeL_xmfp","text":"Type"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"BaseRequestContext","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Type","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD04BaseC7ContextR_r0_lF4TypeL_xmfp"}],"title":"decode(as:context:)","type":"topic","abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"code":"Application.decoder","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","url":"\/documentation\/hummingbird\/request\/decode(as:context:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","title":"Hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"abstract":[{"text":"Decode type from request","type":"text"}],"kind":"symbol","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA04BaseB7ContextRd_0_r0_lF1TL_qd__mfp","text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseRequestContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA04BaseB7ContextRd_0_r0_lF1TL_qd__mfp"}],"role":"symbol","title":"decode(_:from:context:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","kind":"symbol","title":"ResponseEncoder","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"url":"\/documentation\/hummingbird\/responseencoder","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext/requestDecoder-9nsum":{"kind":"symbol","url":"\/documentation\/hummingbird\/baserequestcontext\/requestdecoder-9nsum","abstract":[{"type":"text","text":"Request decoder"}],"defaultImplementations":1,"title":"requestDecoder","required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"requestDecoder"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11Hummingbird18BaseRequestContextP7DecoderQa","kind":"typeIdentifier","text":"Decoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/requestDecoder-9nsum","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request":{"url":"\/documentation\/hummingbird\/request","title":"Request","type":"topic","navigatorTitle":[{"text":"Request","kind":"identifier"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","kind":"article","title":"Migrating to Hummingbird v2","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"type":"topic","url":"\/documentation\/hummingbird\/routerguide","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","title":"Testing","type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"url":"\/documentation\/hummingbird\/jsondecoder","title":"JSONDecoder","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JSONDecoder"}],"abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" facilitates the decoding of JSON into semantic "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","title":"Service Lifecycle","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/urlencodedformdecoder","role":"symbol","title":"URLEncodedFormDecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","type":"topic"}}}