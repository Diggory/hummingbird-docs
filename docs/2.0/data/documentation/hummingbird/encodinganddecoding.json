{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"]},{"title":"Hummingbird Server","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The request context "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":" that is provided alongside your "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"text":" has two member variables ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","isActive":true},{"type":"text","text":". These define how requests\/responses are decoded\/encoded."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"decoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder"},{"text":" which requires a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","isActive":true},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some RequestContext) throws -> T","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" must conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","type":"reference","isActive":true},{"text":" which requires a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true},{"text":" function that creates a ","type":"text"},{"type":"codeVoice","code":"Response"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some RequestContext) throws -> Response","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system except you have additional information from the "},{"code":"Request","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" types on how you might want to decode\/encode your data."}]},{"level":2,"type":"heading","anchor":"Setting-up-your-encoderdecoder","text":"Setting up your encoder\/decoder"},{"inlineContent":[{"type":"text","text":"The default implementations of "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"text":" are ","type":"text"},{"type":"codeVoice","code":"Hummingbird\/JSONDecoder"},{"type":"text","text":" and "},{"code":"Hummingbird\/JSONEncoder","type":"codeVoice"},{"text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you don’t want to use JSON you need to setup you own ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" in a custom request context. For instance "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","isActive":true},{"text":" for request decoding and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true},{"type":"text","text":" to find out more about request contexts."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"]},{"level":2,"text":"Decoding Requests","type":"heading","anchor":"Decoding-Requests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","isActive":true},{"type":"text","text":" method in the following manner"}]},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Decoder.decode","type":"codeVoice"},{"text":" functions ","type":"text"},{"type":"codeVoice","code":"Request.decode"},{"text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of ","type":"text"},{"code":"ByteBuffers","type":"codeVoice"},{"text":". We need to collate the request body into one buffer before we can decode it.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Encoding-Responses","text":"Encoding Responses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"ResponseEncodable"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"code":"User","type":"codeVoice"},{"type":"text","text":" object from the above example we can do this"}]},{"type":"codeListing","code":["extension User: ResponseEncodable {}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"syntax":"swift"},{"text":"Decoding\/Encoding based on Request headers","level":2,"type":"heading","anchor":"DecodingEncoding-based-on-Request-headers"},{"type":"paragraph","inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"type":"codeVoice","code":"RequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some RequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"type":"codeVoice","code":"ResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}]}],"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","role":"article","title":"Encoding and Decoding"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"title":"Error Handling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"title":"URLEncodedFormEncoder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/urlencodedformencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","role":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder-3mece":{"title":"responseEncoder","defaultImplementations":1,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","kind":"symbol","type":"topic","required":true,"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa","text":"Encoder","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/requestcontext\/responseencoder-3mece","abstract":[{"text":"Response encoder","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","type":"topic","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}],"navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}],"role":"symbol","type":"topic","title":"RequestContext","url":"\/documentation\/hummingbird\/requestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"logo.png":{"identifier":"logo.png","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"title":"RequestDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RequestDecoder","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/requestdecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestDecoder"}],"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","role":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","title":"Middleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"kind":"symbol","title":"decode(_:from:context:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp"}],"required":true,"abstract":[{"type":"text","text":"Decode type from request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"role":"symbol","type":"topic","title":"URLEncodedFormDecoder","url":"\/documentation\/hummingbird\/urlencodedformdecoder","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"role":"symbol","abstract":[{"text":"Encode value returned by handler to request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","required":true,"kind":"symbol","title":"encode(_:from:context:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"text":"(","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SE","text":"Encodable"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier","text":"Request"},{"kind":"text","text":", "},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Response","preciseIdentifier":"s:15HummingbirdCore8ResponseV"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"title":"ResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ResponseEncoder"}],"type":"topic","url":"\/documentation\/hummingbird\/responseencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","role":"symbol","navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Hummingbird Documentation","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/requestDecoder-5rq7e":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","required":true,"type":"topic","url":"\/documentation\/hummingbird\/requestcontext\/requestdecoder-5rq7e","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"requestDecoder"},{"text":": ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7DecoderQa"}],"abstract":[{"text":"Request decoder","type":"text"}],"kind":"symbol","title":"requestDecoder","role":"symbol","defaultImplementations":1},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","title":"Service Lifecycle","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","title":"Testing","type":"topic","url":"\/documentation\/hummingbird\/testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"kind":"article","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","title":"Result Builder Router","type":"topic","url":"\/documentation\/hummingbird\/routerbuilderguide","abstract":[{"type":"text","text":"Building your router using a result builder."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"article","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request/decode(as:context:)":{"kind":"symbol","title":"decode(as:context:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Type"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp","kind":"typeIdentifier","text":"Type"},{"kind":"text","text":".Type, "},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Type","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp"}],"abstract":[{"text":"Decode request using decoder stored at ","type":"text"},{"type":"codeVoice","code":"Application.decoder"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","url":"\/documentation\/hummingbirdcore\/request\/decode(as:context:)","type":"topic"}}}