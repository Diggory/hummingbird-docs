{"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"generated":true}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"collectionGroup","title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The request context "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext"},{"type":"text","text":" that is provided alongside your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest"},{"type":"text","text":" has two member variables "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext\/requestDecoder-t6zc"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext\/responseEncoder-3aosk"},{"type":"text","text":". These define how requests\/responses are decoded\/encoded."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","isActive":true},{"text":" which requires a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder\/decode(_:from:context:)","isActive":true},{"text":" function that decodes a ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest, context: some HBBaseRequestContext) throws -> T","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","type":"reference","isActive":true},{"type":"text","text":" which requires a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder\/encode(_:from:context:)","type":"reference","isActive":true},{"type":"text","text":" function that creates a "},{"code":"HBResponse","type":"codeVoice"},{"type":"text","text":" from a "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value and the original request that generated it."}]},{"type":"codeListing","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest, context: some HBBaseRequestContext) throws -> HBResponse","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" protocol that come with the ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system except you have additional information from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"HBBaseRequestContext","type":"codeVoice"},{"text":" types on how you might want to decode\/encode your data.","type":"text"}]},{"type":"heading","text":"Setting up your encoder\/decoder","anchor":"Setting-up-your-encoderdecoder","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default implementations of "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder"},{"type":"text","text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want to use JSON you need to setup you own "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" in a custom request context. For instance "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder"},{"type":"text","text":" for request decoding and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"},{"type":"text","text":" for response encoding. The router is then initialized with this context. Read "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},{"type":"text","text":" to find out more about request contexts."}]},{"type":"codeListing","code":["struct URLEncodedRequestContext: HBRequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = HBRouter(context: URLEncodedRequestContext.self)"],"syntax":"swift"},{"type":"heading","text":"Decoding Requests","anchor":"Decoding-Requests","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest\/decode(as:context:)","isActive":true},{"type":"text","text":" method in the following manner"}]},{"type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Decoder.decode"},{"type":"text","text":" functions "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"type":"codeVoice","code":"ByteBuffers"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}]},{"type":"heading","text":"Encoding Responses","anchor":"Encoding-Responses","level":2},{"type":"paragraph","inlineContent":[{"text":"To have an object encoded in the response we have to conform it to ","type":"text"},{"type":"codeVoice","code":"HBResponseEncodable"},{"text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" object from the above example we can do this","type":"text"}]},{"type":"codeListing","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"syntax":"swift"},{"type":"heading","text":"Decoding\/Encoding based on Request headers","anchor":"DecodingEncoding-based-on-Request-headers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"codeVoice","code":"\/HummingbirdFoundation\/URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}]},{"type":"codeListing","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest, context: some HBBaseRequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HBHTTPError(.badRequest) }","        guard let mediaType = HBMediaType(from: header) else { throw HBHTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"code":"HBResponseEncoder","type":"codeVoice"},{"type":"text","text":" based on the “accepts” header in the request."}]}],"kind":"content"}],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"title":"HBRequestDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbrequestdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","role":"symbol","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"type":"topic","title":"URLEncodedFormDecoder","kind":"symbol","navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/urlencodedformdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBaseRequestContext/requestDecoder-t6zc":{"required":true,"title":"requestDecoder","url":"\/documentation\/hummingbird\/hbbaserequestcontext\/requestdecoder-t6zc","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext\/requestDecoder-t6zc","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"requestDecoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP7DecoderQa"}],"defaultImplementations":1,"abstract":[{"text":"Request decoder","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/urlencodedformencoder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","kind":"symbol","title":"URLEncodedFormEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBaseRequestContext":{"abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBBaseRequestContext"}],"type":"topic","title":"HBBaseRequestContext","url":"\/documentation\/hummingbird\/hbbaserequestcontext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBaseRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequest/decode(as:context:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest\/decode(as:context:)","url":"\/documentation\/hummingbirdcore\/hbrequest\/decode(as:context:)","title":"decode(as:context:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Type"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Type","preciseIdentifier":"s:15HummingbirdCore9HBRequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD20HBBaseRequestContextR_r0_lF4TypeL_xmfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Type","preciseIdentifier":"s:15HummingbirdCore9HBRequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD20HBBaseRequestContextR_r0_lF4TypeL_xmfp"}],"abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"type":"codeVoice","code":"HBApplication.decoder"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder/encode(_:from:context:)":{"title":"encode(_:from:context:)","abstract":[{"text":"Encode value returned by handler to request","type":"text"}],"url":"\/documentation\/hummingbird\/hbresponseencoder\/encode(_:from:context:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encodable","preciseIdentifier":"s:SE","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HBRequest","preciseIdentifier":"s:15HummingbirdCore9HBRequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"HBResponse","preciseIdentifier":"s:15HummingbirdCore10HBResponseV","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder\/encode(_:from:context:)","required":true,"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"role":"collection","kind":"article","type":"topic","title":"Hummingbird","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder/decode(_:from:context:)":{"role":"symbol","url":"\/documentation\/hummingbird\/hbrequestdecoder\/decode(_:from:context:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder\/decode(_:from:context:)","kind":"symbol","title":"decode(_:from:context:)","abstract":[{"text":"Decode type from request","type":"text"}],"type":"topic","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird16HBRequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA20HBBaseRequestContextRd_0_r0_lF1TL_qd__mfp","text":"T"},{"kind":"text","text":".Type, "},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HBRequest","preciseIdentifier":"s:15HummingbirdCore9HBRequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","preciseIdentifier":"s:11Hummingbird16HBRequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA20HBBaseRequestContextRd_0_r0_lF1TL_qd__mfp","kind":"typeIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"collectionGroup","kind":"article","type":"topic","title":"Router","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder","kind":"symbol","title":"JSONDecoder","abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" types.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","role":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"role":"collectionGroup","kind":"article","type":"topic","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}],"title":"HBResponseEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbresponseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","navigatorTitle":[{"kind":"identifier","text":"JSONEncoder"}],"url":"\/documentation\/hummingbird\/jsonencoder","kind":"symbol","title":"JSONEncoder","abstract":[{"code":"JSONEncoder","type":"codeVoice"},{"text":" facilitates the encoding of ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" values into JSON."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBaseRequestContext/responseEncoder-3aosk":{"type":"topic","defaultImplementations":1,"required":true,"kind":"symbol","abstract":[{"text":"Response encoder","type":"text"}],"title":"responseEncoder","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"responseEncoder","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP7EncoderQa","text":"Encoder","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext\/responseEncoder-3aosk","url":"\/documentation\/hummingbird\/hbbaserequestcontext\/responseencoder-3aosk"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequest":{"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequest"}],"type":"topic","title":"HBRequest","url":"\/documentation\/hummingbirdcore\/hbrequest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequest"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","title":"Service Lifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","title":"Testing","abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"type":"topic"}}}