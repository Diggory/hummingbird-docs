{"kind":"article","metadata":{"title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}],"roleHeading":"API Collection","role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Guides","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"]}],"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The request context "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","type":"reference","isActive":true},{"type":"text","text":" that is provided alongside your "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","type":"reference","isActive":true},{"type":"text","text":" has two member variables "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/requestDecoder-9nsum","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/responseEncoder-65htn","type":"reference","isActive":true},{"type":"text","text":". These define how requests\/responses are decoded\/encoded."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder"},{"type":"text","text":" which requires a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)"},{"text":" function that decodes a ","type":"text"},{"code":"Request","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some BaseRequestContext) throws -> T","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" must conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","isActive":true,"type":"reference"},{"type":"text","text":" which requires a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true,"type":"reference"},{"type":"text","text":" function that creates a "},{"code":"Response","type":"codeVoice"},{"type":"text","text":" from a "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"syntax":"swift","code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some BaseRequestContext) throws -> Response","}"],"type":"codeListing"},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol that come with the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"Request"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"BaseRequestContext"},{"text":" types on how you might want to decode\/encode your data.","type":"text"}],"type":"paragraph"},{"text":"Setting up your encoder\/decoder","level":2,"anchor":"Setting-up-your-encoderdecoder","type":"heading"},{"inlineContent":[{"text":"The default implementations of ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" are ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder"},{"text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you don’t want to use JSON you need to setup you own "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" in a custom request context. For instance "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","isActive":true},{"type":"text","text":" for request decoding and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","isActive":true},{"type":"text","text":" for response encoding. The router is then initialized with this context. Read "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true},{"type":"text","text":" to find out more about request contexts."}],"type":"paragraph"},{"syntax":"swift","code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"type":"codeListing"},{"text":"Decoding Requests","level":2,"anchor":"Decoding-Requests","type":"heading"},{"inlineContent":[{"text":"Once you have a decoder you can implement decoding in your routes using the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","isActive":true,"type":"reference"},{"text":" method in the following manner","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Decoder.decode","type":"codeVoice"},{"type":"text","text":" functions "},{"code":"Request.decode","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"code":"ByteBuffers","type":"codeVoice"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}],"type":"paragraph"},{"text":"Encoding Responses","level":2,"anchor":"Encoding-Responses","type":"heading"},{"inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}],"type":"paragraph"},{"syntax":"swift","code":["extension User: ResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing"},{"text":"Decoding\/Encoding based on Request headers","level":2,"anchor":"DecodingEncoding-based-on-Request-headers","type":"heading"},{"inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"type":"codeVoice","code":"RequestDecoder"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"text":" based on the “content-type” header.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some BaseRequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In a similar manner you could also create a "},{"code":"ResponseEncoder","type":"codeVoice"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"kind":"symbol","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","title":"RequestDecoder","role":"symbol","url":"\/documentation\/hummingbird\/requestdecoder","navigatorTitle":[{"text":"RequestDecoder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestDecoder","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"type":"topic","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"Jobs","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","role":"collectionGroup","url":"\/documentation\/hummingbird\/jobsguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext/responseEncoder-65htn":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP7EncoderQa","text":"Encoder"}],"url":"\/documentation\/hummingbird\/baserequestcontext\/responseencoder-65htn","title":"responseEncoder","type":"topic","defaultImplementations":1,"required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/responseEncoder-65htn","kind":"symbol","abstract":[{"type":"text","text":"Response encoder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"kind":"symbol","abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","title":"URLEncodedFormEncoder","role":"symbol","url":"\/documentation\/hummingbird\/urlencodedformencoder","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"title":"BaseRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","url":"\/documentation\/hummingbird\/baserequestcontext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"BaseRequestContext","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"abstract":[{"type":"codeVoice","code":"JSONEncoder"},{"text":" facilitates the encoding of ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" values into JSON.","type":"text"}],"url":"\/documentation\/hummingbird\/jsonencoder","title":"JSONEncoder","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","navigatorTitle":[{"text":"JSONEncoder","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONEncoder","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"kind":"article","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext/requestDecoder-9nsum":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestDecoder","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP7DecoderQa"}],"defaultImplementations":1,"title":"requestDecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext\/requestDecoder-9nsum","required":true,"url":"\/documentation\/hummingbird\/baserequestcontext\/requestdecoder-9nsum","kind":"symbol","role":"symbol","type":"topic","abstract":[{"text":"Request decoder","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"collectionGroup","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request/decode(as:context:)":{"kind":"symbol","title":"decode(as:context:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request\/decode(as:context:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"type":"codeVoice","code":"Application.decoder"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Type"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD04BaseC7ContextR_r0_lF4TypeL_xmfp","text":"Type"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP","text":"BaseRequestContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD04BaseC7ContextR_r0_lF4TypeL_xmfp","text":"Type"}],"url":"\/documentation\/hummingbird\/request\/decode(as:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","kind":"article","title":"Testing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"type":"topic","navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" types.","type":"text"}],"title":"JSONDecoder","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/jsondecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"type":"topic","abstract":[{"text":"Decode type from request","type":"text"}],"title":"decode(_:from:context:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA04BaseB7ContextRd_0_r0_lF1TL_qd__mfp","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseRequestContext","preciseIdentifier":"s:11Hummingbird18BaseRequestContextP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA04BaseB7ContextRd_0_r0_lF1TL_qd__mfp","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","kind":"article","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","role":"collectionGroup","url":"\/documentation\/hummingbird\/routerguide","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"type":"topic","url":"\/documentation\/hummingbird\/urlencodedformdecoder","title":"URLEncodedFormDecoder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"type":"topic","abstract":[{"text":"Encode value returned by handler to request","type":"text"}],"role":"symbol","title":"encode(_:from:context:)","kind":"symbol","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:SE","text":"Encodable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18BaseRequestContextP","text":"BaseRequestContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore8ResponseV","text":"Response","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"kind":"symbol","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","title":"ResponseEncoder","role":"symbol","url":"\/documentation\/hummingbird\/responseencoder","navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","type":"topic","title":"Service Lifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request":{"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbird\/request","title":"Request","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","navigatorTitle":[{"kind":"identifier","text":"Request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"}}}