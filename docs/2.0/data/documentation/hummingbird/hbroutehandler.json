{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/hbroutehandler"]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/Output"],"title":"Associated Types"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:context:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(context:)"],"title":"Instance Methods"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"],"title":"Router"}],"abstract":[{"type":"text","text":"Object for handling requests."}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"sections":[],"metadata":{"navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}],"title":"HBRouteHandler","modules":[{"name":"Hummingbird"}],"role":"symbol","externalID":"s:11Hummingbird14HBRouteHandlerP","roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing a closure to the router you can provide an object it should try and"},{"type":"text","text":" "},{"type":"text","text":"create before handling the request. This allows you to separate the extraction of data"},{"type":"text","text":" "},{"type":"text","text":"from the request and the processing of the request. For example"}]},{"type":"codeListing","code":["struct UpdateReminder: HBRouteHandler {","    struct Request: Codable {","        let description: String","        let date: Date","    }","    let update: Request","    let id: String","","    init(from request: HBRequest, context: some HBBaseRequestContext) throws {","        self.update = try await request.decode(as: Request.self, context: context)","        self.id = try request.parameters.require(\"id\")","    }","    func handle(context: some HBBaseRequestContext) async throws -> HTTPResponse.Status {","        let reminder = Reminder(id: id, update: update)","        return reminder.update(on: db)","            .map { _ in .ok }","    }","}"],"syntax":null}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"url":"\/documentation\/hummingbird\/hbroutergroup","title":"HBRouterGroup","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"text":"suffix to the endpoint path","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"kind":"symbol","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post â€¦) methods"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethods","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutermethods","title":"HBRouterMethods","type":"topic","navigatorTitle":[{"text":"HBRouterMethods","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"kind":"symbol","abstract":[{"text":"Split router path into components","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"url":"\/documentation\/hummingbird\/routerpath","title":"RouterPath","type":"topic","navigatorTitle":[{"text":"RouterPath","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/init(from:context:)":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBRequest","preciseIdentifier":"s:15HummingbirdCore9HBRequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"type":"topic","abstract":[],"url":"\/documentation\/hummingbird\/hbroutehandler\/init(from:context:)","title":"init(from:context:)","role":"symbol","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"kind":"symbol","type":"topic","title":"HBCallbackResponder","url":"\/documentation\/hummingbird\/hbcallbackresponder","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"navigatorTitle":[{"text":"HBCallbackResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"type":"topic","abstract":[{"text":"Endpoint path storage","type":"text"}],"kind":"symbol","title":"EndpointPath","navigatorTitle":[{"kind":"identifier","text":"EndpointPath"}],"role":"symbol","url":"\/documentation\/hummingbird\/endpointpath","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EndpointPath"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/Output":{"title":"Output","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/Output","role":"symbol","url":"\/documentation\/hummingbird\/hbroutehandler\/output","type":"topic","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Output","kind":"identifier"}],"abstract":[],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"kind":"symbol","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbresponder","title":"HBResponder","type":"topic","navigatorTitle":[{"text":"HBResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/handle(context:)":{"kind":"symbol","role":"symbol","title":"handle(context:)","abstract":[],"required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP","text":"HBBaseRequestContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14HBRouteHandlerP6OutputQa","text":"Output"}],"type":"topic","url":"\/documentation\/hummingbird\/hbroutehandler\/handle(context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"role":"collection","url":"\/documentation\/hummingbird","title":"Hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"url":"\/documentation\/hummingbird\/hbroutehandler","title":"HBRouteHandler","abstract":[{"text":"Object for handling requests.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRouteHandler"}],"navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"kind":"symbol","abstract":[{"type":"text","text":"Options available to routes"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethodOptions","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutermethodoptions","title":"HBRouterMethodOptions","type":"topic","navigatorTitle":[{"text":"HBRouterMethodOptions","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"title":"HBRouter","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"type":"topic","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"type":"text","text":" that will follow these rules."}],"url":"\/documentation\/hummingbird\/hbrouter"}}}