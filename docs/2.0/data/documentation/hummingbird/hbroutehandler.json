{"sections":[],"metadata":{"roleHeading":"Protocol","navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}],"symbolKind":"protocol","role":"symbol","title":"HBRouteHandler","modules":[{"name":"Hummingbird"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"externalID":"s:11Hummingbird14HBRouteHandlerP"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"abstract":[{"type":"text","text":"Object for handling requests."}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/Output"],"title":"Associated Types"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:context:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(context:)"],"title":"Instance Methods"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/hbroutehandler"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"],"generated":true,"title":"Router"}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"Instead of passing a closure to the router you can provide an object it should try and","type":"text"},{"text":" ","type":"text"},{"text":"create before handling the request. This allows you to separate the extraction of data","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the request and the processing of the request. For example"}],"type":"paragraph"},{"code":["struct UpdateReminder: HBRouteHandler {","    struct Request: Codable {","        let description: String","        let date: Date","    }","    let update: Request","    let id: String","","    init(from request: HBRequest, context: some HBBaseRequestContext) throws {","        self.update = try await request.decode(as: Request.self, context: context)","        self.id = try request.parameters.require(\"id\")","    }","    func handle(context: some HBBaseRequestContext) async throws -> HTTPResponse.Status {","        let reminder = Reminder(id: id, update: update)","        return reminder.update(on: db)","            .map { _ in .ok }","    }","}"],"type":"codeListing","syntax":null}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","title":"HBRouter","kind":"symbol","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbrouter","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/handle(context:)":{"url":"\/documentation\/hummingbird\/hbroutehandler\/handle(context:)","required":true,"abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:11Hummingbird14HBRouteHandlerP6OutputQa"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(context:)","kind":"symbol","title":"handle(context:)","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"url":"\/documentation\/hummingbird\/hbroutehandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRouteHandler"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","abstract":[{"type":"text","text":"Object for handling requests."}],"navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"title":"HBRouteHandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"navigatorTitle":[{"text":"EndpointPath","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Endpoint path storage"}],"title":"EndpointPath","url":"\/documentation\/hummingbird\/endpointpath","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EndpointPath","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"type":"topic","abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"text":" ","type":"text"},{"text":"suffix to the endpoint path","type":"text"}],"title":"HBRouterGroup","url":"\/documentation\/hummingbird\/hbroutergroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","title":"HBRouterMethods","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethods","kind":"identifier"}],"abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post â€¦) methods"}],"navigatorTitle":[{"text":"HBRouterMethods","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/hbroutermethods"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/init(from:context:)":{"abstract":[],"title":"init(from:context:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBRequest","preciseIdentifier":"s:15HummingbirdCore9HBRequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"required":true,"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:context:)","url":"\/documentation\/hummingbird\/hbroutehandler\/init(from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponderBuilder":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponderBuilder"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","title":"HBResponderBuilder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponderBuilder"}],"url":"\/documentation\/hummingbird\/hbresponderbuilder","abstract":[{"type":"text","text":"A type that has a single method to build a responder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterResponder":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterResponder"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","title":"HBRouterResponder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterResponder"}],"url":"\/documentation\/hummingbird\/hbrouterresponder","abstract":[{"text":"Directs requests to handlers based on the request uri and method.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","title":"HBResponder","kind":"symbol","navigatorTitle":[{"text":"HBResponder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbresponder","abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"type":"topic","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"title":"HBCallbackResponder","url":"\/documentation\/hummingbird\/hbcallbackresponder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/Output":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/Output","abstract":[],"role":"symbol","title":"Output","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Output"}],"required":true,"url":"\/documentation\/hummingbird\/hbroutehandler\/output"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","url":"\/documentation\/hummingbird\/routerpath","abstract":[{"text":"Split router path into components","type":"text"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterPath"}],"title":"RouterPath","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterPath"}]}}}