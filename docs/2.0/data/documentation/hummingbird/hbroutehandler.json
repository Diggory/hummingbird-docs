{"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/Output"]},{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:context:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(context:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}],"modules":[{"name":"Hummingbird"}],"title":"HBRouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"symbolKind":"protocol","externalID":"s:11Hummingbird14HBRouteHandlerP","role":"symbol","roleHeading":"Protocol"},"seeAlsoSections":[{"title":"Router","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"]}],"abstract":[{"text":"Object for handling requests.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"platforms":["Linux"]}]},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Instead of passing a closure to the router you can provide an object it should try and","type":"text"},{"text":" ","type":"text"},{"text":"create before handling the request. This allows you to separate the extraction of data","type":"text"},{"text":" ","type":"text"},{"text":"from the request and the processing of the request. For example","type":"text"}]},{"syntax":null,"code":["struct UpdateReminder: HBRouteHandler {","    struct Request: Codable {","        let description: String","        let date: Date","    }","    let update: Request","    let id: String","","    init(from request: HBRequest, context: some HBBaseRequestContext) throws {","        self.update = try await request.decode(as: Request.self, context: context)","        self.id = try request.parameters.require(\"id\")","    }","    func handle(context: some HBBaseRequestContext) async throws -> HTTPResponse.Status {","        let reminder = Reminder(id: id, update: update)","        return reminder.update(on: db)","            .map { _ in .ok }","    }","}"],"type":"codeListing"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/hbroutehandler"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"type":"topic","title":"HBRouter","url":"\/documentation\/hummingbird\/hbrouter","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"abstract":[{"text":"Object for handling requests.","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"type":"topic","title":"HBRouteHandler","url":"\/documentation\/hummingbird\/hbroutehandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"type":"topic","abstract":[{"text":"Split router path into components","type":"text"}],"kind":"symbol","title":"RouterPath","url":"\/documentation\/hummingbird\/routerpath","navigatorTitle":[{"text":"RouterPath","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/handle(context:)":{"type":"topic","title":"handle(context:)","abstract":[],"url":"\/documentation\/hummingbird\/hbroutehandler\/handle(context:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(context:)","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"HBBaseRequestContext","preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:11Hummingbird14HBRouteHandlerP6OutputQa"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"url":"\/documentation\/hummingbird\/hbresponder","title":"HBResponder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"navigatorTitle":[{"text":"HBResponder","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"url":"\/documentation\/hummingbird\/hbroutermethodoptions","kind":"symbol","title":"HBRouterMethodOptions","abstract":[{"text":"Options available to routes","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponderBuilder":{"abstract":[{"text":"A type that has a single method to build a responder","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBResponderBuilder","kind":"identifier"}],"type":"topic","title":"HBResponderBuilder","url":"\/documentation\/hummingbird\/hbresponderbuilder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponderBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"navigatorTitle":[{"text":"EndpointPath","kind":"identifier"}],"title":"EndpointPath","url":"\/documentation\/hummingbird\/endpointpath","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EndpointPath","kind":"identifier"}],"abstract":[{"type":"text","text":"Endpoint path storage"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","title":"Hummingbird","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/init(from:context:)":{"type":"topic","title":"init(from:context:)","abstract":[],"url":"\/documentation\/hummingbird\/hbroutehandler\/init(from:context:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:context:)","required":true,"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore9HBRequestV","text":"HBRequest","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird20HBBaseRequestContextP","text":"HBBaseRequestContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbird\/hbroutermethods","kind":"symbol","title":"HBRouterMethods","abstract":[{"text":"Conform to ","type":"text"},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/Output":{"type":"topic","title":"Output","abstract":[],"url":"\/documentation\/hummingbird\/hbroutehandler\/output","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/Output","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Output","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}],"role":"symbol","title":"HBRouterGroup","url":"\/documentation\/hummingbird\/hbroutergroup","kind":"symbol","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterResponder":{"url":"\/documentation\/hummingbird\/hbrouterresponder","title":"HBRouterResponder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterResponder","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Directs requests to handlers based on the request uri and method.","type":"text"}],"navigatorTitle":[{"text":"HBRouterResponder","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"navigatorTitle":[{"text":"HBCallbackResponder","kind":"identifier"}],"title":"HBCallbackResponder","url":"\/documentation\/hummingbird\/hbcallbackresponder","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCallbackResponder","kind":"identifier"}],"abstract":[{"text":"Responder that calls supplied closure","type":"text"}]}}}