{"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]}],"sections":[],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"]}],"kind":"article","primaryContentSections":[{"content":[{"level":2,"anchor":"HummingbirdCore","type":"heading","text":"HummingbirdCore"},{"inlineContent":[{"type":"text","text":"HummingbirdCore contains a Swift NIO based server framework. The server framework "},{"code":"HBServer","type":"codeVoice"},{"type":"text","text":" can be used to support many protocols but is primarily designed to support HTTP. By default it is setup to be an HTTP\/1.1 server, but it can support TLS and HTTP2 via the "},{"type":"codeVoice","code":"HummingbirdTLS"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"HummingbirdHTTP2"},{"text":" modules.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"HummingbirdCore can be used separately from Hummingbird if you want to write your own web application framework.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Hummingbird","type":"heading","text":"Hummingbird"},{"inlineContent":[{"text":"Hummingbird is a lightweight and flexible web application framework that runs on top of HummingbirdCore. It is designed to require the minimum number of dependencies and makes no use of Foundation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, support for adding channel handlers to extend the HTTP server and providing custom encoding\/decoding of "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" objects."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Hummingbird","","let router = HBRouter()","router.get(\"hello\") { request -> String in","    return \"Hello\"","}","let app = HBApplication(","    router: router,","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try await app.runService()"]},{"level":3,"anchor":"Hummingbird-Extensions","type":"heading","text":"Hummingbird Extensions"},{"inlineContent":[{"type":"text","text":"Hummingbird is designed to require the least number of dependencies possible, but this means many features are unavailable to the core libraries. Additional features are provided through extensions. The Hummingbird repository comes with three additional targets "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","type":"reference","isActive":true},{"type":"text","text":". The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","type":"reference","isActive":true},{"type":"text","text":" library contains a number of features that can only really be implemented with the help of Foundation. This include JSON encoding\/decoding, URLEncodedForms, static file serving, and cookies. The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","type":"reference","isActive":true},{"type":"text","text":" library provides a framework for pushing work onto a queue to be processed outside of a request (possibly by another server instance). "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","type":"reference","isActive":true},{"type":"text","text":" library adds helper functions to aid testing Hummingbird projects."}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"text":"Lightweight, flexible, modern server framework written in Swift.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"metadata":{"role":"collection","title":"Hummingbird"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","type":"topic","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"url":"\/documentation\/hummingbirdxct","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","abstract":[{"type":"text","text":"Test framework for Hummingbird"}],"type":"topic","title":"HummingbirdXCT"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","kind":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation":{"url":"\/documentation\/hummingbirdfoundation","role":"collection","kind":"symbol","abstract":[{"text":"Hummingbird features that require Foundation.","type":"text"}],"title":"HummingbirdFoundation","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"url":"\/documentation\/hummingbirdjobs","title":"HummingbirdJobs","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"url":"\/documentation\/hummingbird\/requestcontext","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Context","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"url":"\/documentation\/hummingbirdcore","role":"collection","kind":"symbol","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"title":"HummingbirdCore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"article","type":"topic","role":"collectionGroup","title":"Router","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]}}}