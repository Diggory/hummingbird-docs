{"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"content":[{"level":2,"text":"Hummingbird","type":"heading","anchor":"Hummingbird"},{"inlineContent":[{"type":"text","text":"Hummingbird is a lightweight and flexible web application framework. It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, custom encoding\/decoding of requests\/responses, TLS and HTTP2."}],"type":"paragraph"},{"syntax":"swift","code":["import Hummingbird","","\/\/ create router and add a single GET \/hello route","let router = Router()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","\/\/ create application using router","let app = Application(","    router: router,","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","\/\/ run hummingbird application","try await app.runService()"],"type":"codeListing"},{"text":"Extending Hummingbird","type":"heading","level":3,"anchor":"Extending-Hummingbird"},{"inlineContent":[{"text":"Hummingbird is designed to require the least number of dependencies possible, but this means many features are unavailable to the core libraries. Additional features are provided through extensions. The Hummingbird repository comes with additional modules","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","isActive":true},{"type":"text","text":": TLS support."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2"},{"type":"text","text":": Support for HTTP2 upgrades."}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","isActive":true,"type":"reference"},{"type":"text","text":": helper functions to aid testing Hummingbird projects."}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","interfaceLanguage":"swift"},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GettingStarted","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent"],"title":"Getting Started","anchor":"Getting-Started"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"anchor":"Guides","title":"Guides"}],"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Hummingbird","role":"collection"},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"collectionGroup","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"role":"collectionGroup","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","role":"collection","url":"\/documentation\/hummingbirdwebsocket","type":"topic","title":"HummingbirdWebSocket","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdtesting","type":"topic","title":"HummingbirdTesting","abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","role":"collection","url":"\/documentation\/hummingbirdcore","type":"topic","title":"HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"title":"One Time Passwords","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","url":"\/documentation\/hummingbird\/onetimepasswords","images":[{"type":"icon","identifier":"logo.png"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","url":"\/documentation\/jobs","role":"collection","type":"topic","title":"Jobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic"},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","type":"topic","title":"Persistent data","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"role":"article","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"url":"\/documentation\/hummingbirdredis"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"collectionGroup","kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"identifier":"logo.png","type":"icon"}],"title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"title":"Build a Todos application.","kind":"overview","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","url":"\/tutorials\/todos","role":"overview"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection","type":"topic","url":"\/documentation\/hummingbirdauth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"title":"HummingbirdLambda","url":"\/documentation\/hummingbirdlambda","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","type":"topic","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"collectionGroup","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide"},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"type":"topic","role":"overview","kind":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","title":"Store Data with Fluent","url":"\/tutorials\/fluent","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"abstract":[{"text":"Session based authentication","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","role":"collectionGroup","title":"Sessions","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","url":"\/documentation\/hummingbird\/sessions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/GettingStarted":{"abstract":[{"text":"Create a new project on GitHub or an app locally from a starter template.","type":"text"}],"title":"Getting Started with Hummingbird","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GettingStarted","url":"\/documentation\/hummingbird\/gettingstarted","images":[{"type":"icon","identifier":"logo.png"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"kind":"symbol","abstract":[{"type":"text","text":"Integration with Vapor’s Fluent ORM framework."}],"title":"HummingbirdFluent","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","role":"collection","type":"topic","url":"\/documentation\/hummingbirdfluent"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Add HTTP2 support to Hummingbird server.","type":"text"}],"type":"topic","kind":"symbol","title":"HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","url":"\/documentation\/mustache","type":"topic","title":"Mustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"abstract":[{"text":"Add TLS support to Hummingbird server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","role":"collection","title":"HummingbirdTLS","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","url":"\/documentation\/hummingbirdtls"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collectionGroup","type":"topic","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"article","title":"Jobs","url":"\/documentation\/hummingbird\/jobsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","url":"\/documentation\/hummingbird\/routerguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/AuthenticatorMiddleware":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collectionGroup","type":"topic","abstract":[{"text":"Request authentication middleware","type":"text"}],"kind":"article","title":"Authenticator Middleware","url":"\/documentation\/hummingbird\/authenticatormiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware"}}}