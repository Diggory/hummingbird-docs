{"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"],"title":"Related Documentation"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"title":"Guides"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"],"title":"Tutorials"}],"primaryContentSections":[{"content":[{"text":"HummingbirdCore","level":2,"anchor":"HummingbirdCore","type":"heading"},{"inlineContent":[{"text":"HummingbirdCore contains a Swift NIO based server framework. The server framework ","type":"text"},{"code":"HBServer","type":"codeVoice"},{"text":" can be used to support many protocols but is primarily designed to support HTTP. By default it is setup to be an HTTP\/1.1 server, but it can support TLS and HTTP2 via the ","type":"text"},{"code":"HummingbirdTLS","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"HummingbirdHTTP2","type":"codeVoice"},{"text":" modules.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"HummingbirdCore can be used separately from Hummingbird if you want to write your own web application framework."}],"type":"paragraph"},{"text":"Hummingbird","level":2,"anchor":"Hummingbird","type":"heading"},{"inlineContent":[{"text":"Hummingbird is a lightweight and flexible web application framework that runs on top of HummingbirdCore. It is designed to require the minimum number of dependencies and makes no use of Foundation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, custom encoding\/decoding of requests\/responses, TLS and HTTP2."}],"type":"paragraph"},{"syntax":"swift","code":["import Hummingbird","","\/\/ create router and add a single GET \/hello route","let router = HBRouter()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","\/\/ create application using router","let app = HBApplication(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","\/\/ run hummingbird application","try await app.runService()"],"type":"codeListing"},{"text":"Hummingbird Extensions","level":3,"anchor":"Hummingbird-Extensions","type":"heading"},{"inlineContent":[{"text":"Hummingbird is designed to require the least number of dependencies possible, but this means many features are unavailable to the core libraries. Additional features are provided through extensions. The Hummingbird repository comes with additional modules","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},{"type":"text","text":": framework for pushing work onto a queue to be processed outside of a request (possibly by another server instance)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"},{"type":"text","text":": TLS support."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","type":"reference","isActive":true},{"text":": Support for HTTP2 upgrades.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"},{"text":": helper functions to aid testing Hummingbird projects.","type":"text"}]}]}],"type":"unorderedList"}],"kind":"content"}],"metadata":{"role":"collection","title":"Hummingbird"},"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"references":{"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"title":"Build a Todos application.","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","role":"overview","kind":"overview","type":"topic","url":"\/tutorials\/todos"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"title":"HummingbirdTLS","type":"topic","abstract":[{"text":"Add TLS support to Hummingbird server","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdtls","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"url":"\/documentation\/hummingbird\/onetimepasswords","title":"One Time Passwords","type":"topic","kind":"article","role":"collectionGroup","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","title":"Testing","role":"article","type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","type":"topic","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"url":"\/documentation\/hummingbirdxct","title":"HummingbirdXCT","type":"topic","kind":"symbol","role":"collection","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"url":"\/documentation\/hummingbirdfluent","title":"HummingbirdFluent","type":"topic","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"role":"collectionGroup","abstract":[{"type":"text","text":"Session based authentication"}],"url":"\/documentation\/hummingbird\/sessions","type":"topic","title":"Sessions","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"url":"\/documentation\/hummingbirdhttp2","title":"HummingbirdHTTP2","type":"topic","kind":"symbol","role":"collection","abstract":[{"text":"Add HTTP2 support to Hummingbird server","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","title":"Error Handling","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","title":"Migrating to Hummingbird v2","kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"url":"\/documentation\/hummingbirdredis","title":"HummingbirdRedis","type":"topic","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","type":"topic","kind":"article","role":"collectionGroup","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","title":"Service Lifecycle","kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Authenticators":{"title":"Authenticators","type":"topic","abstract":[{"type":"text","text":"Request authentication middleware"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/authenticators","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"url":"\/documentation\/hummingbirdjobs","title":"HummingbirdJobs","type":"topic","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"url":"\/documentation\/hummingbirdlambda","kind":"symbol","title":"HummingbirdLambda","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","role":"collectionGroup","kind":"article","title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}]}}}