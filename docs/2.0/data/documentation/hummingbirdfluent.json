{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdfluent"]}],"metadata":{"title":"HummingbirdFluent","roleHeading":"Framework","modules":[{"name":"HummingbirdFluent"}],"role":"collection","externalID":"HummingbirdFluent","symbolKind":"module"},"abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"hierarchy":{"paths":[[]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"syntax":"swift","code":["let fluent = Fluent()","\/\/ add sqlite database","fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","","\/\/ add router with one route to return a Todo type","let router = Router()","router.get(\"todo\/{id}\") { request, context in","    let id = try await context.parameters.require(\"id\", as: UUID.self)","    return Todo.find(id, on: fluent.db())","}","","var app = Application(router: router)","\/\/ add fluent as a service to manage its lifecycle","app.addServices(fluent)","try await app.runService()"],"type":"codeListing"},{"text":"Storage","anchor":"Storage","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"HummingbirdFluent provides a driver for the persist framework to store key, value pairs between requests."}],"type":"paragraph"},{"syntax":"swift","code":["let fluent = Fluent()","\/\/ add sqlite database","fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","let persist = FluentPersistDriver(fluent: fluent)","if doingMigration {","    \/\/ fluent persist driver requires a migrate the first time you run","    try await fluent.migrate()","}","let router = Router()","\/\/ return value from sqlite database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in sqlite database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = Application(router: router)","\/\/ add fluent and persist driver as services to manage their lifecycle","app.addServices(fluent, persist)","try await app.runService()"],"type":"codeListing"},{"inlineContent":[{"text":"Read the ","type":"text"},{"identifier":"https:\/\/docs.vapor.codes\/fluent\/overview\/","isActive":true,"type":"reference"},{"text":" for more information on Fluent.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"title":"Fluent","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/Fluent"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver"]},{"title":"Classes","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentMigrations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},"kind":"symbol","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/Fluent":{"title":"Fluent","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fluent"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Fluent"}],"role":"symbol","url":"\/documentation\/hummingbirdfluent\/fluent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/Fluent","abstract":[{"type":"text","text":"Manage fluent databases and migrations"}]},"https://docs.vapor.codes/fluent/overview/":{"title":"Vapor docs","titleInlineContent":[{"type":"text","text":"Vapor docs"}],"url":"https:\/\/docs.vapor.codes\/fluent\/overview\/","type":"link","identifier":"https:\/\/docs.vapor.codes\/fluent\/overview\/"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentMigrations":{"title":"FluentMigrations","navigatorTitle":[{"text":"FluentMigrations","kind":"identifier"}],"url":"\/documentation\/hummingbirdfluent\/fluentmigrations","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FluentMigrations","kind":"identifier"}],"abstract":[{"type":"text","text":"Manage Fluent database migrations"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentMigrations","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"title":"HummingbirdFluent","type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdfluent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"kind":"symbol","title":"FluentPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}],"type":"topic","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","type":"topic","role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"}}}