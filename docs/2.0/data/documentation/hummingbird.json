{"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"],"title":"Tutorials"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider"],"title":"Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"],"title":"Router"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCacheControl","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEditedResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookie","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookies"],"title":"Request\/Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCoreRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRemoteAddressRequestContext"],"title":"Request context"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseCodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"],"title":"Encoding\/Decoding"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Middleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware"],"title":"Middleware"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"],"title":"Storage"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileIO"],"title":"File management"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GracefulShutdownWaiter"],"title":"Miscellaneous"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/loggerWithRequestId(_:)"],"title":"Functions"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Hummingbird","modules":[{"name":"Hummingbird"}],"role":"collection","roleHeading":"Framework","externalID":"Hummingbird","symbolKind":"module"},"hierarchy":{"paths":[[]]},"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"],"title":"Related Documentation"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Hummingbird is a lightweight, modern, flexible server framework designed to require the minimum number of dependencies.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, custom encoding\/decoding of requests\/responses, TLS and HTTP2."}]},{"type":"codeListing","syntax":"swift","code":["import Hummingbird","","\/\/ create router and add a single GET \/hello route","let router = HBRouter()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","\/\/ create application using router","let app = HBApplication(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","\/\/ run hummingbird application","try await app.runService()"]}]}],"variants":[{"paths":["\/documentation\/hummingbird"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplicationConfiguration":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplicationConfiguration"}],"abstract":[{"type":"text","text":"Application configuration"}],"role":"symbol","title":"HBApplicationConfiguration","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplicationConfiguration"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationConfiguration","url":"\/documentation\/hummingbird\/hbapplicationconfiguration"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/GracefulShutdownWaiter":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"GracefulShutdownWaiter"}],"abstract":[],"role":"symbol","title":"GracefulShutdownWaiter","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"GracefulShutdownWaiter"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GracefulShutdownWaiter","url":"\/documentation\/hummingbird\/gracefulshutdownwaiter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseCodable":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseCodable","title":"HBResponseCodable","url":"\/documentation\/hummingbird\/hbresponsecodable","abstract":[{"text":"Protocol for codable object that can generate a response","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseCodable","kind":"identifier"}],"navigatorTitle":[{"text":"HBResponseCodable","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBLogRequestsMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","kind":"symbol","type":"topic","title":"HBLogRequestsMiddleware","navigatorTitle":[{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"url":"\/documentation\/hummingbird\/hblogrequestsmiddleware","role":"symbol","abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBParameters":{"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"HBParameters","kind":"identifier"}],"abstract":[{"type":"text","text":"HBParameters is a special case of FlatDictionary where both the key"},{"type":"text","text":" "},{"type":"text","text":"and value types are Substrings. It is used for parameters extracted"},{"type":"text","text":" "},{"type":"text","text":"from URIs"}],"role":"symbol","title":"HBParameters","kind":"symbol","navigatorTitle":[{"text":"HBParameters","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParameters","url":"\/documentation\/hummingbird\/hbparameters"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCoreRequestContext":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCoreRequestContext","title":"HBCoreRequestContext","url":"\/documentation\/hummingbird\/hbcorerequestcontext","abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCoreRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"HBCoreRequestContext"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"type":"topic","title":"HummingbirdMustache","url":"\/documentation\/hummingbirdmustache","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","kind":"symbol","abstract":[{"type":"text","text":"Mustache template engine."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncodable":{"type":"topic","title":"HBResponseEncodable","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncodable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncodable","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"type":"codeVoice","code":"HBApplication.encoder"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbresponseencodable","navigatorTitle":[{"text":"HBResponseEncodable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBasicRequestContext"}],"abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"role":"symbol","title":"HBBasicRequestContext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBBasicRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","url":"\/documentation\/hummingbird\/hbbasicrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRemoteAddressRequestContext":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRemoteAddressRequestContext","title":"HBRemoteAddressRequestContext","url":"\/documentation\/hummingbird\/hbremoteaddressrequestcontext","abstract":[{"text":"Protocol for request context that stores the remote address of connected client.","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRemoteAddressRequestContext","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"HBRemoteAddressRequestContext"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","title":"Migrating to Hummingbird v2","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","title":"JSONDecoder","url":"\/documentation\/hummingbird\/jsondecoder","abstract":[{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" facilitates the decoding of JSON into semantic "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" types."}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"JSONDecoder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareGroup"}],"navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareGroup"}],"abstract":[{"type":"text","text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one"}],"url":"\/documentation\/hummingbird\/hbmiddlewaregroup","kind":"symbol","title":"HBMiddlewareGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCookie":{"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBCookie"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCookie"}],"url":"\/documentation\/hummingbird\/hbcookie","abstract":[{"text":"Structure holding a single cookie","type":"text"}],"title":"HBCookie","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookie"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCookies":{"abstract":[{"type":"text","text":"Structure holding an array of cookies"}],"role":"symbol","title":"HBCookies","url":"\/documentation\/hummingbird\/hbcookies","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookies","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCookies","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBCookies","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","title":"Hummingbird","url":"\/documentation\/hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"kind":"symbol","url":"\/documentation\/hummingbirdauth","role":"collection","type":"topic","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","type":"topic","kind":"symbol","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"type":"topic","title":"HBPersistError","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","abstract":[{"text":"Errors return by persist framework","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbpersisterror","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"url":"\/documentation\/hummingbirdlambda","title":"HummingbirdLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCacheControl":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCacheControl","kind":"identifier"}],"abstract":[{"text":"Associates cache control values with filename","type":"text"}],"role":"symbol","title":"HBCacheControl","kind":"symbol","navigatorTitle":[{"text":"HBCacheControl","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCacheControl","url":"\/documentation\/hummingbird\/hbcachecontrol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequest"}],"title":"HBRequest","navigatorTitle":[{"kind":"identifier","text":"HBRequest"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbrequest","kind":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","title":"HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","kind":"symbol","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBTracingMiddleware":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","navigatorTitle":[{"kind":"identifier","text":"HBTracingMiddleware"}],"url":"\/documentation\/hummingbird\/hbtracingmiddleware","title":"HBTracingMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBTracingMiddleware"}],"abstract":[{"type":"text","text":"Middleware creating Distributed Tracing spans for each request."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"url":"\/documentation\/hummingbird\/hbresponseencoder","title":"HBResponseEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBDateCache":{"kind":"symbol","abstract":[{"text":"Current date formatted cache service","type":"text"}],"navigatorTitle":[{"text":"HBDateCache","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBDateCache","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbdatecache","type":"topic","title":"HBDateCache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBDateCache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"role":"symbol","title":"URLEncodedFormEncoder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","url":"\/documentation\/hummingbird\/urlencodedformencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseGenerator":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","title":"HBResponseGenerator","url":"\/documentation\/hummingbird\/hbresponsegenerator","abstract":[{"type":"text","text":"Object that can generate a "},{"code":"Response","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseGenerator"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseGenerator"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"title":"HBRouteHandler","navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbroutehandler","kind":"symbol","abstract":[{"type":"text","text":"Object for handling requests."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","title":"RouterPath","url":"\/documentation\/hummingbird\/routerpath","abstract":[{"type":"text","text":"Split router path into components"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"navigatorTitle":[{"text":"RouterPath","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","title":"HummingbirdRouter","url":"\/documentation\/hummingbirdrouter","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMetricsMiddleware":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}],"url":"\/documentation\/hummingbird\/hbmetricsmiddleware","title":"HBMetricsMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMetricsMiddleware"}],"abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","title":"Logging, Metrics and Tracing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"role":"article","title":"Testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"title":"HBCallbackResponder","navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbcallbackresponder","kind":"symbol","abstract":[{"type":"text","text":"Responder that calls supplied closure"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/loggerWithRequestId(_:)":{"url":"\/documentation\/hummingbird\/loggerwithrequestid(_:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/loggerWithRequestId(_:)","abstract":[],"kind":"symbol","title":"loggerWithRequestId(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loggerWithRequestId"},{"kind":"text","text":"("},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"navigatorTitle":[{"kind":"identifier","text":"HBApplication"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"url":"\/documentation\/hummingbird\/hbapplication","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","title":"HBApplication","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplication"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroupProvider":{"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroupProvider"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroupProvider"}],"url":"\/documentation\/hummingbird\/eventloopgroupprovider","abstract":[{"text":"Where should the application get its EventLoopGroup from","type":"text"}],"title":"EventLoopGroupProvider","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBaseRequestContext":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBaseRequestContext"}],"abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"role":"symbol","title":"HBBaseRequestContext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBBaseRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext","url":"\/documentation\/hummingbird\/hbbaserequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBFileMiddleware":{"type":"topic","url":"\/documentation\/hummingbird\/hbfilemiddleware","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFileMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileMiddleware","abstract":[{"type":"text","text":"Middleware for serving static files."}],"navigatorTitle":[{"text":"HBFileMiddleware","kind":"identifier"}],"title":"HBFileMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCORSMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCORSMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"HBCORSMiddleware"}],"abstract":[{"text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers.","type":"text"}],"url":"\/documentation\/hummingbird\/hbcorsmiddleware","kind":"symbol","title":"HBCORSMiddleware","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"url":"\/documentation\/hummingbird\/hbroutergroup","title":"HBRouterGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"text":" ","type":"text"},{"type":"text","text":"suffix to the endpoint path"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBEnvironment":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBEnvironment"}],"navigatorTitle":[{"kind":"identifier","text":"HBEnvironment"}],"title":"HBEnvironment","url":"\/documentation\/hummingbird\/hbenvironment","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEnvironment","kind":"symbol","abstract":[{"text":"Access environment variables","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponder"}],"abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"role":"symbol","title":"HBResponder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","url":"\/documentation\/hummingbird\/hbresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterResponder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBRouterResponder","kind":"identifier"}],"title":"HBRouterResponder","navigatorTitle":[{"text":"HBRouterResponder","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbrouterresponder","kind":"symbol","abstract":[{"type":"text","text":"Directs requests to handlers based on the request uri and method."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBFileIO":{"url":"\/documentation\/hummingbird\/hbfileio","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBFileIO","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBFileIO","kind":"identifier"}],"title":"HBFileIO","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileIO","abstract":[{"type":"text","text":"Manages File reading and writing."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBEditedResponse":{"abstract":[],"role":"symbol","title":"HBEditedResponse","url":"\/documentation\/hummingbird\/hbeditedresponse","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEditedResponse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBEditedResponse","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBEditedResponse","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"url":"\/documentation\/hummingbird\/middlewareprotocol","title":"MiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"text":"Middleware protocol with generic input, context and output types","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HBRouter","kind":"identifier"}],"abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"code":"HBResponder","type":"codeVoice"},{"type":"text","text":" that will follow these rules."}],"role":"symbol","title":"HBRouter","kind":"symbol","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","url":"\/documentation\/hummingbird\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EndpointPath"}],"abstract":[{"type":"text","text":"Endpoint path storage"}],"role":"symbol","title":"EndpointPath","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EndpointPath"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","url":"\/documentation\/hummingbird\/endpointpath"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareProtocol":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareProtocol","title":"HBMiddlewareProtocol","url":"\/documentation\/hummingbird\/hbmiddlewareprotocol","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareProtocol"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMediaType":{"kind":"symbol","url":"\/documentation\/hummingbird\/hbmediatype","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMediaType"}],"abstract":[{"text":"Define media type of file","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBMediaType"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMediaType","title":"HBMediaType"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponderBuilder":{"url":"\/documentation\/hummingbird\/hbresponderbuilder","title":"HBResponderBuilder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","navigatorTitle":[{"kind":"identifier","text":"HBResponderBuilder"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponderBuilder"}],"abstract":[{"type":"text","text":"A type that has a single method to build a responder"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseBodyWriter":{"abstract":[],"role":"symbol","title":"HBResponseBodyWriter","url":"\/documentation\/hummingbird\/hbresponsebodywriter","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyWriter","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBResponseBodyWriter","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBResponseBodyWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"type":"topic","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"role":"collection","title":"HummingbirdXCT","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","url":"\/documentation\/hummingbirdxct"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"role":"symbol","title":"HBRequestDecoder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","url":"\/documentation\/hummingbird\/hbrequestdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbpersistdriver","title":"HBPersistDriver","type":"topic","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplicationProtocol":{"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplicationProtocol"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplicationProtocol"}],"url":"\/documentation\/hummingbird\/hbapplicationprotocol","abstract":[{"type":"text","text":"Application protocol bringing together all the components of Hummingbird"}],"title":"HBApplicationProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationProtocol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","title":"HBMemoryPersistDriver","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"role":"collectionGroup","title":"Error Handling","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","kind":"symbol","type":"topic","title":"HBRouterMethods","navigatorTitle":[{"text":"HBRouterMethods","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethods","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutermethods","role":"symbol","abstract":[{"text":"Conform to ","type":"text"},{"type":"codeVoice","code":"HBRouterMethods"},{"text":" to add standard router verb (get, post …) methods","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"title":"Build a Todos application.","kind":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","role":"overview","url":"\/tutorials\/todos","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"url":"\/documentation\/hummingbird\/jsonencoder","title":"JSONEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","navigatorTitle":[{"kind":"identifier","text":"JSONEncoder"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONEncoder"}],"abstract":[{"code":"JSONEncoder","type":"codeVoice"},{"text":" facilitates the encoding of ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" values into JSON.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"kind":"symbol","url":"\/documentation\/hummingbird\/hbrequestcontext","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestContext"}],"abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","title":"HBRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Middleware":{"type":"topic","url":"\/documentation\/hummingbird\/middleware","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Middleware","abstract":[{"text":"Middleware Handler with generic input, context and output types","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Middleware"}],"title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponse":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponse","navigatorTitle":[{"kind":"identifier","text":"HBResponse"}],"url":"\/documentation\/hummingbird\/hbresponse","title":"HBResponse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponse"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"url":"\/documentation\/hummingbird\/hbroutermethodoptions","title":"HBRouterMethodOptions","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"abstract":[{"text":"Options available to routes","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","title":"URLEncodedFormDecoder","url":"\/documentation\/hummingbird\/urlencodedformdecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"url":"\/documentation\/hummingbirdcore","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore"}}}