{"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"],"title":"Tutorials"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider"],"title":"Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"],"title":"Router"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCacheControl","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEditedResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookie","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookies"],"title":"Request\/Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCoreRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRemoteAddressRequestContext"],"title":"Request context"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseCodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"],"title":"Encoding\/Decoding"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Middleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware"],"title":"Middleware"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"],"title":"Storage"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileIO"],"title":"File management"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GracefulShutdownWaiter"],"title":"Miscellaneous"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/loggerWithRequestId(_:)"],"title":"Functions"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"],"title":"Related Documentation"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hummingbird is a lightweight, modern, flexible server framework designed to require the minimum number of dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, custom encoding\/decoding of requests\/responses, TLS and HTTP2."}]},{"type":"codeListing","syntax":"swift","code":["import Hummingbird","","\/\/ create router and add a single GET \/hello route","let router = HBRouter()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","\/\/ create application using router","let app = HBApplication(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","\/\/ run hummingbird application","try await app.runService()"]}]}],"sections":[],"kind":"symbol","metadata":{"roleHeading":"Framework","symbolKind":"module","externalID":"Hummingbird","modules":[{"name":"Hummingbird"}],"role":"collection","title":"Hummingbird"},"variants":[{"paths":["\/documentation\/hummingbird"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"abstract":[{"text":"Object for handling requests.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbroutehandler","role":"symbol","title":"HBRouteHandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","role":"article","title":"Migrating to Hummingbird v2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"title":"URLEncodedFormEncoder","abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"url":"\/documentation\/hummingbird\/urlencodedformencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"URLEncodedFormEncoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"title":"HBRouterGroup","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"url":"\/documentation\/hummingbird\/hbroutergroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"title":"JSONDecoder","type":"topic","url":"\/documentation\/hummingbird\/jsondecoder","abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" facilitates the decoding of JSON into semantic "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/GracefulShutdownWaiter":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GracefulShutdownWaiter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GracefulShutdownWaiter","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"GracefulShutdownWaiter","kind":"identifier"}],"type":"topic","title":"GracefulShutdownWaiter","abstract":[],"url":"\/documentation\/hummingbird\/gracefulshutdownwaiter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCookies":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCookies","kind":"identifier"}],"navigatorTitle":[{"text":"HBCookies","kind":"identifier"}],"title":"HBCookies","type":"topic","url":"\/documentation\/hummingbird\/hbcookies","abstract":[{"text":"Structure holding an array of cookies","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookies"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBFileIO":{"url":"\/documentation\/hummingbird\/hbfileio","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileIO","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBFileIO"}],"title":"HBFileIO","abstract":[{"text":"Manages File reading and writing.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBFileIO","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMediaType":{"title":"HBMediaType","abstract":[{"text":"Define media type of file","type":"text"}],"url":"\/documentation\/hummingbird\/hbmediatype","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMediaType","kind":"identifier"}],"navigatorTitle":[{"text":"HBMediaType","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMediaType","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"abstract":[{"text":"Middleware protocol with generic input, context and output types","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/middlewareprotocol","role":"symbol","title":"MiddlewareProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MiddlewareProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"MiddlewareProtocol","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","role":"article","title":"Service Lifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMetricsMiddleware":{"abstract":[{"text":"Middleware recording metrics for each request","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbmetricsmiddleware","role":"symbol","title":"HBMetricsMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMetricsMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBFileMiddleware":{"abstract":[{"type":"text","text":"Middleware for serving static files."}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbfilemiddleware","role":"symbol","title":"HBFileMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileMiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFileMiddleware","kind":"identifier"}],"navigatorTitle":[{"text":"HBFileMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","kind":"symbol","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbrequestdecoder","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"title":"HBRequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","title":"HummingbirdRouter","type":"topic","role":"collection","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"url":"\/documentation\/hummingbird\/hbresponseencoder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","role":"symbol","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"title":"HBResponseEncoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBResponseEncoder"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareGroup":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one"}],"title":"HBMiddlewareGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","navigatorTitle":[{"text":"HBMiddlewareGroup","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMiddlewareGroup","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbmiddlewaregroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncodable":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HBResponseEncodable","kind":"identifier"}],"title":"HBResponseEncodable","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncodable","url":"\/documentation\/hummingbird\/hbresponseencodable","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"code":"HBApplication.encoder","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"HBResponseEncodable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"navigatorTitle":[{"text":"HBCallbackResponder","kind":"identifier"}],"abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"title":"HBCallbackResponder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCallbackResponder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/hbcallbackresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","title":"HBRouter","url":"\/documentation\/hummingbird\/hbrouter","navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"url":"\/documentation\/hummingbird\/hbapplication","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"type":"topic","title":"HBApplication","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBEditedResponse":{"url":"\/documentation\/hummingbird\/hbeditedresponse","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEditedResponse","role":"symbol","abstract":[],"title":"HBEditedResponse","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBEditedResponse"}],"navigatorTitle":[{"kind":"identifier","text":"HBEditedResponse"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplicationProtocol":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBApplicationProtocol"}],"title":"HBApplicationProtocol","abstract":[{"type":"text","text":"Application protocol bringing together all the components of Hummingbird"}],"url":"\/documentation\/hummingbird\/hbapplicationprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationProtocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplicationProtocol"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBaseRequestContext":{"title":"HBBaseRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext","role":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. Holds data associated with"},{"type":"text","text":" "},{"type":"text","text":"a request. Provides context for request processing"}],"url":"\/documentation\/hummingbird\/hbbaserequestcontext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBaseRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"HBBaseRequestContext"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBLogRequestsMiddleware":{"title":"HBLogRequestsMiddleware","role":"symbol","url":"\/documentation\/hummingbird\/hblogrequestsmiddleware","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBLogRequestsMiddleware","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBLogRequestsMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","url":"\/documentation\/hummingbirdredis","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"title":"HummingbirdRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"type":"topic","role":"collection","title":"HummingbirdXCT","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"url":"\/documentation\/hummingbirdxct","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"title":"RouterPath","abstract":[{"text":"Split router path into components","type":"text"}],"url":"\/documentation\/hummingbird\/routerpath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"navigatorTitle":[{"text":"RouterPath","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBEnvironment":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBEnvironment","kind":"identifier"}],"abstract":[{"text":"Access environment variables","type":"text"}],"url":"\/documentation\/hummingbird\/hbenvironment","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEnvironment","navigatorTitle":[{"text":"HBEnvironment","kind":"identifier"}],"type":"topic","title":"HBEnvironment","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCookie":{"url":"\/documentation\/hummingbird\/hbcookie","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCookie","role":"symbol","abstract":[{"text":"Structure holding a single cookie","type":"text"}],"title":"HBCookie","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCookie","kind":"identifier"}],"navigatorTitle":[{"text":"HBCookie","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","role":"collection","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"url":"\/documentation\/hummingbirdcore","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseGenerator":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBResponseGenerator","kind":"identifier"}],"title":"HBResponseGenerator","abstract":[{"type":"text","text":"Object that can generate a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbird\/hbresponsegenerator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseGenerator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"title":"HBPersistError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistError"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbpersisterror","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}],"abstract":[{"type":"text","text":"Errors return by persist framework"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCacheControl":{"title":"HBCacheControl","role":"symbol","url":"\/documentation\/hummingbird\/hbcachecontrol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCacheControl"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBCacheControl"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCacheControl","abstract":[{"type":"text","text":"Associates cache control values with filename"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"title":"HBRouterMethodOptions","abstract":[{"text":"Options available to routes","type":"text"}],"url":"\/documentation\/hummingbird\/hbroutermethodoptions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethodOptions","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouterMethodOptions","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBParameters":{"title":"HBParameters","role":"symbol","url":"\/documentation\/hummingbird\/hbparameters","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBParameters"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBParameters"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParameters","abstract":[{"type":"text","text":"HBParameters is a special case of FlatDictionary where both the key"},{"type":"text","text":" "},{"type":"text","text":"and value types are Substrings. It is used for parameters extracted"},{"type":"text","text":" "},{"type":"text","text":"from URIs"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCORSMiddleware":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCORSMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","title":"HBCORSMiddleware","url":"\/documentation\/hummingbird\/hbcorsmiddleware","navigatorTitle":[{"kind":"identifier","text":"HBCORSMiddleware"}],"kind":"symbol","abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"title":"JSONEncoder","abstract":[{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" facilitates the encoding of "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" values into JSON."}],"url":"\/documentation\/hummingbird\/jsonencoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"JSONEncoder","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","role":"collectionGroup","title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBodyWriter":{"abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/hbresponsebodywriter","role":"symbol","title":"HBResponseBodyWriter","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyWriter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBodyWriter","kind":"identifier"}],"navigatorTitle":[{"text":"HBResponseBodyWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"title":"HummingbirdJobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"url":"\/documentation\/hummingbirdjobs","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBDateCache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBDateCache","url":"\/documentation\/hummingbird\/hbdatecache","title":"HBDateCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HBDateCache","kind":"identifier"}],"abstract":[{"type":"text","text":"Current date formatted cache service"}],"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBDateCache"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"title":"HummingbirdMustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","role":"collection","abstract":[{"type":"text","text":"Mustache template engine."}],"url":"\/documentation\/hummingbirdmustache","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplicationConfiguration":{"title":"HBApplicationConfiguration","abstract":[{"text":"Application configuration","type":"text"}],"url":"\/documentation\/hummingbird\/hbapplicationconfiguration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplicationConfiguration","kind":"identifier"}],"navigatorTitle":[{"text":"HBApplicationConfiguration","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationConfiguration","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"title":"HBBasicRequestContext","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"url":"\/documentation\/hummingbird\/hbbasicrequestcontext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"HBBasicRequestContext","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareProtocol":{"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbmiddlewareprotocol","role":"symbol","title":"HBMiddlewareProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareProtocol"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBTracingMiddleware":{"role":"symbol","navigatorTitle":[{"text":"HBTracingMiddleware","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Middleware creating Distributed Tracing spans for each request."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBTracingMiddleware","kind":"identifier"}],"title":"HBTracingMiddleware","url":"\/documentation\/hummingbird\/hbtracingmiddleware","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"type":"topic","title":"HBRequestContext","url":"\/documentation\/hummingbird\/hbrequestcontext","navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Middleware":{"title":"Middleware","role":"symbol","url":"\/documentation\/hummingbird\/middleware","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Middleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Middleware","abstract":[{"type":"text","text":"Middleware Handler with generic input, context and output types"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"title":"HBPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbpersistdriver","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequest":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"title":"HBRequest","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/hbrequest","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroupProvider":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopGroupProvider","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"EventLoopGroupProvider","kind":"identifier"}],"type":"topic","title":"EventLoopGroupProvider","abstract":[{"type":"text","text":"Where should the application get its EventLoopGroup from"}],"url":"\/documentation\/hummingbird\/eventloopgroupprovider"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","role":"collectionGroup","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponderBuilder":{"title":"HBResponderBuilder","abstract":[{"text":"A type that has a single method to build a responder","type":"text"}],"url":"\/documentation\/hummingbird\/hbresponderbuilder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponderBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"HBResponderBuilder","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponderBuilder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRemoteAddressRequestContext":{"abstract":[{"type":"text","text":"Protocol for request context that stores the remote address of connected client."}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbremoteaddressrequestcontext","role":"symbol","title":"HBRemoteAddressRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRemoteAddressRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRemoteAddressRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"HBRemoteAddressRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"type":"topic","title":"URLEncodedFormDecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"url":"\/documentation\/hummingbird\/urlencodedformdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"abstract":[{"text":"Conform to ","type":"text"},{"code":"HBRouterMethods","type":"codeVoice"},{"text":" to add standard router verb (get, post …) methods","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HBRouterMethods","kind":"identifier"}],"type":"topic","title":"HBRouterMethods","url":"\/documentation\/hummingbird\/hbroutermethods","navigatorTitle":[{"text":"HBRouterMethods","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EndpointPath"}],"url":"\/documentation\/hummingbird\/endpointpath","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EndpointPath"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","title":"EndpointPath","abstract":[{"type":"text","text":"Endpoint path storage"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponse":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponse","kind":"identifier"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"url":"\/documentation\/hummingbirdcore\/hbresponse","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponse","navigatorTitle":[{"text":"HBResponse","kind":"identifier"}],"type":"topic","title":"HBResponse","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/loggerWithRequestId(_:)":{"type":"topic","url":"\/documentation\/hummingbird\/loggerwithrequestid(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/loggerWithRequestId(_:)","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"loggerWithRequestId","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":") -> ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"}],"title":"loggerWithRequestId(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCoreRequestContext":{"title":"HBCoreRequestContext","abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"url":"\/documentation\/hummingbird\/hbcorerequestcontext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCoreRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"HBCoreRequestContext","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCoreRequestContext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"title":"HBMemoryPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}],"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"title":"HBResponder","abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"url":"\/documentation\/hummingbird\/hbresponder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponder"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","role":"collection","title":"HummingbirdLambda","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"url":"\/documentation\/hummingbirdlambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"kind":"overview","url":"\/tutorials\/todos","type":"topic","role":"overview","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"title":"Build a Todos application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Integration with Vapor Fluent ORM framework."}],"title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","title":"Testing","url":"\/documentation\/hummingbird\/testing","kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdXCT framework to test your application"}],"type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseCodable":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseCodable","kind":"symbol","abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseCodable","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbresponsecodable","navigatorTitle":[{"text":"HBResponseCodable","kind":"identifier"}],"title":"HBResponseCodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterResponder":{"url":"\/documentation\/hummingbird\/hbrouterresponder","type":"topic","title":"HBRouterResponder","navigatorTitle":[{"kind":"identifier","text":"HBRouterResponder"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterResponder"}],"role":"symbol","abstract":[{"type":"text","text":"Directs requests to handlers based on the request uri and method."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","kind":"symbol"}}}