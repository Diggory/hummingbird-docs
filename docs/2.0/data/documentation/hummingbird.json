{"sections":[],"metadata":{"title":"Hummingbird","modules":[{"name":"Hummingbird"}],"symbolKind":"module","role":"collection","roleHeading":"Framework","externalID":"Hummingbird"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hummingbird is a lightweight, modern, flexible server framework designed to require the minimum number of dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, custom encoding\/decoding of requests\/responses, TLS and HTTP2."}]},{"code":["import Hummingbird","","\/\/ create router and add a single GET \/hello route","let router = Router()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","\/\/ create application using router","let app = Application(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","\/\/ run hummingbird application","try await app.runService()"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/hummingbird"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket"],"title":"Related Documentation"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","interfaceLanguage":"swift"},"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"],"title":"Guides"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"],"title":"Tutorials"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider"],"title":"Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"],"title":"Router"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Parameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CacheControl","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EditedResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookie","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookies"],"title":"Request\/Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RemoteAddressRequestContext"],"title":"Request context"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseCodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"],"title":"Encoding\/Decoding"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware"],"title":"Middleware"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError"],"title":"Storage"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO"],"title":"File management"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Environment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/DateCache"],"title":"Miscellaneous"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddlewareFileAttributes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileProvider"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LocalFileSystem","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestID"],"title":"Structures"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","title":"Encoding and Decoding","kind":"article","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseCodable":{"abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseCodable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseCodable"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseCodable"}],"title":"ResponseCodable","kind":"symbol","url":"\/documentation\/hummingbird\/responsecodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LogRequestsMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogRequestsMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbird\/logrequestsmiddleware","abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"title":"LogRequestsMiddleware","type":"topic","navigatorTitle":[{"text":"LogRequestsMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"type":"topic","url":"\/documentation\/hummingbird\/jobsguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","role":"collectionGroup","title":"Jobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGroup":{"navigatorTitle":[{"text":"RouterGroup","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"text":" ","type":"text"},{"text":"suffix to the endpoint path","type":"text"}],"type":"topic","title":"RouterGroup","kind":"symbol","url":"\/documentation\/hummingbird\/routergroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"navigatorTitle":[{"kind":"identifier","text":"Request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"type":"topic","title":"Request","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"url":"\/documentation\/hummingbirdcore\/response","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Response","kind":"identifier"}],"title":"Response","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","navigatorTitle":[{"text":"Response","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket","kind":"symbol","type":"topic","title":"HummingbirdWebSocket","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol","url":"\/documentation\/hummingbird\/applicationprotocol","abstract":[{"text":"Application protocol bringing together all the components of Hummingbird","type":"text"}],"role":"symbol","title":"ApplicationProtocol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ApplicationProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocol"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterResponder":{"role":"symbol","url":"\/documentation\/hummingbird\/routerresponder","title":"RouterResponder","abstract":[{"text":"Directs requests to handlers based on the request uri and method.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterResponder","kind":"symbol","navigatorTitle":[{"text":"RouterResponder","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroupProvider":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopGroupProvider","kind":"identifier"}],"url":"\/documentation\/hummingbird\/eventloopgroupprovider","abstract":[{"type":"text","text":"Where should the application get its EventLoopGroup from"}],"title":"EventLoopGroupProvider","type":"topic","navigatorTitle":[{"text":"EventLoopGroupProvider","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CallbackResponder":{"role":"symbol","url":"\/documentation\/hummingbird\/callbackresponder","title":"CallbackResponder","abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CallbackResponder","kind":"symbol","navigatorTitle":[{"text":"CallbackResponder","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CallbackResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"navigatorTitle":[{"text":"EndpointPath","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EndpointPath","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","abstract":[{"text":"Endpoint path storage","type":"text"}],"type":"topic","title":"EndpointPath","kind":"symbol","url":"\/documentation\/hummingbird\/endpointpath","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic","title":"Router","kind":"article","url":"\/documentation\/hummingbird\/routerguide","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"url":"\/documentation\/hummingbird\/jsonencoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONEncoder","kind":"identifier"}],"title":"JSONEncoder","navigatorTitle":[{"text":"JSONEncoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","role":"symbol","kind":"symbol","abstract":[{"code":"JSONEncoder","type":"codeVoice"},{"text":" facilitates the encoding of ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" values into JSON.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"type":"topic","title":"HummingbirdFluent","kind":"symbol","url":"\/documentation\/hummingbirdfluent","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGroup":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"MiddlewareGroup","kind":"identifier"}],"url":"\/documentation\/hummingbird\/middlewaregroup","role":"symbol","title":"MiddlewareGroup","kind":"symbol","navigatorTitle":[{"text":"MiddlewareGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","type":"topic","abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MetricsMiddleware":{"abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MetricsMiddleware","kind":"identifier"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"MetricsMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbird\/metricsmiddleware","kind":"symbol","title":"MetricsMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"type":"text","text":"Protocol for a request context that can be created from a NIO Channel"}],"type":"topic","title":"RequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"navigatorTitle":[{"text":"RouterPath","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","abstract":[{"text":"Split router path into components","type":"text"}],"type":"topic","title":"RouterPath","kind":"symbol","url":"\/documentation\/hummingbird\/routerpath","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Cookies":{"url":"\/documentation\/hummingbird\/cookies","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Structure holding an array of cookies","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Cookies"}],"title":"Cookies","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookies","navigatorTitle":[{"kind":"identifier","text":"Cookies"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CacheControl":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CacheControl","abstract":[{"text":"Associates cache control values with filename","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CacheControl","kind":"identifier"}],"role":"symbol","title":"CacheControl","kind":"symbol","url":"\/documentation\/hummingbird\/cachecontrol","navigatorTitle":[{"text":"CacheControl","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"kind":"article","title":"Service Lifecycle","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterOptions":{"navigatorTitle":[{"text":"RouterOptions","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterOptions","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterOptions","abstract":[{"text":"Router Options","type":"text"}],"type":"topic","title":"RouterOptions","kind":"symbol","url":"\/documentation\/hummingbird\/routeroptions","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"url":"\/documentation\/hummingbird\/persistdriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistDriver"}],"title":"PersistDriver","navigatorTitle":[{"kind":"identifier","text":"PersistDriver"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CORSMiddleware":{"navigatorTitle":[{"kind":"identifier","text":"CORSMiddleware"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CORSMiddleware"}],"type":"topic","url":"\/documentation\/hummingbird\/corsmiddleware","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","role":"symbol","title":"CORSMiddleware","abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestID":{"title":"RequestID","type":"topic","url":"\/documentation\/hummingbird\/requestid","role":"symbol","navigatorTitle":[{"text":"RequestID","kind":"identifier"}],"abstract":[{"type":"text","text":"Generate Unique ID for each request"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestID","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestID","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileProvider":{"navigatorTitle":[{"text":"FileProvider","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileProvider","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/fileprovider","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileProvider","role":"symbol","title":"FileProvider","abstract":[{"text":"Protocol for file provider type used by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","type":"reference","isActive":true}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContext":{"navigatorTitle":[{"kind":"identifier","text":"CoreRequestContext"}],"url":"\/documentation\/hummingbird\/corerequestcontext","title":"CoreRequestContext","abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CoreRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContext","role":"symbol","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","title":"Middleware","kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","title":"Hummingbird","kind":"symbol","url":"\/documentation\/hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RemoteAddressRequestContext":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RemoteAddressRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"RemoteAddressRequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol for request context that stores the remote address of connected client.","type":"text"}],"url":"\/documentation\/hummingbird\/remoteaddressrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RemoteAddressRequestContext","role":"symbol","title":"RemoteAddressRequestContext","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileMiddleware":{"navigatorTitle":[{"text":"FileMiddleware","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","abstract":[{"text":"Middleware for serving static files.","type":"text"}],"type":"topic","title":"FileMiddleware","kind":"symbol","url":"\/documentation\/hummingbird\/filemiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","url":"\/documentation\/hummingbirdjobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection","title":"HummingbirdJobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","abstract":[{"type":"text","text":"Mustache template engine."}],"type":"topic","title":"Mustache","kind":"symbol","url":"\/documentation\/mustache","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"title":"URLEncodedFormEncoder","url":"\/documentation\/hummingbird\/urlencodedformencoder","role":"symbol","abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"navigatorTitle":[{"kind":"identifier","text":"Application"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"type":"topic","title":"Application","kind":"symbol","url":"\/documentation\/hummingbird\/application","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ResponseBodyWriter","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ResponseBodyWriter"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","title":"ResponseBodyWriter","url":"\/documentation\/hummingbirdcore\/responsebodywriter","role":"symbol","abstract":[],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","title":"Migrating to Hummingbird v2","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationConfiguration":{"navigatorTitle":[{"kind":"identifier","text":"ApplicationConfiguration"}],"kind":"symbol","title":"ApplicationConfiguration","role":"symbol","url":"\/documentation\/hummingbird\/applicationconfiguration","type":"topic","abstract":[{"text":"Application configuration","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationConfiguration"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationConfiguration"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicRequestContext","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/basicrequestcontext","type":"topic","title":"BasicRequestContext","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"url":"\/documentation\/hummingbirdlambda","title":"HummingbirdLambda","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","role":"collection","kind":"symbol","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"type":"topic","title":"MemoryPersistDriver","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","url":"\/documentation\/hummingbird\/memorypersistdriver","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileMiddlewareFileAttributes":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddlewareFileAttributes","title":"FileMiddlewareFileAttributes","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileMiddlewareFileAttributes"}],"url":"\/documentation\/hummingbird\/filemiddlewarefileattributes","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FileMiddlewareFileAttributes"}],"role":"symbol","abstract":[{"type":"text","text":"Protocol for all the file attributes required by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MediaType":{"role":"symbol","url":"\/documentation\/hummingbird\/mediatype","title":"MediaType","abstract":[{"text":"Define media type of file","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MediaType","kind":"symbol","navigatorTitle":[{"text":"MediaType","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MediaType","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseGenerator":{"role":"symbol","url":"\/documentation\/hummingbird\/responsegenerator","title":"ResponseGenerator","abstract":[{"text":"Object that can generate a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseGenerator","kind":"symbol","navigatorTitle":[{"text":"ResponseGenerator","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseGenerator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TracingMiddleware":{"abstract":[{"text":"Middleware creating Distributed Tracing spans for each request.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TracingMiddleware","kind":"identifier"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"TracingMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbird\/tracingmiddleware","kind":"symbol","title":"TracingMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EditedResponse":{"navigatorTitle":[{"text":"EditedResponse","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EditedResponse","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EditedResponse","abstract":[],"type":"topic","title":"EditedResponse","kind":"symbol","url":"\/documentation\/hummingbird\/editedresponse","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","title":"Testing","kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"navigatorTitle":[{"text":"BaseRequestContext","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"type":"topic","title":"BaseRequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/baserequestcontext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"type":"topic","title":"RequestDecoder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestDecoder"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestDecoder"}],"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","url":"\/documentation\/hummingbird\/requestdecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponderBuilder":{"navigatorTitle":[{"text":"HTTPResponderBuilder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponderBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","abstract":[{"text":"A type that has a single method to build a HTTPResponder","type":"text"}],"type":"topic","title":"HTTPResponderBuilder","kind":"symbol","url":"\/documentation\/hummingbird\/httpresponderbuilder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"navigatorTitle":[{"kind":"identifier","text":"JSONDecoder"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","abstract":[{"code":"JSONDecoder","type":"codeVoice"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" types.","type":"text"}],"type":"topic","title":"JSONDecoder","kind":"symbol","url":"\/documentation\/hummingbird\/jsondecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/DateCache":{"title":"DateCache","type":"topic","url":"\/documentation\/hummingbird\/datecache","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DateCache"}],"abstract":[{"type":"text","text":"Current date formatted cache service"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/DateCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DateCache"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"navigatorTitle":[{"text":"Router","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"type":"topic","title":"Router","kind":"symbol","url":"\/documentation\/hummingbird\/router","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponder":{"navigatorTitle":[{"text":"HTTPResponder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponder","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"type":"topic","title":"HTTPResponder","kind":"symbol","url":"\/documentation\/hummingbird\/httpresponder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMiddleware":{"url":"\/documentation\/hummingbird\/routermiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterMiddleware"}],"title":"RouterMiddleware","navigatorTitle":[{"kind":"identifier","text":"RouterMiddleware"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","role":"symbol","kind":"symbol","abstract":[{"text":"Version of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","type":"reference","isActive":true},{"type":"text","text":" whose Input is "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"text":" and output is ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"reference","isActive":true},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Parameters":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Parameters","abstract":[{"text":"Parameters is a special case of FlatDictionary where both the key","type":"text"},{"text":" ","type":"text"},{"text":"and value types are Substrings. It is used for parameters extracted","type":"text"},{"text":" ","type":"text"},{"text":"from URIs","type":"text"}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parameters","kind":"identifier"}],"role":"symbol","title":"Parameters","kind":"symbol","url":"\/documentation\/hummingbird\/parameters","navigatorTitle":[{"text":"Parameters","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"url":"\/documentation\/hummingbirdrouter","title":"HummingbirdRouter","abstract":[{"text":"Alternative result builder based router for Hummingbird.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","role":"collection","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"navigatorTitle":[{"kind":"identifier","text":"ResponseEncodable"}],"title":"ResponseEncodable","role":"symbol","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"type":"codeVoice","code":"Application.encoder"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/hummingbird\/responseencodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncodable"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","title":"HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","kind":"symbol","abstract":[{"type":"text","text":"Working with Postgres databases."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","abstract":[{"type":"text","text":"Middleware protocol with generic input, context and output types"}],"type":"topic","title":"MiddlewareProtocol","kind":"symbol","url":"\/documentation\/hummingbird\/middlewareprotocol","role":"symbol"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"title":"Build a Todos application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","kind":"overview","url":"\/tutorials\/todos","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"role":"overview","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouteHandler":{"navigatorTitle":[{"text":"RouteHandler","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouteHandler","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteHandler","abstract":[{"text":"Object for handling requests.","type":"text"}],"type":"topic","title":"RouteHandler","kind":"symbol","url":"\/documentation\/hummingbird\/routehandler","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError":{"navigatorTitle":[{"text":"PersistError","kind":"identifier"}],"url":"\/documentation\/hummingbird\/persisterror","title":"PersistError","abstract":[{"type":"text","text":"Errors return by persist framework"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","role":"symbol","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileIO":{"navigatorTitle":[{"text":"FileIO","kind":"identifier"}],"url":"\/documentation\/hummingbird\/fileio","title":"FileIO","abstract":[{"type":"text","text":"Manages File reading and writing."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"FileIO","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO","role":"symbol","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Cookie":{"navigatorTitle":[{"kind":"identifier","text":"Cookie"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Cookie"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookie","abstract":[{"type":"text","text":"Structure holding a single cookie"}],"type":"topic","title":"Cookie","kind":"symbol","url":"\/documentation\/hummingbird\/cookie","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Environment":{"navigatorTitle":[{"text":"Environment","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/environment","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Environment","role":"symbol","title":"Environment","abstract":[{"text":"Access environment variables","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"type":"topic","title":"HummingbirdCore","kind":"symbol","url":"\/documentation\/hummingbirdcore","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LocalFileSystem":{"url":"\/documentation\/hummingbird\/localfilesystem","title":"LocalFileSystem","type":"topic","abstract":[{"text":"Local file system file provider used by FileMiddleware. All file accesses are relative to a root folder","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LocalFileSystem"}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalFileSystem"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LocalFileSystem"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","title":"Logging, Metrics and Tracing","role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"url":"\/documentation\/hummingbird\/responseencoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseEncoder"}],"title":"ResponseEncoder","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"type":"topic","title":"URLEncodedFormDecoder","kind":"symbol","url":"\/documentation\/hummingbird\/urlencodedformdecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"collectionGroup","title":"Error Handling","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMethods":{"navigatorTitle":[{"text":"RouterMethods","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterMethods","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","abstract":[{"text":"Conform to ","type":"text"},{"code":"RouterMethods","type":"codeVoice"},{"text":" to add standard router verb (get, post …) methods","type":"text"}],"type":"topic","title":"RouterMethods","kind":"symbol","url":"\/documentation\/hummingbird\/routermethods","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"type":"topic","title":"HummingbirdTesting","kind":"symbol","url":"\/documentation\/hummingbirdtesting","role":"collection"}}}