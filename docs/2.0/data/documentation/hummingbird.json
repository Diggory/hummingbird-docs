{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird"]}],"hierarchy":{"paths":[[]]},"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Hummingbird is a lightweight, modern, flexible server framework designed to require the minimum number of dependencies.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, custom encoding\/decoding of requests\/responses, TLS and HTTP2."}]},{"type":"codeListing","code":["import Hummingbird","","\/\/ create router and add a single GET \/hello route","let router = Router()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","\/\/ create application using router","let app = Application(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","\/\/ run hummingbird application","try await app.runService()"],"syntax":"swift"}]}],"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide"]},{"title":"Tutorials","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"]},{"title":"Application","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider"]},{"title":"Router","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"]},{"title":"Request\/Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Parameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CacheControl","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseBodyWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EditedResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookie","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookies"]},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RemoteAddressRequestContext"]},{"title":"Encoding\/Decoding","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseCodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"]},{"title":"Middleware","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError"]},{"title":"File management","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO"]},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Environment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/DateCache"]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"]}],"metadata":{"title":"Hummingbird","symbolKind":"module","role":"collection","externalID":"Hummingbird","roleHeading":"Framework","modules":[{"name":"Hummingbird"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LogRequestsMiddleware":{"kind":"symbol","navigatorTitle":[{"text":"LogRequestsMiddleware","kind":"identifier"}],"role":"symbol","title":"LogRequestsMiddleware","abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogRequestsMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","url":"\/documentation\/hummingbird\/logrequestsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"collectionGroup","kind":"article","type":"topic","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"kind":"symbol","title":"HummingbirdRedis","type":"topic","url":"\/documentation\/hummingbirdredis","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"kind":"symbol","title":"HummingbirdLambda","type":"topic","url":"\/documentation\/hummingbirdlambda","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","type":"topic","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/DateCache":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DateCache"}],"type":"topic","abstract":[{"text":"Current date formatted cache service","type":"text"}],"title":"DateCache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/DateCache","navigatorTitle":[{"kind":"identifier","text":"DateCache"}],"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbird\/datecache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicRequestContext"}],"abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}],"title":"BasicRequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/basicrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterResponder":{"url":"\/documentation\/hummingbird\/routerresponder","title":"RouterResponder","type":"topic","navigatorTitle":[{"text":"RouterResponder","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterResponder","abstract":[{"type":"text","text":"Directs requests to handlers based on the request uri and method."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Request":{"kind":"symbol","title":"Request","type":"topic","navigatorTitle":[{"text":"Request","kind":"identifier"}],"url":"\/documentation\/hummingbird\/request","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"kind":"symbol","title":"HummingbirdRouter","type":"topic","url":"\/documentation\/hummingbirdrouter","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Environment":{"navigatorTitle":[{"text":"Environment","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"abstract":[{"text":"Access environment variables","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Environment","title":"Environment","url":"\/documentation\/hummingbird\/environment"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MetricsMiddleware":{"kind":"symbol","navigatorTitle":[{"text":"MetricsMiddleware","kind":"identifier"}],"role":"symbol","title":"MetricsMiddleware","abstract":[{"text":"Middleware recording metrics for each request","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MetricsMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","url":"\/documentation\/hummingbird\/metricsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationConfiguration":{"navigatorTitle":[{"text":"ApplicationConfiguration","kind":"identifier"}],"type":"topic","abstract":[{"text":"Application configuration","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationConfiguration","title":"ApplicationConfiguration","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ApplicationConfiguration","kind":"identifier"}],"url":"\/documentation\/hummingbird\/applicationconfiguration"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","kind":"article","type":"topic","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError":{"kind":"symbol","title":"PersistError","type":"topic","navigatorTitle":[{"text":"PersistError","kind":"identifier"}],"url":"\/documentation\/hummingbird\/persisterror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistError","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError","abstract":[{"text":"Errors return by persist framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CallbackResponder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CallbackResponder"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CallbackResponder","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"url":"\/documentation\/hummingbird\/callbackresponder","role":"symbol","title":"CallbackResponder","navigatorTitle":[{"text":"CallbackResponder","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponderBuilder":{"kind":"symbol","navigatorTitle":[{"text":"HTTPResponderBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponderBuilder","role":"symbol","abstract":[{"text":"A type that has a single method to build a HTTPResponder","type":"text"}],"type":"topic","title":"HTTPResponderBuilder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponderBuilder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/httpresponderbuilder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocol"}],"url":"\/documentation\/hummingbird\/applicationprotocol","abstract":[{"type":"text","text":"Application protocol bringing together all the components of Hummingbird"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ApplicationProtocol","kind":"identifier"}],"title":"ApplicationProtocol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Cookie":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookie","title":"Cookie","role":"symbol","kind":"symbol","url":"\/documentation\/hummingbird\/cookie","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Cookie","kind":"identifier"}],"navigatorTitle":[{"text":"Cookie","kind":"identifier"}],"abstract":[{"type":"text","text":"Structure holding a single cookie"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BaseRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"BaseRequestContext"}],"title":"BaseRequestContext","type":"topic","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BaseRequestContext","url":"\/documentation\/hummingbird\/baserequestcontext","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouteHandler":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouteHandler"}],"role":"symbol","url":"\/documentation\/hummingbird\/routehandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteHandler"}],"type":"topic","title":"RouteHandler","abstract":[{"type":"text","text":"Object for handling requests."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPResponder":{"kind":"symbol","navigatorTitle":[{"text":"HTTPResponder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/httpresponder","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPResponder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponder","kind":"identifier"}],"title":"HTTPResponder","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"url":"\/documentation\/hummingbird\/urlencodedformencoder","abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"title":"URLEncodedFormEncoder","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"type":"topic","url":"\/documentation\/hummingbird\/urlencodedformdecoder","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","role":"symbol","title":"URLEncodedFormDecoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","role":"article","kind":"article","type":"topic","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","role":"symbol","title":"MiddlewareProtocol","url":"\/documentation\/hummingbird\/middlewareprotocol","type":"topic","abstract":[{"type":"text","text":"Middleware protocol with generic input, context and output types"}],"navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"kind":"symbol","title":"RouterPath","type":"topic","navigatorTitle":[{"text":"RouterPath","kind":"identifier"}],"url":"\/documentation\/hummingbird\/routerpath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterPath","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","abstract":[{"text":"Split router path into components","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileIO":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileIO"}],"abstract":[{"type":"text","text":"Manages File reading and writing."}],"kind":"symbol","role":"symbol","title":"FileIO","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileIO","url":"\/documentation\/hummingbird\/fileio","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileIO"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"kind":"symbol","navigatorTitle":[{"text":"EndpointPath","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","role":"symbol","abstract":[{"text":"Endpoint path storage","type":"text"}],"type":"topic","title":"EndpointPath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EndpointPath","kind":"identifier"}],"url":"\/documentation\/hummingbird\/endpointpath"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TracingMiddleware":{"kind":"symbol","navigatorTitle":[{"text":"TracingMiddleware","kind":"identifier"}],"role":"symbol","title":"TracingMiddleware","abstract":[{"text":"Middleware creating Distributed Tracing spans for each request.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TracingMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware","url":"\/documentation\/hummingbird\/tracingmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/responseencoder","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"title":"ResponseEncoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Response":{"type":"topic","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"role":"symbol","url":"\/documentation\/hummingbird\/response","navigatorTitle":[{"text":"Response","kind":"identifier"}],"title":"Response","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Response","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Response","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CORSMiddleware":{"kind":"symbol","navigatorTitle":[{"text":"CORSMiddleware","kind":"identifier"}],"role":"symbol","title":"CORSMiddleware","abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CORSMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","url":"\/documentation\/hummingbird\/corsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseGenerator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseGenerator"}],"role":"symbol","url":"\/documentation\/hummingbird\/responsegenerator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseGenerator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseGenerator"}],"type":"topic","title":"ResponseGenerator","abstract":[{"type":"text","text":"Object that can generate a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RemoteAddressRequestContext":{"url":"\/documentation\/hummingbird\/remoteaddressrequestcontext","abstract":[{"text":"Protocol for request context that stores the remote address of connected client.","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RemoteAddressRequestContext","navigatorTitle":[{"kind":"identifier","text":"RemoteAddressRequestContext"}],"kind":"symbol","title":"RemoteAddressRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemoteAddressRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"JSONDecoder"}],"title":"JSONDecoder","type":"topic","abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"text":" facilitates the decoding of JSON into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","url":"\/documentation\/hummingbird\/jsondecoder","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Parameters":{"url":"\/documentation\/hummingbird\/parameters","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Parameters","role":"symbol","title":"Parameters","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parameters"}],"navigatorTitle":[{"kind":"identifier","text":"Parameters"}],"abstract":[{"type":"text","text":"Parameters is a special case of FlatDictionary where both the key"},{"type":"text","text":" "},{"type":"text","text":"and value types are Substrings. It is used for parameters extracted"},{"type":"text","text":" "},{"type":"text","text":"from URIs"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"navigatorTitle":[{"kind":"identifier","text":"RequestDecoder"}],"kind":"symbol","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","role":"symbol","url":"\/documentation\/hummingbird\/requestdecoder","title":"RequestDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestDecoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Cookies":{"navigatorTitle":[{"text":"Cookies","kind":"identifier"}],"title":"Cookies","abstract":[{"text":"Structure holding an array of cookies","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Cookies","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Cookies","url":"\/documentation\/hummingbird\/cookies","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","title":"Service Lifecycle","role":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseBodyWriter":{"navigatorTitle":[{"text":"ResponseBodyWriter","kind":"identifier"}],"title":"ResponseBodyWriter","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBodyWriter","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseBodyWriter","url":"\/documentation\/hummingbird\/responsebodywriter","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGroup":{"url":"\/documentation\/hummingbird\/routergroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","role":"symbol","title":"RouterGroup","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RouterGroup","kind":"identifier"}],"navigatorTitle":[{"text":"RouterGroup","kind":"identifier"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"text":"suffix to the endpoint path","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMethods":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterMethods"}],"role":"symbol","url":"\/documentation\/hummingbird\/routermethods","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterMethods"}],"type":"topic","title":"RouterMethods","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"RouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CacheControl":{"navigatorTitle":[{"text":"CacheControl","kind":"identifier"}],"title":"CacheControl","abstract":[{"text":"Associates cache control values with filename","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CacheControl","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CacheControl","url":"\/documentation\/hummingbird\/cachecontrol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MediaType":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MediaType","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MediaType"}],"title":"MediaType","type":"topic","abstract":[{"text":"Define media type of file","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MediaType","url":"\/documentation\/hummingbird\/mediatype","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","title":"HummingbirdCore","type":"topic","url":"\/documentation\/hummingbirdcore","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CoreRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"CoreRequestContext"}],"title":"CoreRequestContext","type":"topic","abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContext","url":"\/documentation\/hummingbird\/corerequestcontext","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileMiddleware":{"kind":"symbol","navigatorTitle":[{"text":"FileMiddleware","kind":"identifier"}],"role":"symbol","title":"FileMiddleware","abstract":[{"type":"text","text":"Middleware for serving static files."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","url":"\/documentation\/hummingbird\/filemiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","type":"topic","kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"kind":"symbol","title":"HummingbirdFluent","type":"topic","url":"\/documentation\/hummingbirdfluent","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"url":"\/documentation\/hummingbird\/jobsguide","role":"collectionGroup","title":"Jobs","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","kind":"symbol","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"title":"PersistDriver","url":"\/documentation\/hummingbird\/persistdriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterOptions":{"kind":"symbol","title":"RouterOptions","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterOptions"}],"url":"\/documentation\/hummingbird\/routeroptions","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterOptions"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterOptions","abstract":[{"text":"Router Options","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"url":"\/documentation\/hummingbirdjobs","role":"collection","title":"HummingbirdJobs","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"kind":"article","role":"collectionGroup","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Router"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"kind":"symbol","role":"symbol","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Router"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroupProvider":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider","role":"symbol","title":"EventLoopGroupProvider","url":"\/documentation\/hummingbird\/eventloopgroupprovider","type":"topic","abstract":[{"type":"text","text":"Where should the application get its EventLoopGroup from"}],"navigatorTitle":[{"text":"EventLoopGroupProvider","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopGroupProvider","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","role":"collectionGroup","kind":"article","type":"topic","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"kind":"symbol","title":"HummingbirdTesting","type":"topic","url":"\/documentation\/hummingbirdtesting","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","abstract":[{"type":"text","text":"Test framework for Hummingbird"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"kind":"symbol","navigatorTitle":[{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","role":"symbol","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"type":"topic","title":"Application","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"url":"\/documentation\/hummingbird\/application"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EditedResponse":{"abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EditedResponse","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"EditedResponse","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EditedResponse","title":"EditedResponse","url":"\/documentation\/hummingbird\/editedresponse","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","kind":"article","type":"topic","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseCodable":{"type":"topic","abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseCodable","role":"symbol","kind":"symbol","title":"ResponseCodable","url":"\/documentation\/hummingbird\/responsecodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseCodable"}],"navigatorTitle":[{"kind":"identifier","text":"ResponseCodable"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"url":"\/documentation\/hummingbird\/requestcontext","abstract":[{"type":"text","text":"Protocol for a request context that can be created from a NIO Channel"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"kind":"symbol","title":"RequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","role":"collection","url":"\/documentation\/mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic","title":"Mustache","abstract":[{"type":"text","text":"Mustache template engine."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"type":"topic","url":"\/documentation\/hummingbird\/responseencodable","navigatorTitle":[{"text":"ResponseEncodable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncodable","kind":"identifier"}],"abstract":[{"text":"Protocol for encodable object that can generate a response. The router will encode","type":"text"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"code":"Application.encoder","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","role":"symbol","title":"ResponseEncodable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGroup":{"kind":"symbol","navigatorTitle":[{"text":"MiddlewareGroup","kind":"identifier"}],"role":"symbol","title":"MiddlewareGroup","abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"MiddlewareGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","url":"\/documentation\/hummingbird\/middlewaregroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMiddleware":{"kind":"symbol","navigatorTitle":[{"text":"RouterMiddleware","kind":"identifier"}],"role":"symbol","title":"RouterMiddleware","abstract":[{"type":"text","text":"Version of "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","type":"reference","isActive":true},{"type":"text","text":" whose Input is "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Request","type":"reference","isActive":true},{"type":"text","text":" and output is "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Response","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","url":"\/documentation\/hummingbird\/routermiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","title":"Persistent data","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","title":"Router","type":"topic","url":"\/documentation\/hummingbird\/routerguide","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"kind":"symbol","title":"HummingbirdPostgres","type":"topic","url":"\/documentation\/hummingbirdpostgres","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","abstract":[{"text":"Working with Postgres databases.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection","title":"HummingbirdAuth","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"kind":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","role":"overview","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"type":"topic","title":"Build a Todos application.","url":"\/tutorials\/todos"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","navigatorTitle":[{"kind":"identifier","text":"JSONEncoder"}],"url":"\/documentation\/hummingbird\/jsonencoder","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" facilitates the encoding of "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" values into JSON."}],"title":"JSONEncoder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONEncoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"kind":"symbol","title":"MemoryPersistDriver","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"url":"\/documentation\/hummingbird\/memorypersistdriver","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}]}}}