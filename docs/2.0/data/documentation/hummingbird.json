{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"Hummingbird is a lightweight, modern, flexible server framework designed to require the minimum number of dependencies.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, support for adding channel handlers to extend the HTTP server and providing custom encoding\/decoding of Codable objects."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The interface is fairly standard. Anyone who has had experience of Vapor, Express.js etc will recognise most of the APIs. Simple setup is as follows"}],"type":"paragraph"},{"code":["import Hummingbird","","let router = HBRouter()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","let app = HBApplication(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try await app.runService()"],"syntax":"swift","type":"codeListing"}]}],"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]},{"title":"Application","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider"]},{"title":"Router","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath"]},{"title":"Request\/Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCacheControl","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEditedResponse"]},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCoreRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRemoteAddressRequestContext"]},{"title":"Encoding\/Decoding","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseCodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/NullDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/NullEncoder"]},{"title":"Middleware","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Middleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBSetCodableMiddleware"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"]},{"title":"File management","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileIO"]},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GracefulShutdownWaiter"]},{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder"]},{"title":"Functions","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/loggerWithRequestId(_:)"]}],"hierarchy":{"paths":[[]]},"metadata":{"externalID":"Hummingbird","role":"collection","roleHeading":"Framework","title":"Hummingbird","symbolKind":"module","modules":[{"name":"Hummingbird"}]},"kind":"symbol","seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","interfaceLanguage":"swift"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"navigatorTitle":[{"text":"MiddlewareProtocol","kind":"identifier"}],"title":"MiddlewareProtocol","kind":"symbol","url":"\/documentation\/hummingbird\/middlewareprotocol","type":"topic","abstract":[{"text":"Middleware protocol with generic input, context and output types","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"type":"topic","kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCacheControl":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCacheControl","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCacheControl","kind":"identifier"}],"title":"HBCacheControl","kind":"symbol","navigatorTitle":[{"text":"HBCacheControl","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/hbcachecontrol","role":"symbol","abstract":[{"type":"text","text":"Associates cache control values with filename"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplicationProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationProtocol","abstract":[],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/hummingbird\/hbapplicationprotocol","navigatorTitle":[{"text":"HBApplicationProtocol","kind":"identifier"}],"title":"HBApplicationProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplicationProtocol","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","url":"\/documentation\/hummingbirdfoundation","kind":"symbol","abstract":[{"text":"Hummingbird features that require Foundation.","type":"text"}],"type":"topic","title":"HummingbirdFoundation"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCORSMiddleware":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCORSMiddleware","kind":"identifier"}],"navigatorTitle":[{"text":"HBCORSMiddleware","kind":"identifier"}],"title":"HBCORSMiddleware","kind":"symbol","url":"\/documentation\/hummingbird\/hbcorsmiddleware","type":"topic","abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbroutergroup","abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"type":"topic","navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"role":"symbol","title":"HBRouterGroup","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMediaType":{"url":"\/documentation\/hummingbird\/hbmediatype","type":"topic","abstract":[{"text":"Define media type of file","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMediaType","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMediaType"}],"kind":"symbol","title":"HBMediaType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMediaType"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","kind":"article","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRemoteAddressRequestContext":{"abstract":[{"text":"Protocol for request context that stores the remote address of connected client.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRemoteAddressRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRemoteAddressRequestContext","title":"HBRemoteAddressRequestContext","url":"\/documentation\/hummingbird\/hbremoteaddressrequestcontext","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRemoteAddressRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterResponder":{"abstract":[{"text":"Directs requests to handlers based on the request uri and method.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterResponder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterResponder","title":"HBRouterResponder","url":"\/documentation\/hummingbird\/hbrouterresponder","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterResponder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","role":"collectionGroup","title":"Error Handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBLogRequestsMiddleware":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBLogRequestsMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hblogrequestsmiddleware","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","type":"topic","navigatorTitle":[{"text":"HBLogRequestsMiddleware","kind":"identifier"}],"title":"HBLogRequestsMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"url":"\/documentation\/hummingbirdcore","type":"topic","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","role":"collection","kind":"symbol","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCoreRequestContext":{"abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCoreRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCoreRequestContext","title":"HBCoreRequestContext","url":"\/documentation\/hummingbird\/hbcorerequestcontext","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBCoreRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"title":"Request Context","type":"topic","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","role":"collectionGroup","url":"\/documentation\/hummingbird\/requestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseGenerator":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","kind":"symbol","role":"symbol","title":"HBResponseGenerator","url":"\/documentation\/hummingbird\/hbresponsegenerator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"HBResponseGenerator","kind":"identifier"}],"abstract":[{"type":"text","text":"Object that can generate a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","title":"HummingbirdJobs","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBaseRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBaseRequestContext"}],"url":"\/documentation\/hummingbird\/hbbaserequestcontext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. Holds data associated with"},{"type":"text","text":" "},{"type":"text","text":"a request. Provides context for request processing"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBaseRequestContext","title":"HBBaseRequestContext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBBaseRequestContext"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBDateCache":{"url":"\/documentation\/hummingbird\/hbdatecache","kind":"symbol","abstract":[{"type":"text","text":"Current date formatted cache service"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBDateCache"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBDateCache"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBDateCache","type":"topic","title":"HBDateCache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"url":"\/documentation\/hummingbird\/hbrequestdecoder","abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"role":"symbol","title":"HBRequestDecoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMetricsMiddleware":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMetricsMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbmetricsmiddleware","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","type":"topic","navigatorTitle":[{"text":"HBMetricsMiddleware","kind":"identifier"}],"title":"HBMetricsMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"kind":"symbol","title":"HBPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"url":"\/documentation\/hummingbird\/hbpersistdriver","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroupProvider":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroupProvider","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopGroupProvider","kind":"identifier"}],"title":"EventLoopGroupProvider","kind":"symbol","navigatorTitle":[{"text":"EventLoopGroupProvider","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/eventloopgroupprovider","role":"symbol","abstract":[{"type":"text","text":"Where should the application get its EventLoopGroup from"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/GracefulShutdownWaiter":{"abstract":[],"url":"\/documentation\/hummingbird\/gracefulshutdownwaiter","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/GracefulShutdownWaiter","role":"symbol","title":"GracefulShutdownWaiter","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"GracefulShutdownWaiter","kind":"identifier"}],"navigatorTitle":[{"text":"GracefulShutdownWaiter","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"url":"\/documentation\/hummingbird\/hbresponder","type":"topic","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"kind":"symbol","title":"HBResponder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"url":"\/documentation\/hummingbirdmustache","type":"topic","abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","role":"collection","kind":"symbol","title":"HummingbirdMustache"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBEditedResponse":{"abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBEditedResponse"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEditedResponse","title":"HBEditedResponse","url":"\/documentation\/hummingbird\/hbeditedresponse","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBEditedResponse"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseCodable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseCodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseCodable"}],"url":"\/documentation\/hummingbird\/hbresponsecodable","abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponseCodable"}],"role":"symbol","title":"HBResponseCodable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/loggerWithRequestId(_:)":{"abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loggerWithRequestId"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/loggerWithRequestId(_:)","title":"loggerWithRequestId(_:)","url":"\/documentation\/hummingbird\/loggerwithrequestid(_:)","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncodable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncodable"}],"url":"\/documentation\/hummingbird\/hbresponseencodable","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"code":"HBApplication.encoder","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncodable"}],"role":"symbol","title":"HBResponseEncodable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","kind":"symbol","role":"symbol","title":"HBRouterMethods","url":"\/documentation\/hummingbird\/hbroutermethods","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethods","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouterMethods","kind":"identifier"}],"abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"url":"\/documentation\/hummingbirdredis","type":"topic","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","role":"collection","kind":"symbol","title":"HummingbirdRedis"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplication":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplication","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbapplication","abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}],"type":"topic","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"role":"symbol","title":"HBApplication","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Middleware":{"abstract":[{"text":"Middleware Handler with generic input, context and output types","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Middleware","title":"Middleware","url":"\/documentation\/hummingbird\/middleware","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Middleware"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBParameters":{"abstract":[{"text":"HBParameters is a special case of FlatDictionary where both the key","type":"text"},{"text":" ","type":"text"},{"text":"and value types are Substrings. It is used for parameters extracted","type":"text"},{"text":" ","type":"text"},{"text":"from URIs","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBParameters"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParameters","title":"HBParameters","url":"\/documentation\/hummingbird\/hbparameters","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBParameters"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseBodyWriter":{"url":"\/documentation\/hummingbird\/hbresponsebodywriter","type":"topic","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyWriter","role":"symbol","navigatorTitle":[{"text":"HBResponseBodyWriter","kind":"identifier"}],"kind":"symbol","title":"HBResponseBodyWriter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBodyWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBEnvironment":{"kind":"symbol","url":"\/documentation\/hummingbird\/hbenvironment","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBEnvironment"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBEnvironment"}],"title":"HBEnvironment","abstract":[{"type":"text","text":"Access environment variables"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBEnvironment"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouter","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouter","kind":"identifier"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"title":"HBRouter","url":"\/documentation\/hummingbird\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}],"url":"\/documentation\/hummingbird\/hbresponseencoder","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"role":"symbol","title":"HBResponseEncoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"abstract":[{"text":"Errors return by persist framework","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbpersisterror","title":"HBPersistError"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBSetCodableMiddleware":{"role":"symbol","abstract":[],"url":"\/documentation\/hummingbird\/hbsetcodablemiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBSetCodableMiddleware","navigatorTitle":[{"text":"HBSetCodableMiddleware","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBSetCodableMiddleware","kind":"identifier"}],"title":"HBSetCodableMiddleware","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterPath":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterPath"}],"url":"\/documentation\/hummingbird\/routerpath","abstract":[{"type":"text","text":"Split router path into components"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterPath","title":"RouterPath","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterPath"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBTracingMiddleware":{"title":"HBTracingMiddleware","type":"topic","abstract":[{"text":"Middleware creating Distributed Tracing spans for each request.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBTracingMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","navigatorTitle":[{"text":"HBTracingMiddleware","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbtracingmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestContext":{"title":"HBRequestContext","url":"\/documentation\/hummingbird\/hbrequestcontext","abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}],"navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestContext","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","kind":"symbol","role":"symbol","title":"HBRouterMethodOptions","url":"\/documentation\/hummingbird\/hbroutermethodoptions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethodOptions","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouterMethodOptions","kind":"identifier"}],"abstract":[{"type":"text","text":"Options available to routes"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"type":"topic","title":"HBMemoryPersistDriver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"role":"collection","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"url":"\/documentation\/hummingbirdxct","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","title":"HummingbirdXCT","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EndpointPath":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EndpointPath"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/endpointpath","navigatorTitle":[{"text":"EndpointPath","kind":"identifier"}],"abstract":[{"text":"Endpoint path storage","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EndpointPath","title":"EndpointPath"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBFileIO":{"kind":"symbol","url":"\/documentation\/hummingbird\/hbfileio","role":"symbol","navigatorTitle":[{"text":"HBFileIO","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBFileIO","kind":"identifier"}],"title":"HBFileIO","abstract":[{"type":"text","text":"Manages File reading and writing."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBFileIO"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBApplicationConfiguration":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBApplicationConfiguration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplicationConfiguration","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbapplicationconfiguration","abstract":[{"text":"Application configuration","type":"text"}],"type":"topic","navigatorTitle":[{"text":"HBApplicationConfiguration","kind":"identifier"}],"role":"symbol","title":"HBApplicationConfiguration","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","type":"topic","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBasicRequestContext","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"HBBasicRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"HBBasicRequestContext","url":"\/documentation\/hummingbird\/hbbasicrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCallbackResponder","kind":"identifier"}],"navigatorTitle":[{"text":"HBCallbackResponder","kind":"identifier"}],"title":"HBCallbackResponder","kind":"symbol","url":"\/documentation\/hummingbird\/hbcallbackresponder","type":"topic","abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponse":{"url":"\/documentation\/hummingbird\/hbresponse","type":"topic","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponse","role":"symbol","navigatorTitle":[{"text":"HBResponse","kind":"identifier"}],"kind":"symbol","title":"HBResponse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponse","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest":{"url":"\/documentation\/hummingbird\/hbrequest","type":"topic","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","role":"symbol","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"kind":"symbol","title":"HBRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/NullDecoder":{"type":"topic","abstract":[{"text":"Default decoder. there is no default decoder path so this generates an error","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NullDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/NullDecoder","role":"symbol","url":"\/documentation\/hummingbird\/nulldecoder","kind":"symbol","title":"NullDecoder","navigatorTitle":[{"kind":"identifier","text":"NullDecoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection","kind":"symbol","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareProtocol":{"url":"\/documentation\/hummingbird\/hbmiddlewareprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareProtocol","title":"HBMiddlewareProtocol","type":"topic","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMiddlewareProtocol"}],"navigatorTitle":[{"text":"HBMiddlewareProtocol","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","type":"topic","kind":"symbol","abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}],"url":"\/documentation\/hummingbird\/hbmiddlewaregroup","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareGroup"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareGroup"}],"title":"HBMiddlewareGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/NullEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/NullEncoder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NullEncoder"}],"url":"\/documentation\/hummingbird\/nullencoder","abstract":[{"type":"text","text":"Default encoder. Outputs request with the swift string description of object"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"NullEncoder"}],"role":"symbol","title":"NullEncoder","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","kind":"symbol","role":"symbol","title":"HBRouteHandler","url":"\/documentation\/hummingbird\/hbroutehandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"Object for handling requests."}]}}}