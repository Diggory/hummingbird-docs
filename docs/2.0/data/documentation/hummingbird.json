{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"sections":[],"metadata":{"externalID":"Hummingbird","role":"collection","modules":[{"name":"Hummingbird"}],"roleHeading":"Framework","title":"Hummingbird","symbolKind":"module"},"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Hummingbird is a lightweight, modern, flexible server framework designed to require the minimum number of dependencies.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, support for adding channel handlers to extend the HTTP server and providing custom encoding\/decoding of Codable objects."}]},{"type":"paragraph","inlineContent":[{"text":"The interface is fairly standard. Anyone who has had experience of Vapor, Express.js etc will recognise most of the APIs. Simple setup is as follows","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Hummingbird","","let router = HBRouter()","router.get(\"hello\") { request, _ -> String in","    return \"Hello\"","}","let app = HBApplication(","    responder: router.buildResponder(),","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try await app.runService()"]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"],"title":"Related Documentation"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird"]}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"hierarchy":{"paths":[[]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"],"title":"Guides"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"],"title":"Tutorials"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplicationProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplicationConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/EventLoopGroupProvider"],"title":"Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponderBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/EndpointPath","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/RouterPath"],"title":"Router"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCacheControl","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEditedResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCookie","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCookies"],"title":"Request\/Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBaseRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCoreRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRemoteAddressRequestContext"],"title":"Request context"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/URLEncodedFormDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/URLEncodedFormEncoder"],"title":"Encoding\/Decoding"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/Middleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBFileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBTracingMiddleware"],"title":"Middleware"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError"],"title":"Storage"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBFileIO"],"title":"File management"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/GracefulShutdownWaiter"],"title":"Miscellaneous"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/EventLoopGroupProvider":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/EventLoopGroupProvider","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroupProvider"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopGroupProvider"}],"abstract":[{"type":"text","text":"Where should the application get its EventLoopGroup from"}],"role":"symbol","title":"EventLoopGroupProvider","url":"\/documentation\/hummingbirdlambda\/eventloopgroupprovider"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBTracingMiddleware":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBTracingMiddleware","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbtracingmiddleware","abstract":[{"type":"text","text":"Middleware creating Distributed Tracing spans for each request."}],"navigatorTitle":[{"kind":"identifier","text":"HBTracingMiddleware"}],"title":"HBTracingMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBTracingMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"url":"\/documentation\/hummingbirdcore","role":"collection","kind":"symbol","type":"topic","title":"HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCookies":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBCookies","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCookies","title":"HBCookies","navigatorTitle":[{"text":"HBCookies","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbcookies","kind":"symbol","abstract":[{"type":"text","text":"Structure holding an array of cookies"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","role":"collection","url":"\/documentation\/hummingbirdjobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"title":"HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/EndpointPath":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/EndpointPath","type":"topic","url":"\/documentation\/hummingbirdlambda\/endpointpath","navigatorTitle":[{"kind":"identifier","text":"EndpointPath"}],"kind":"symbol","title":"EndpointPath","abstract":[{"type":"text","text":"Endpoint path storage"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EndpointPath"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/URLEncodedFormDecoder":{"kind":"symbol","role":"symbol","title":"URLEncodedFormDecoder","abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/URLEncodedFormDecoder","type":"topic","url":"\/documentation\/hummingbirdlambda\/urlencodedformdecoder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistError":{"role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbpersisterror","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"title":"HBPersistError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError","abstract":[{"text":"Errors return by persist framework","type":"text"}],"type":"topic","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/RouterPath":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterPath"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/RouterPath","title":"RouterPath","navigatorTitle":[{"kind":"identifier","text":"RouterPath"}],"url":"\/documentation\/hummingbirdlambda\/routerpath","kind":"symbol","abstract":[{"text":"Split router path into components","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/Middleware":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/Middleware","role":"symbol","url":"\/documentation\/hummingbirdlambda\/middleware","abstract":[{"type":"text","text":"Middleware Handler with generic input, context and output types"}],"navigatorTitle":[{"kind":"identifier","text":"Middleware"}],"title":"Middleware","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterResponder":{"kind":"symbol","navigatorTitle":[{"text":"HBRouterResponder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterResponder","title":"HBRouterResponder","url":"\/documentation\/hummingbirdlambda\/hbrouterresponder","type":"topic","abstract":[{"type":"text","text":"Directs requests to handlers based on the request uri and method."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterResponder","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONDecoder":{"kind":"symbol","navigatorTitle":[{"text":"JSONDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONDecoder","title":"JSONDecoder","url":"\/documentation\/hummingbird\/jsondecoder","type":"topic","abstract":[{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" facilitates the decoding of JSON into semantic "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONDecoder","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"kind":"article","role":"collectionGroup","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"title":"Logging, Metrics and Tracing","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBEditedResponse":{"title":"HBEditedResponse","navigatorTitle":[{"kind":"identifier","text":"HBEditedResponse"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEditedResponse","role":"symbol","kind":"symbol","abstract":[],"url":"\/documentation\/hummingbirdlambda\/hbeditedresponse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBEditedResponse"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplication":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBApplication","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","title":"HBApplication","navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbapplication","kind":"symbol","abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"text":"Using the HummingbirdXCT framework to test your application","type":"text"}],"url":"\/documentation\/hummingbird\/testing","role":"article","title":"Testing","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddlewareProtocol":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareProtocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareProtocol"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"role":"symbol","title":"HBMiddlewareProtocol","url":"\/documentation\/hummingbirdlambda\/hbmiddlewareprotocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter":{"type":"topic","abstract":[{"type":"text","text":"Alternative result builder based router for Hummingbird."}],"title":"HummingbirdRouter","url":"\/documentation\/hummingbirdrouter","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","url":"\/documentation\/hummingbirdlambda","kind":"symbol","abstract":[{"text":"Run Hummingbird inside an AWS Lambda","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCORSMiddleware":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCORSMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"HBCORSMiddleware"}],"abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"role":"symbol","title":"HBCORSMiddleware","url":"\/documentation\/hummingbirdlambda\/hbcorsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCallbackResponder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbcallbackresponder","navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"kind":"symbol","title":"HBCallbackResponder","abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseGenerator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponseGenerator"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","title":"HBResponseGenerator","url":"\/documentation\/hummingbirdlambda\/hbresponsegenerator","type":"topic","abstract":[{"type":"text","text":"Object that can generate a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseGenerator"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplicationProtocol":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplicationProtocol"}],"abstract":[{"type":"text","text":"Application protocol bringing together all the components of Hummingbird"}],"title":"HBApplicationProtocol","navigatorTitle":[{"kind":"identifier","text":"HBApplicationProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplicationProtocol","url":"\/documentation\/hummingbirdlambda\/hbapplicationprotocol","kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"role":"collectionGroup","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethodOptions":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","title":"HBRouterMethodOptions","url":"\/documentation\/hummingbirdlambda\/hbroutermethodoptions","type":"topic","abstract":[{"type":"text","text":"Options available to routes"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseCodable":{"title":"HBResponseCodable","url":"\/documentation\/hummingbirdlambda\/hbresponsecodable","navigatorTitle":[{"text":"HBResponseCodable","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable","type":"topic","abstract":[{"text":"Protocol for codable object that can generate a response","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseCodable","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplicationConfiguration":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBApplicationConfiguration"}],"abstract":[{"type":"text","text":"Application configuration"}],"title":"HBApplicationConfiguration","navigatorTitle":[{"kind":"identifier","text":"HBApplicationConfiguration"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplicationConfiguration","url":"\/documentation\/hummingbirdlambda\/hbapplicationconfiguration","kind":"symbol","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JSONEncoder":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSONEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JSONEncoder","title":"JSONEncoder","url":"\/documentation\/hummingbird\/jsonencoder","type":"topic","abstract":[{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" facilitates the encoding of "},{"type":"codeVoice","code":"Encodable"},{"text":" values into JSON.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONEncoder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMetricsMiddleware":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMetricsMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}],"abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"role":"symbol","title":"HBMetricsMiddleware","url":"\/documentation\/hummingbirdlambda\/hbmetricsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"collectionGroup","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","title":"Migrating to Hummingbird v2","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBDateCache":{"title":"HBDateCache","abstract":[{"text":"Current date formatted cache service","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBDateCache"}],"url":"\/documentation\/hummingbirdlambda\/hbdatecache","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBDateCache"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/MiddlewareProtocol":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/MiddlewareProtocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"abstract":[{"type":"text","text":"Middleware protocol with generic input, context and output types"}],"role":"symbol","title":"MiddlewareProtocol","url":"\/documentation\/hummingbirdlambda\/middlewareprotocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","role":"collection","url":"\/documentation\/hummingbirdauth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncoder":{"kind":"symbol","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","title":"HBResponseEncoder","url":"\/documentation\/hummingbirdlambda\/hbresponseencoder","type":"topic","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMediaType":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HBMediaType","kind":"identifier"}],"navigatorTitle":[{"text":"HBMediaType","kind":"identifier"}],"abstract":[{"text":"Define media type of file","type":"text"}],"role":"symbol","title":"HBMediaType","url":"\/documentation\/hummingbirdlambda\/hbmediatype"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBFileIO":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBFileIO"}],"title":"HBFileIO","url":"\/documentation\/hummingbirdlambda\/hbfileio","abstract":[{"text":"Manages File reading and writing.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBFileIO"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBFileIO","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequest":{"title":"HBRequest","navigatorTitle":[{"kind":"identifier","text":"HBRequest"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequest","url":"\/documentation\/hummingbirdcore\/hbrequest","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequest"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecoder":{"title":"HBRequestDecoder","url":"\/documentation\/hummingbirdlambda\/hbrequestdecoder","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","type":"topic","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBBaseRequestContext":{"title":"HBBaseRequestContext","navigatorTitle":[{"kind":"identifier","text":"HBBaseRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBaseRequestContext","url":"\/documentation\/hummingbirdlambda\/hbbaserequestcontext","abstract":[{"text":"Protocol that all request contexts should conform to. Holds data associated with","type":"text"},{"text":" ","type":"text"},{"text":"a request. Provides context for request processing","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBBaseRequestContext"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/GracefulShutdownWaiter":{"navigatorTitle":[{"text":"GracefulShutdownWaiter","kind":"identifier"}],"abstract":[],"title":"GracefulShutdownWaiter","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/gracefulshutdownwaiter","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GracefulShutdownWaiter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/GracefulShutdownWaiter","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddlewareGroup":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareGroup"}],"navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareGroup"}],"abstract":[{"type":"text","text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one"}],"role":"symbol","title":"HBMiddlewareGroup","url":"\/documentation\/hummingbirdlambda\/hbmiddlewaregroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouter":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouter","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouter"}],"abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}],"role":"symbol","title":"HBRouter","url":"\/documentation\/hummingbirdlambda\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMemoryPersistDriver":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMemoryPersistDriver","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryPersistDriver","kind":"identifier"}],"navigatorTitle":[{"text":"HBMemoryPersistDriver","kind":"identifier"}],"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"role":"symbol","title":"HBMemoryPersistDriver","url":"\/documentation\/hummingbirdlambda\/hbmemorypersistdriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterGroup":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","title":"HBRouterGroup","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"url":"\/documentation\/hummingbirdlambda\/hbroutergroup","kind":"symbol","abstract":[{"text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a","type":"text"},{"text":" ","type":"text"},{"text":"suffix to the endpoint path","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRemoteAddressRequestContext":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRemoteAddressRequestContext"}],"title":"HBRemoteAddressRequestContext","url":"\/documentation\/hummingbirdlambda\/hbremoteaddressrequestcontext","abstract":[{"text":"Protocol for request context that stores the remote address of connected client.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRemoteAddressRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRemoteAddressRequestContext","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouteHandler":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbroutehandler","navigatorTitle":[{"text":"HBRouteHandler","kind":"identifier"}],"kind":"symbol","title":"HBRouteHandler","abstract":[{"type":"text","text":"Object for handling requests."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouteHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbresponder","navigatorTitle":[{"text":"HBResponder","kind":"identifier"}],"kind":"symbol","title":"HBResponder","abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBFileMiddleware":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBFileMiddleware","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBFileMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"HBFileMiddleware"}],"abstract":[{"type":"text","text":"Middleware for serving static files."}],"role":"symbol","title":"HBFileMiddleware","url":"\/documentation\/hummingbirdlambda\/hbfilemiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBEnvironment":{"abstract":[{"text":"Access environment variables","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdlambda\/hbenvironment","role":"symbol","title":"HBEnvironment","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBEnvironment","kind":"identifier"}],"navigatorTitle":[{"text":"HBEnvironment","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponderBuilder":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponderBuilder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponderBuilder","title":"HBResponderBuilder","url":"\/documentation\/hummingbirdlambda\/hbresponderbuilder","type":"topic","abstract":[{"type":"text","text":"A type that has a single method to build a responder"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponderBuilder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCoreRequestContext":{"abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBCoreRequestContext"}],"url":"\/documentation\/hummingbirdlambda\/hbcorerequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCoreRequestContext","title":"HBCoreRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCoreRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponse":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponse","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponse"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponse"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"role":"symbol","title":"HBResponse","url":"\/documentation\/hummingbirdcore\/hbresponse"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/URLEncodedFormEncoder":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/URLEncodedFormEncoder","title":"URLEncodedFormEncoder","url":"\/documentation\/hummingbirdlambda\/urlencodedformencoder","type":"topic","abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdMustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdMustache","type":"topic","url":"\/documentation\/hummingbirdmustache","kind":"symbol","title":"HummingbirdMustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"url":"\/documentation\/hummingbird\/servicelifecycle","role":"article","title":"Service Lifecycle","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCookie":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCookie","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCookie"}],"navigatorTitle":[{"kind":"identifier","text":"HBCookie"}],"abstract":[{"type":"text","text":"Structure holding a single cookie"}],"role":"symbol","title":"HBCookie","url":"\/documentation\/hummingbirdlambda\/hbcookie"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCacheControl":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCacheControl","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbcachecontrol","navigatorTitle":[{"kind":"identifier","text":"HBCacheControl"}],"kind":"symbol","title":"HBCacheControl","abstract":[{"text":"Associates cache control values with filename","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCacheControl"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","type":"topic","url":"\/documentation\/hummingbirdxct","kind":"symbol","title":"HummingbirdXCT","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBResponseBodyWriter":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBResponseBodyWriter","url":"\/documentation\/hummingbirdcore\/hbresponsebodywriter","type":"topic","title":"HBResponseBodyWriter","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseBodyWriter"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseBodyWriter"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestContext":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","abstract":[{"text":"Protocol for a request context that can be created from a NIO Channel","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbrequestcontext","role":"symbol","title":"HBRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"role":"collection","title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBBasicRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBasicRequestContext","kind":"identifier"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HBBasicRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbbasicrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBBasicRequestContext","abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"HBBasicRequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"collectionGroup","title":"Router","url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","url":"\/documentation\/hummingbird\/encodinganddecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"role":"collectionGroup","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLogRequestsMiddleware":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"role":"symbol","title":"HBLogRequestsMiddleware","url":"\/documentation\/hummingbirdlambda\/hblogrequestsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncodable":{"title":"HBResponseEncodable","url":"\/documentation\/hummingbirdlambda\/hbresponseencodable","navigatorTitle":[{"text":"HBResponseEncodable","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","type":"topic","abstract":[{"text":"Protocol for encodable object that can generate a response. The router will encode","type":"text"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"type":"codeVoice","code":"HBApplication.encoder"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncodable","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","role":"overview","url":"\/tutorials\/todos","title":"Build a Todos application.","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"type":"topic","kind":"overview"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethods":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","title":"HBRouterMethods","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbirdlambda\/hbroutermethods","kind":"symbol","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"collectionGroup","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","title":"Error Handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParameters":{"url":"\/documentation\/hummingbirdlambda\/hbparameters","abstract":[{"type":"text","text":"HBParameters is a special case of FlatDictionary where both the key"},{"type":"text","text":" "},{"type":"text","text":"and value types are Substrings. It is used for parameters extracted"},{"type":"text","text":" "},{"type":"text","text":"from URIs"}],"title":"HBParameters","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParameters","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBParameters","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriver":{"title":"HBPersistDriver","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdlambda\/hbpersistdriver","role":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}]}}}