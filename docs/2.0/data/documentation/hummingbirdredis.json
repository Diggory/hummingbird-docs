{"hierarchy":{"paths":[[]]},"metadata":{"role":"collection","roleHeading":"Framework","title":"HummingbirdRedis","symbolKind":"module","modules":[{"name":"HummingbirdRedis"}],"externalID":"HummingbirdRedis"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConfiguration"],"title":"Connection Pool"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver"],"title":"Storage"}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds Redis support to Hummingbird via "},{"type":"reference","identifier":"https:\/\/github.com\/swift-server\/RediStack","isActive":true},{"text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let redis = try HBRedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = HBRouter()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = HBApplication(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"]},{"text":"Storage","anchor":"Storage","type":"heading","level":2},{"inlineContent":[{"text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let redis = try HBRedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)","let router = HBRouter()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = HBApplication(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],"title":"Related Documentation"}],"abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},"variants":[{"paths":["\/documentation\/hummingbirdredis"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","type":"topic","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisConfiguration":{"title":"HBRedisConfiguration","url":"\/documentation\/hummingbirdredis\/hbredisconfiguration","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisConfiguration","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConfiguration","type":"topic","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"HBRedisConfiguration","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisConnectionPoolService":{"title":"HBRedisConnectionPoolService","navigatorTitle":[{"text":"HBRedisConnectionPoolService","kind":"identifier"}],"role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRedisConnectionPoolService","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/hbredisconnectionpoolservice","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConnectionPoolService"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"title":"HummingbirdJobsRedis","role":"collection","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"url":"\/documentation\/hummingbirdjobsredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"role":"symbol","navigatorTitle":[{"text":"HBRedisPersistDriver","kind":"identifier"}],"kind":"symbol","title":"HBRedisPersistDriver","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBRedisPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"https://github.com/swift-server/RediStack":{"title":"RediStack","url":"https:\/\/github.com\/swift-server\/RediStack","titleInlineContent":[{"type":"text","text":"RediStack"}],"identifier":"https:\/\/github.com\/swift-server\/RediStack","type":"link"}}}