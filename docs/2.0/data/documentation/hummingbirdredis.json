{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdredis"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"Adds Redis support to Hummingbird via ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/RediStack","type":"reference","isActive":true},{"text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = Router()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = Application(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"]},{"level":2,"anchor":"Storage","type":"heading","text":"Storage"},{"inlineContent":[{"text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)","let router = Router()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = Application(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"kind":"symbol","sections":[],"hierarchy":{"paths":[[]]},"metadata":{"title":"HummingbirdRedis","role":"collection","symbolKind":"module","externalID":"HummingbirdRedis","modules":[{"name":"HummingbirdRedis"}],"roleHeading":"Framework"},"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]},{"title":"Connection Pool","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"title":"RedisPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","url":"\/documentation\/hummingbirdredis\/redispersistdriver","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}],"navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol"},"https://github.com/swift-server/RediStack":{"title":"RediStack","url":"https:\/\/github.com\/swift-server\/RediStack","titleInlineContent":[{"text":"RediStack","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/swift-server\/RediStack"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConfiguration":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration","title":"RedisConfiguration","type":"topic","navigatorTitle":[{"text":"RedisConfiguration","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConfiguration","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdredis\/redisconfiguration","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","kind":"symbol","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisConnectionPoolService"}],"url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","title":"RedisConnectionPoolService","navigatorTitle":[{"kind":"identifier","text":"RedisConnectionPoolService"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","kind":"symbol","abstract":[{"text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"title":"HummingbirdRedis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","url":"\/documentation\/hummingbirdredis","kind":"symbol","type":"topic","role":"collection"}}}