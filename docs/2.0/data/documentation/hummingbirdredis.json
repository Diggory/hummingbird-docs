{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdredis"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Adds Redis support to Hummingbird via "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swift-server\/RediStack"},{"type":"text","text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework."}],"type":"paragraph"},{"code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = Router()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = Application(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Storage","type":"heading","text":"Storage"},{"inlineContent":[{"type":"text","text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests."}],"type":"paragraph"},{"code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)","let router = Router()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = Application(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","metadata":{"roleHeading":"Framework","title":"HummingbirdRedis","symbolKind":"module","role":"collection","externalID":"HummingbirdRedis","modules":[{"name":"HummingbirdRedis"}]},"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]},{"title":"Connection Pool","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"references":{"https://github.com/swift-server/RediStack":{"url":"https:\/\/github.com\/swift-server\/RediStack","identifier":"https:\/\/github.com\/swift-server\/RediStack","type":"link","title":"RediStack","titleInlineContent":[{"text":"RediStack","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/redispersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","kind":"symbol","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}],"title":"RedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConfiguration":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConfiguration","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdredis\/redisconfiguration","abstract":[],"navigatorTitle":[{"text":"RedisConfiguration","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration","title":"RedisConfiguration","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"kind":"symbol","url":"\/documentation\/hummingbirdredis","title":"HummingbirdRedis","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}],"navigatorTitle":[{"kind":"identifier","text":"RedisConnectionPoolService"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisConnectionPoolService"}],"url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","title":"RedisConnectionPoolService","role":"symbol"}}}