{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdredis"]}],"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds Redis support to Hummingbird via "},{"identifier":"https:\/\/github.com\/swift-server\/RediStack","isActive":true,"type":"reference"},{"type":"text","text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework."}]},{"code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = Router()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = Application(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"],"type":"codeListing","syntax":"swift"},{"text":"Storage","level":2,"anchor":"Storage","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests."}]},{"code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)","let router = Router()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = Application(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"kind":"symbol","metadata":{"title":"HummingbirdRedis","role":"collection","externalID":"HummingbirdRedis","symbolKind":"module","modules":[{"name":"HummingbirdRedis"}],"roleHeading":"Framework"},"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]},{"title":"Connection Pool","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConfiguration":{"type":"topic","navigatorTitle":[{"text":"RedisConfiguration","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConfiguration","kind":"identifier"}],"kind":"symbol","title":"RedisConfiguration","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration","role":"symbol","url":"\/documentation\/hummingbirdredis\/redisconfiguration"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","role":"collection","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"https://github.com/swift-server/RediStack":{"type":"link","identifier":"https:\/\/github.com\/swift-server\/RediStack","url":"https:\/\/github.com\/swift-server\/RediStack","titleInlineContent":[{"text":"RediStack","type":"text"}],"title":"RediStack"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"type":"topic","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"role":"symbol","title":"RedisConnectionPoolService","navigatorTitle":[{"text":"RedisConnectionPoolService","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConnectionPoolService","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","abstract":[{"text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","title":"HummingbirdRedis","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","url":"\/documentation\/hummingbirdredis","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisPersistDriver"}],"title":"RedisPersistDriver","url":"\/documentation\/hummingbirdredis\/redispersistdriver","navigatorTitle":[{"kind":"identifier","text":"RedisPersistDriver"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"kind":"symbol"}}}