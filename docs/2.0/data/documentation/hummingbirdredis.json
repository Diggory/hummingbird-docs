{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"],"title":"Related Documentation"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},"abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"variants":[{"paths":["\/documentation\/hummingbirdredis"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"externalID":"HummingbirdRedis","role":"collection","modules":[{"name":"HummingbirdRedis"}],"symbolKind":"module","title":"HummingbirdRedis","roleHeading":"Framework"},"sections":[],"hierarchy":{"paths":[[]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConfiguration"],"title":"Connection Pool"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver"],"title":"Storage"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Adds Redis support to Hummingbird via ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/RediStack","isActive":true,"type":"reference"},{"text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework.","type":"text"}]},{"code":["let redis = try HBRedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = HBRouter()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = HBApplication(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"anchor":"Storage","text":"Storage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests."}]},{"code":["let redis = try HBRedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = HBRedisPersistDriver(redisConnectionPoolService: redis)","let router = HBRouter()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = HBApplication(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisConfiguration":{"url":"\/documentation\/hummingbirdredis\/hbredisconfiguration","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBRedisConfiguration","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConfiguration","navigatorTitle":[{"text":"HBRedisConfiguration","kind":"identifier"}],"title":"HBRedisConfiguration","type":"topic","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisConnectionPoolService":{"url":"\/documentation\/hummingbirdredis\/hbredisconnectionpoolservice","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisConnectionPoolService"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisConnectionPoolService","navigatorTitle":[{"kind":"identifier","text":"HBRedisConnectionPoolService"}],"title":"HBRedisConnectionPoolService","type":"topic","abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/HBRedisPersistDriver":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisPersistDriver"}],"type":"topic","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"title":"HBRedisPersistDriver","kind":"symbol","url":"\/documentation\/hummingbirdredis\/hbredispersistdriver","navigatorTitle":[{"kind":"identifier","text":"HBRedisPersistDriver"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/HBRedisPersistDriver"},"https://github.com/swift-server/RediStack":{"title":"RediStack","identifier":"https:\/\/github.com\/swift-server\/RediStack","type":"link","titleInlineContent":[{"text":"RediStack","type":"text"}],"url":"https:\/\/github.com\/swift-server\/RediStack"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"url":"\/documentation\/hummingbirdredis","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","title":"HummingbirdRedis","type":"topic","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]}}}