{"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds Redis support to Hummingbird via "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swift-server\/RediStack"},{"text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = Router()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = Application(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"]},{"type":"heading","text":"Storage","anchor":"Storage","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests."}]},{"syntax":"swift","type":"codeListing","code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)","let router = Router()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = Application(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"]}]}],"kind":"symbol","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}],"metadata":{"roleHeading":"Framework","role":"collection","symbolKind":"module","title":"HummingbirdRedis","externalID":"HummingbirdRedis","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"HummingbirdRedis"}]},"sections":[],"topicSections":[{"anchor":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"],"title":"Guides"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration"],"anchor":"Connection-Pool","title":"Connection Pool"},{"anchor":"Storage","title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation","anchor":"Related-Documentation"}],"variants":[{"paths":["\/documentation\/hummingbirdredis"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"https://github.com/swift-server/RediStack":{"titleInlineContent":[{"text":"RediStack","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/swift-server\/RediStack","title":"RediStack","url":"https:\/\/github.com\/swift-server\/RediStack"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"role":"symbol","url":"\/documentation\/hummingbirdredis\/redispersistdriver","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"RedisPersistDriver","kind":"identifier"}],"title":"RedisPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RedisPersistDriver"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","type":"topic","title":"Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConfiguration":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConfiguration","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdredis\/redisconfiguration","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration","navigatorTitle":[{"kind":"identifier","text":"RedisConfiguration"}],"title":"RedisConfiguration"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","title":"HummingbirdRedis","role":"collection","url":"\/documentation\/hummingbirdredis","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistentdata","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"title":"RedisConnectionPoolService","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RedisConnectionPoolService","kind":"identifier"}],"abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}],"navigatorTitle":[{"kind":"identifier","text":"RedisConnectionPoolService"}],"type":"topic","url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","kind":"symbol"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png","alt":null}}}