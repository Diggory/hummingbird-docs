{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds Redis support to Hummingbird via "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/swift-server\/RediStack"},{"type":"text","text":" and manage the lifecycle of your Redis connection pool. Also provides a Redis based driver for the persist framework."}]},{"type":"codeListing","syntax":"swift","code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","\/\/ add router with one route to return Redis info","let router = Router()","router.get(\"redis\") { _, _ in","    try await redis.send(command: \"INFO\").map(\\.description).get()","}","var app = Application(router: router)","\/\/ add Redis connection pool as a service to manage its lifecycle","app.addServices(redis)","try await app.runService()"]},{"type":"heading","level":2,"text":"Storage","anchor":"Storage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdRedis provides a driver for the persist framework to store key, value pairs between requests."}]},{"type":"codeListing","syntax":"swift","code":["let redis = try RedisConnectionPoolService(","    .init(hostname: Self.redisHostname, port: 6379),","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)","let router = Router()","\/\/ return value from redis database","router.get(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    try await persist.get(key: id, as: String.self)","}","\/\/ set value in redis database","router.put(\"{id}\") { request, context -> String? in","    let id = try context.parameters.require(\"id\")","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(key: id, value: value)","}","var app = Application(router: router)","\/\/ add Redis connection pool and persist driver as services to manage their lifecycle","app.addServices(redis, persist)","try await app.runService()"]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Framework","title":"HummingbirdRedis","symbolKind":"module","externalID":"HummingbirdRedis","modules":[{"name":"HummingbirdRedis"}],"role":"collection"},"kind":"symbol","hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdredis"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","interfaceLanguage":"swift"},"sections":[],"topicSections":[{"title":"Guides","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"]},{"title":"Connection Pool","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration"]},{"title":"Storage","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"kind":"symbol","url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","title":"HummingbirdRedis","role":"collection","url":"\/documentation\/hummingbirdredis","kind":"symbol","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConfiguration":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisConfiguration"}],"title":"RedisConfiguration","abstract":[],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConfiguration","url":"\/documentation\/hummingbirdredis\/redisconfiguration","navigatorTitle":[{"kind":"identifier","text":"RedisConfiguration"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"url":"\/documentation\/hummingbirdredis\/redispersistdriver","navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}],"abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}],"title":"RedisPersistDriver","role":"symbol"},"https://github.com/swift-server/RediStack":{"identifier":"https:\/\/github.com\/swift-server\/RediStack","title":"RediStack","url":"https:\/\/github.com\/swift-server\/RediStack","type":"link","titleInlineContent":[{"type":"text","text":"RediStack"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"collectionGroup","kind":"article","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","kind":"symbol","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","title":"RedisConnectionPoolService","role":"symbol","navigatorTitle":[{"text":"RedisConnectionPoolService","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConnectionPoolService","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service","type":"text"}]}}}