{"sections":[],"metadata":{"title":"RawRepresentable Implementations","modules":[{"name":"HummingbirdTesting"}],"roleHeading":"API Collection","role":"collectionGroup"},"topicSections":[{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme\/hashValue"]},{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme\/hash(into:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme\/RawRepresentable-Implementations","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"]]},"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdtesting","role":"collection","abstract":[{"text":"Test framework for Hummingbird.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","kind":"symbol","type":"topic","title":"HummingbirdTesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme/hash(into:)":{"url":"\/documentation\/hummingbirdtesting\/testhttpscheme\/hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"abstract":[],"conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","type":"topic","kind":"symbol","title":"hash(into:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme\/hash(into:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"kind":"symbol","navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestHTTPScheme","kind":"identifier"}],"title":"TestHTTPScheme","abstract":[{"text":"HTTP Scheme to use with AsyncHTTPClient test framework","type":"text"}],"url":"\/documentation\/hummingbirdtesting\/testhttpscheme"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme/hashValue":{"type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme\/hashValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"hashValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"url":"\/documentation\/hummingbirdtesting\/testhttpscheme\/hashvalue","role":"symbol","title":"hashValue","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"RawValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]}},"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"identifier":"logo.png","alt":null}}}