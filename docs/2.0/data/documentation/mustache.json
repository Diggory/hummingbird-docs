{"metadata":{"title":"Mustache","externalID":"Mustache","roleHeading":"Framework","symbolKind":"module","role":"collection","modules":[{"name":"Mustache"}]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about Mustache "},{"type":"reference","identifier":"http:\/\/mustache.github.io\/mustache.5.html","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"While swift-mustache has been designed to be used with the Hummingbird server framework it has no dependencies and can be used as a standalone library.","type":"text"}]},{"type":"heading","level":2,"anchor":"Usage","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Load your templates from the filesystem"}]},{"type":"codeListing","syntax":"swift","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will look for all the files with the extension “.mustache” in the specified folder and subfolders and attempt to load them. Each file is registed with the name of the file (with subfolder, if inside a subfolder) minus the “mustache” extension."}]},{"type":"paragraph","inlineContent":[{"text":"Render an object with a template","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let output = library.render(object, withTemplate: \"myTemplate\")"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdMustache"},{"type":"text","text":" treats an object as a set of key\/value pairs when rendering and will render both dictionaries and objects via "},{"type":"codeVoice","code":"Mirror"},{"type":"text","text":" reflection. Find out more on how Mustache renders objects "},{"type":"reference","identifier":"https:\/\/hummingbird-project.github.io\/hummingbird\/current\/hummingbird-mustache\/mustache-syntax.html","isActive":true},{"type":"text","text":"."}]},{"anchor":"Support","type":"heading","level":2,"text":"Support"},{"type":"paragraph","inlineContent":[{"text":"Hummingbird Mustache supports all standard Mustache tags and is fully compliant with the Mustache ","type":"text"},{"identifier":"https:\/\/github.com\/mustache\/spec","isActive":true,"type":"reference"},{"text":" with the exception of the Lambda support.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Mustache template engine."}],"topicSections":[{"title":"Additional Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]},{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax"]},{"title":"Template Library","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"]},{"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]},{"title":"Content Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"]},{"title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"]},{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"]}],"kind":"symbol","hierarchy":{"paths":[[]]},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"title":"MustacheParserContext","navigatorTitle":[{"kind":"identifier","text":"MustacheParserContext"}],"url":"\/documentation\/mustache\/mustacheparsercontext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParserContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","abstract":[{"text":"context used in parser error","type":"text"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"title":"MustacheSequence","url":"\/documentation\/mustache\/mustachesequence","navigatorTitle":[{"kind":"identifier","text":"MustacheSequence"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheSequence"}],"type":"topic","abstract":[{"text":"Protocol for objects that can be rendered as a sequence in Mustache","type":"text"}],"kind":"symbol","role":"symbol"},"http://mustache.github.io/mustache.5.html":{"title":"here","identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"link","titleInlineContent":[{"text":"here","type":"text"}],"url":"http:\/\/mustache.github.io\/mustache.5.html"},"https://github.com/mustache/spec":{"title":"spec","identifier":"https:\/\/github.com\/mustache\/spec","type":"link","titleInlineContent":[{"text":"spec","type":"text"}],"url":"https:\/\/github.com\/mustache\/spec"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","url":"\/documentation\/mustache","kind":"symbol","role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"kind":"symbol","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"title":"MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","title":"MustacheTransformable","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTemplate"}],"role":"symbol","title":"MustacheTemplate","url":"\/documentation\/mustache\/mustachetemplate","abstract":[{"type":"text","text":"Class holding Mustache template"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheTemplate"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"type":"topic","role":"article","url":"\/documentation\/hummingbird\/templateinheritance","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","abstract":[{"text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature.","type":"text"}],"title":"Template Inheritance"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/hummingbird","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"type":"topic","abstract":[{"text":"Transforming objects during render","type":"text"}],"url":"\/documentation\/hummingbird\/transforms","title":"Transforms","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"type":"topic","role":"article","url":"\/documentation\/hummingbird\/pragmas","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","abstract":[{"text":"Setting template render configuration settings.","type":"text"}],"title":"Pragmas\/Configuration variables"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"url":"\/documentation\/mustache\/mustachelibrary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLibrary","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"MustacheLibrary","kind":"identifier"}],"title":"MustacheLibrary","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","role":"symbol","kind":"symbol","abstract":[{"text":"Class holding a collection of mustache templates.","type":"text"}]},"https://hummingbird-project.github.io/hummingbird/current/hummingbird-mustache/mustache-syntax.html":{"title":"here","identifier":"https:\/\/hummingbird-project.github.io\/hummingbird\/current\/hummingbird-mustache\/mustache-syntax.html","type":"link","titleInlineContent":[{"text":"here","type":"text"}],"url":"https:\/\/hummingbird-project.github.io\/hummingbird\/current\/hummingbird-mustache\/mustache-syntax.html"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentTypes","kind":"identifier"}],"abstract":[{"text":"Map of strings to content types.","type":"text"}],"title":"MustacheContentTypes","navigatorTitle":[{"text":"MustacheContentTypes","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachecontenttypes","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"url":"\/documentation\/mustache\/mustachecontenttype","role":"symbol","title":"MustacheContentType","navigatorTitle":[{"kind":"identifier","text":"MustacheContentType"}],"type":"topic","abstract":[{"type":"text","text":"Protocol for content types"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentType"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheSyntax":{"abstract":[{"text":"Overview of Mustache Syntax","type":"text"}],"role":"article","title":"Mustache Syntax","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","type":"topic","url":"\/documentation\/hummingbird\/mustachesyntax","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"type":"topic","role":"article","url":"\/documentation\/hummingbird\/lambdas","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"title":"Lambdas"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"role":"symbol","url":"\/documentation\/mustache\/mustachelambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"type":"topic","title":"MustacheLambda","kind":"symbol","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","title":"MustacheParent","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"url":"\/documentation\/mustache\/mustacheparent","kind":"symbol"}}}