{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache"]}],"kind":"symbol","abstract":[{"type":"text","text":"Mustache template engine."}],"metadata":{"symbolKind":"module","externalID":"Mustache","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"Mustache"}],"roleHeading":"Framework","title":"Mustache","role":"collection"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[[]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about Mustache ","type":"text"},{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While swift-mustache has been designed to be used with the Hummingbird server framework it has no dependencies and can be used as a standalone library."}]},{"anchor":"Usage","type":"heading","level":2,"text":"Usage"},{"type":"paragraph","inlineContent":[{"text":"Load your templates from the filesystem","type":"text"}]},{"syntax":"swift","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will look for all the files with the extension “.mustache” in the specified folder and subfolders and attempt to load them. Each file is registed with the name of the file (with subfolder, if inside a subfolder) minus the “mustache” extension."}],"type":"paragraph"},{"inlineContent":[{"text":"Render an object with a template","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let output = library.render(object, withTemplate: \"myTemplate\")"],"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"Mustache"},{"type":"text","text":" treats an object as a set of key\/value pairs when rendering and will render both dictionaries and objects via "},{"type":"codeVoice","code":"Mirror"},{"type":"text","text":" reflection."}],"type":"paragraph"},{"text":"Support","type":"heading","level":2,"anchor":"Support"},{"inlineContent":[{"text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/mustache\/spec"},{"text":" with the exception of the Lambda support.","type":"text"}],"type":"paragraph"}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"title":"Features"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax"],"title":"Articles"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"],"title":"Template Library"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"],"title":"Rendering"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"],"title":"Content Types"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"],"title":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"],"title":"Structures"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"url":"\/documentation\/hummingbird\/templateinheritance","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","type":"topic","kind":"article","abstract":[{"type":"text","text":"Template inheritance and parents is an optional part of the Mustache specification."}],"role":"article","title":"Template Inheritance and parents"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"url":"\/documentation\/mustache","role":"collection","type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","kind":"symbol","title":"Mustache","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"url":"\/documentation\/mustache\/mustacheparent","role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"title":"MustacheParent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheSyntax":{"abstract":[{"type":"text","text":"Overview of Mustache Syntax"}],"type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","title":"Mustache Syntax","url":"\/documentation\/hummingbird\/mustachesyntax","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"title":"MustacheSequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheSequence","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheSequence","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","abstract":[{"type":"text","text":"Protocol for objects that can be rendered as a sequence in Mustache"}],"url":"\/documentation\/mustache\/mustachesequence"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"abstract":[{"text":"Class holding a collection of mustache templates.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLibrary","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","url":"\/documentation\/mustache\/mustachelibrary","title":"MustacheLibrary","navigatorTitle":[{"text":"MustacheLibrary","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"abstract":[{"type":"text","text":"context used in parser error"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParserContext"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","url":"\/documentation\/mustache\/mustacheparsercontext","title":"MustacheParserContext","navigatorTitle":[{"kind":"identifier","text":"MustacheParserContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"url":"\/documentation\/mustache\/mustachetemplate","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Class holding Mustache template"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheTemplate","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","kind":"symbol","title":"MustacheTemplate","navigatorTitle":[{"text":"MustacheTemplate","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"url":"\/documentation\/hummingbird\/transforms","role":"article","type":"topic","abstract":[{"type":"text","text":"Transforming objects during render"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","kind":"article","title":"Transforms","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"role":"symbol","url":"\/documentation\/mustache\/mustachelambda","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MustacheLambda","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","title":"MustacheLambda","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"type":"topic","kind":"symbol"},"http://mustache.github.io/mustache.5.html":{"type":"link","identifier":"http:\/\/mustache.github.io\/mustache.5.html","titleInlineContent":[{"type":"text","text":"here"}],"title":"here","url":"http:\/\/mustache.github.io\/mustache.5.html"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"navigatorTitle":[{"text":"MustacheContentType","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheContentType","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachecontenttype","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Protocol for content types"}],"role":"symbol","title":"MustacheContentType"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"role":"symbol","url":"\/documentation\/mustache\/mustachetransformable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","title":"MustacheTransformable","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"collection","url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"url":"\/documentation\/hummingbird\/pragmas","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","type":"topic","kind":"article","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"role":"article","title":"Pragmas\/Configuration variables"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"abstract":[{"type":"text","text":"Map of strings to content types."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentTypes"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","navigatorTitle":[{"kind":"identifier","text":"MustacheContentTypes"}],"title":"MustacheContentTypes","url":"\/documentation\/mustache\/mustachecontenttypes","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","url":"\/documentation\/hummingbird\/lambdas","title":"Lambdas","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"url":"\/documentation\/mustache\/mustachecustomrenderable","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"code":"String(describing)","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","kind":"symbol","title":"MustacheCustomRenderable","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}]},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"alt":null},"https://github.com/mustache/spec":{"title":"spec","type":"link","titleInlineContent":[{"type":"text","text":"spec"}],"identifier":"https:\/\/github.com\/mustache\/spec","url":"https:\/\/github.com\/mustache\/spec"}}}