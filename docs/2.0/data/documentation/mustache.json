{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","symbolKind":"module","roleHeading":"Framework","title":"Mustache","externalID":"Mustache","modules":[{"name":"Mustache"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Additional Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]},{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax"]},{"title":"Template Library","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"]},{"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]},{"title":"Content Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"]},{"title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"]},{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"]}],"abstract":[{"type":"text","text":"Mustache template engine."}],"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/mustache"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about Mustache "},{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While swift-mustache has been designed to be used with the Hummingbird server framework it has no dependencies and can be used as a standalone library."}]},{"level":2,"anchor":"Usage","text":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Load your templates from the filesystem"}]},{"syntax":"swift","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This will look for all the files with the extension “.mustache” in the specified folder and subfolders and attempt to load them. Each file is registed with the name of the file (with subfolder, if inside a subfolder) minus the “mustache” extension.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Render an object with a template","type":"text"}]},{"syntax":"swift","code":["let output = library.render(object, withTemplate: \"myTemplate\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Mustache"},{"text":" treats an object as a set of key\/value pairs when rendering and will render both dictionaries and objects via ","type":"text"},{"type":"codeVoice","code":"Mirror"},{"text":" reflection.","type":"text"}]},{"level":2,"anchor":"Support","text":"Support","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache "},{"type":"reference","identifier":"https:\/\/github.com\/mustache\/spec","isActive":true},{"type":"text","text":" with the exception of the Lambda support."}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"url":"\/documentation\/mustache\/mustachecontenttype","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentType","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Protocol for content types"}],"navigatorTitle":[{"text":"MustacheContentType","kind":"identifier"}],"role":"symbol","title":"MustacheContentType","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"role":"symbol","url":"\/documentation\/mustache\/mustachecustomrenderable","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","kind":"symbol","title":"MustacheCustomRenderable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTemplate"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","title":"MustacheTemplate","abstract":[{"type":"text","text":"Class holding Mustache template"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheTemplate"}],"url":"\/documentation\/mustache\/mustachetemplate","type":"topic","role":"symbol","kind":"symbol"},"http://mustache.github.io/mustache.5.html":{"url":"http:\/\/mustache.github.io\/mustache.5.html","type":"link","identifier":"http:\/\/mustache.github.io\/mustache.5.html","title":"here","titleInlineContent":[{"type":"text","text":"here"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheSyntax":{"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/mustachesyntax","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","abstract":[{"type":"text","text":"Overview of Mustache Syntax"}],"title":"Mustache Syntax","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"role":"symbol","url":"\/documentation\/mustache\/mustachelambda","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","kind":"symbol","title":"MustacheLambda"},"https://github.com/mustache/spec":{"url":"https:\/\/github.com\/mustache\/spec","type":"link","identifier":"https:\/\/github.com\/mustache\/spec","title":"spec","titleInlineContent":[{"type":"text","text":"spec"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"title":"MustacheTransformable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"title":"MustacheParent","role":"symbol","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"kind":"symbol","url":"\/documentation\/mustache\/mustacheparent","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"abstract":[{"type":"text","text":"Class holding a collection of mustache templates."}],"title":"MustacheLibrary","navigatorTitle":[{"kind":"identifier","text":"MustacheLibrary"}],"url":"\/documentation\/mustache\/mustachelibrary","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLibrary"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"url":"\/documentation\/mustache\/mustachesequence","type":"topic","navigatorTitle":[{"text":"MustacheSequence","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheSequence","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","abstract":[{"type":"text","text":"Protocol for objects that can be rendered as a sequence in Mustache"}],"title":"MustacheSequence","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","role":"article","url":"\/documentation\/hummingbird\/pragmas","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"type":"topic","kind":"article","title":"Pragmas\/Configuration variables"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentTypes","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachecontenttypes","title":"MustacheContentTypes","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","navigatorTitle":[{"text":"MustacheContentTypes","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Map of strings to content types."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Mustache template engine."}],"url":"\/documentation\/mustache","type":"topic","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","title":"Template Inheritance","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Template inheritance is not part of the Mustache spec yet but it is a commonly implemented feature."}],"url":"\/documentation\/hummingbird\/templateinheritance","type":"topic","role":"article","kind":"article"},"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"role":"symbol","url":"\/documentation\/mustache\/mustacheparsercontext","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheParserContext"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParserContext"}],"abstract":[{"type":"text","text":"context used in parser error"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","kind":"symbol","title":"MustacheParserContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","title":"Lambdas","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Hummingbird Mustache Lambda implementation"}],"url":"\/documentation\/hummingbird\/lambdas","type":"topic","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","title":"Transforms","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Transforming objects during render"}],"url":"\/documentation\/hummingbird\/transforms","type":"topic","role":"article","kind":"article"}}}