{"variants":[{"paths":["\/documentation\/mustache"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Mustache template engine."}],"metadata":{"externalID":"Mustache","role":"collection","roleHeading":"Framework","symbolKind":"module","modules":[{"name":"Mustache"}],"title":"Mustache","images":[{"identifier":"logo.png","type":"icon"}]},"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"],"anchor":"Features"},{"anchor":"Articles","title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax"]},{"title":"Template Library","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"],"anchor":"Template-Library"},{"title":"Rendering","anchor":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]},{"title":"Content Types","anchor":"Content-Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"]},{"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"],"generated":true},{"anchor":"Structures","generated":true,"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"]}],"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about Mustache "},{"type":"reference","isActive":true,"identifier":"http:\/\/mustache.github.io\/mustache.5.html"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While swift-mustache has been designed to be used with the Hummingbird server framework it has no dependencies and can be used as a standalone library."}],"type":"paragraph"},{"type":"heading","anchor":"Usage","text":"Usage","level":2},{"type":"paragraph","inlineContent":[{"text":"Load your templates from the filesystem","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"]},{"type":"paragraph","inlineContent":[{"text":"This will look for all the files with the extension “.mustache” in the specified folder and subfolders and attempt to load them. Each file is registed with the name of the file (with subfolder, if inside a subfolder) minus the “mustache” extension.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Render an object with a template","type":"text"}]},{"syntax":"swift","code":["let output = library.render(object, withTemplate: \"myTemplate\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Mustache"},{"text":" treats an object as a set of key\/value pairs when rendering and will render both dictionaries and objects via ","type":"text"},{"code":"Mirror","type":"codeVoice"},{"text":" reflection.","type":"text"}]},{"level":2,"text":"Support","type":"heading","anchor":"Support"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache "},{"identifier":"https:\/\/github.com\/mustache\/spec","isActive":true,"type":"reference"},{"type":"text","text":" with the exception of the Lambda support."}]}],"kind":"content"}],"references":{"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"url":"\/documentation\/mustache\/mustachetransformable","title":"MustacheTransformable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"navigatorTitle":[{"kind":"identifier","text":"MustacheSequence"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheSequence"}],"abstract":[{"text":"Protocol for objects that can be rendered as a sequence in Mustache","type":"text"}],"role":"symbol","title":"MustacheSequence","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","url":"\/documentation\/mustache\/mustachesequence","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheParserContext","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","url":"\/documentation\/mustache\/mustacheparsercontext","role":"symbol","navigatorTitle":[{"text":"MustacheParserContext","kind":"identifier"}],"title":"MustacheParserContext","abstract":[{"type":"text","text":"context used in parser error"}]},"https://github.com/mustache/spec":{"url":"https:\/\/github.com\/mustache\/spec","type":"link","title":"spec","identifier":"https:\/\/github.com\/mustache\/spec","titleInlineContent":[{"text":"spec","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"url":"\/documentation\/hummingbird\/transforms","abstract":[{"type":"text","text":"Transforming objects during render"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Transforms","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTemplate"}],"url":"\/documentation\/mustache\/mustachetemplate","role":"symbol","navigatorTitle":[{"text":"MustacheTemplate","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Class holding Mustache template"}],"title":"MustacheTemplate","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustachelibrary","title":"MustacheLibrary","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLibrary","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheLibrary","kind":"identifier"}],"abstract":[{"type":"text","text":"Class holding a collection of mustache templates."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentType"}],"url":"\/documentation\/mustache\/mustachecontenttype","navigatorTitle":[{"text":"MustacheContentType","kind":"identifier"}],"type":"topic","title":"MustacheContentType","kind":"symbol","abstract":[{"type":"text","text":"Protocol for content types"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheSyntax":{"abstract":[{"text":"Overview of Mustache Syntax","type":"text"}],"role":"article","title":"Mustache Syntax","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/mustachesyntax","type":"topic"},"http://mustache.github.io/mustache.5.html":{"url":"http:\/\/mustache.github.io\/mustache.5.html","type":"link","title":"here","identifier":"http:\/\/mustache.github.io\/mustache.5.html","titleInlineContent":[{"text":"here","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","abstract":[{"text":"Mustache template engine.","type":"text"}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/mustache","title":"Mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"MustacheCustomRenderable","kind":"identifier"}],"abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"url":"\/documentation\/mustache\/mustachecustomrenderable","title":"MustacheCustomRenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"url":"\/documentation\/mustache\/mustacheparent","title":"MustacheParent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"url":"\/documentation\/mustache\/mustachecontenttypes","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","role":"symbol","title":"MustacheContentTypes","abstract":[{"type":"text","text":"Map of strings to content types."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"MustacheContentTypes","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheContentTypes"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"url":"\/documentation\/mustache\/mustachelambda","kind":"symbol","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"title":"MustacheLambda","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"url":"\/documentation\/hummingbird\/templateinheritance","abstract":[{"text":"Template inheritance and parents is an optional part of the Mustache specification.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Template Inheritance and parents","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}],"role":"article","title":"Lambdas","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/lambdas","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","title":"Pragmas\/Configuration variables","type":"topic","role":"article","url":"\/documentation\/hummingbird\/pragmas","abstract":[{"type":"text","text":"Setting template render configuration settings."}],"images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird","title":"Hummingbird","kind":"symbol","type":"topic"}}}