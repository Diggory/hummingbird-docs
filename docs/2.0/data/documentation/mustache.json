{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about Mustache ","type":"text"},{"isActive":true,"identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"While swift-mustache has been designed to be used with the Hummingbird server framework it has no dependencies and can be used as a standalone library.","type":"text"}],"type":"paragraph"},{"anchor":"Usage","level":2,"text":"Usage","type":"heading"},{"inlineContent":[{"type":"text","text":"Load your templates from the filesystem"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"]},{"inlineContent":[{"text":"This will look for all the files with the extension “.mustache” in the specified folder and subfolders and attempt to load them. Each file is registed with the name of the file (with subfolder, if inside a subfolder) minus the “mustache” extension.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Render an object with a template","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let output = library.render(object, withTemplate: \"myTemplate\")"]},{"inlineContent":[{"type":"codeVoice","code":"Mustache"},{"type":"text","text":" treats an object as a set of key\/value pairs when rendering and will render both dictionaries and objects via "},{"type":"codeVoice","code":"Mirror"},{"type":"text","text":" reflection."}],"type":"paragraph"},{"anchor":"Support","level":2,"text":"Support","type":"heading"},{"inlineContent":[{"text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/mustache\/spec"},{"text":" with the exception of the Lambda support.","type":"text"}],"type":"paragraph"}]}],"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Features","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms"]},{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax"]},{"title":"Template Library","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"]},{"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]},{"title":"Content Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"]},{"title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"]},{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"]}],"abstract":[{"type":"text","text":"Mustache template engine."}],"kind":"symbol","variants":[{"paths":["\/documentation\/mustache"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"Mustache","roleHeading":"Framework","title":"Mustache","images":[{"identifier":"logo.png","type":"icon"}],"symbolKind":"module","role":"collection","modules":[{"name":"Mustache"}]},"sections":[],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","title":"Hummingbird","kind":"symbol","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Transforms":{"kind":"article","role":"article","url":"\/documentation\/hummingbird\/transforms","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Transforms","abstract":[{"type":"text","text":"Transforming objects during render"}],"type":"topic","title":"Transforms","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Pragmas":{"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Pragmas","title":"Pragmas\/Configuration variables","url":"\/documentation\/hummingbird\/pragmas","role":"article","type":"topic","kind":"article","abstract":[{"text":"Setting template render configuration settings.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"title":"MustacheTemplate","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheTemplate"}],"url":"\/documentation\/mustache\/mustachetemplate","abstract":[{"type":"text","text":"Class holding Mustache template"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTemplate"}]},"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}],"alt":null,"identifier":"logo.png"},"http://mustache.github.io/mustache.5.html":{"type":"link","titleInlineContent":[{"text":"here","type":"text"}],"url":"http:\/\/mustache.github.io\/mustache.5.html","identifier":"http:\/\/mustache.github.io\/mustache.5.html","title":"here"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/mustache\/mustachecustomrenderable","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"title":"MustacheCustomRenderable","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"type":"topic"},"https://github.com/mustache/spec":{"titleInlineContent":[{"text":"spec","type":"text"}],"title":"spec","identifier":"https:\/\/github.com\/mustache\/spec","url":"https:\/\/github.com\/mustache\/spec","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"kind":"symbol","role":"symbol","title":"MustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","url":"\/documentation\/mustache\/mustachelambda","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"Mustache","url":"\/documentation\/mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","abstract":[{"text":"Class holding a collection of mustache templates.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheLibrary"}],"type":"topic","role":"symbol","title":"MustacheLibrary","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLibrary"}],"kind":"symbol","url":"\/documentation\/mustache\/mustachelibrary"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParserContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","title":"MustacheParserContext","role":"symbol","url":"\/documentation\/mustache\/mustacheparsercontext","kind":"symbol","abstract":[{"text":"context used in parser error","type":"text"}],"navigatorTitle":[{"text":"MustacheParserContext","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TemplateInheritance":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TemplateInheritance","title":"Template Inheritance and parents","url":"\/documentation\/hummingbird\/templateinheritance","role":"article","type":"topic","kind":"article","abstract":[{"type":"text","text":"Template inheritance and parents is an optional part of the Mustache specification."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheSequence"}],"title":"MustacheSequence","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheSequence"}],"url":"\/documentation\/mustache\/mustachesequence","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","abstract":[{"text":"Protocol for objects that can be rendered as a sequence in Mustache","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"title":"MustacheTransformable","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheSyntax":{"kind":"article","title":"Mustache Syntax","type":"topic","url":"\/documentation\/hummingbird\/mustachesyntax","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","abstract":[{"text":"Overview of Mustache Syntax","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"type":"topic","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"kind":"symbol","url":"\/documentation\/mustache\/mustacheparent","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","title":"MustacheParent"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"abstract":[{"text":"Map of strings to content types.","type":"text"}],"navigatorTitle":[{"text":"MustacheContentTypes","kind":"identifier"}],"title":"MustacheContentTypes","kind":"symbol","url":"\/documentation\/mustache\/mustachecontenttypes","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentTypes","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"abstract":[{"type":"text","text":"Protocol for content types"}],"navigatorTitle":[{"text":"MustacheContentType","kind":"identifier"}],"title":"MustacheContentType","kind":"symbol","url":"\/documentation\/mustache\/mustachecontenttype","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentType","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Lambdas":{"title":"Lambdas","type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Lambdas","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/lambdas","abstract":[{"text":"Hummingbird Mustache Lambda implementation","type":"text"}]}}}