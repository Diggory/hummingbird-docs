{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","interfaceLanguage":"swift"},"metadata":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:8Mustache0A6LambdaV","symbolKind":"struct","title":"MustacheLambda","modules":[{"name":"Mustache"}],"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on","type":"text"},{"text":" ","type":"text"},{"text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though","type":"text"},{"text":" ","type":"text"},{"text":"as they are passed a template representing the contained text and not the raw text","type":"text"},{"text":" ","type":"text"},{"text":"e.g","type":"text"}]},{"type":"codeListing","syntax":null,"code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"]}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"],"generated":true,"title":"Rendering"}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"],"title":"Type Aliases"}],"kind":"symbol","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachelambda"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)","title":"init(_:)","kind":"symbol","abstract":[{"type":"text","text":"Initialize "},{"type":"codeVoice","code":"MustacheLambda"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka","kind":"typeIdentifier","text":"Callback"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/mustache\/mustachelambda\/init(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"title":"MustacheCustomRenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"kind":"symbol","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"type":"topic","title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachelambda","title":"MustacheLambda","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","title":"MustacheLambda.Callback","kind":"symbol","abstract":[{"type":"text","text":"lambda callback"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Callback"}],"type":"topic","url":"\/documentation\/mustache\/mustachelambda\/callback","navigatorTitle":[{"kind":"identifier","text":"Callback"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","url":"\/documentation\/mustache","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection","type":"topic","title":"Mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"role":"symbol","title":"MustacheTransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachetransformable","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","kind":"symbol","type":"topic","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}]}}}