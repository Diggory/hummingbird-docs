{"abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}],"type":"paragraph"},{"code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"type":"codeListing","syntax":null}],"kind":"content"}],"seeAlsoSections":[{"title":"Rendering","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"},"sections":[],"variants":[{"paths":["\/documentation\/mustache\/mustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"kind":"symbol","metadata":{"role":"symbol","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"modules":[{"name":"Mustache"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"title":"MustacheLambda","roleHeading":"Structure","symbolKind":"struct","externalID":"s:8Mustache0A6LambdaV"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"abstract":[{"text":"Initialize ","type":"text"},{"code":"MustacheLambda","type":"codeVoice"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Callback","preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/mustache\/mustachelambda\/init(_:)","kind":"symbol","role":"symbol","title":"init(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"abstract":[{"text":"lambda callback","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","navigatorTitle":[{"kind":"identifier","text":"Callback"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Callback"}],"type":"topic","url":"\/documentation\/mustache\/mustachelambda\/callback","kind":"symbol","role":"symbol","title":"MustacheLambda.Callback"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","title":"MustacheCustomRenderable","type":"topic","kind":"symbol","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"role":"symbol","url":"\/documentation\/mustache\/mustachecustomrenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/mustache","abstract":[{"text":"Mustache template engine.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheTransformable"}],"title":"MustacheTransformable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"url":"\/documentation\/mustache\/mustachetransformable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheParent"}],"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of using Mirror"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"role":"symbol","url":"\/documentation\/mustache\/mustachelambda","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","kind":"symbol","title":"MustacheLambda","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}]}}}