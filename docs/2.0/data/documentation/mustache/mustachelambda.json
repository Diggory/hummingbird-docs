{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}],"type":"paragraph"},{"code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"syntax":null,"type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"],"generated":true,"title":"Rendering"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"],"title":"Type Aliases"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"symbolKind":"struct","modules":[{"name":"Mustache"}],"title":"MustacheLambda","externalID":"s:8Mustache0A6LambdaV","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"roleHeading":"Structure"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachelambda"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","title":"Mustache","url":"\/documentation\/mustache","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"type":"topic","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"title":"MustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","role":"symbol","url":"\/documentation\/mustache\/mustachelambda","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"role":"symbol","url":"\/documentation\/mustache\/mustachetransformable","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","title":"MustacheTransformable","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"url":"\/documentation\/mustache\/mustacheparent","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"type":"topic","title":"MustacheParent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"lambda callback"}],"title":"MustacheLambda.Callback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","role":"symbol","url":"\/documentation\/mustache\/mustachelambda\/callback","navigatorTitle":[{"text":"Callback","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"url":"\/documentation\/mustache\/mustachecustomrenderable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"type":"topic","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"title":"MustacheCustomRenderable","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Callback","kind":"typeIdentifier","preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Initialize "},{"code":"MustacheLambda","type":"codeVoice"}],"title":"init(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)","role":"symbol","url":"\/documentation\/mustache\/mustachelambda\/init(_:)"}}}