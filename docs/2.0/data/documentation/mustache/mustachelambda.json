{"sections":[],"abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"seeAlsoSections":[{"generated":true,"title":"Rendering","anchor":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-20tuc","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-4ksrf"],"title":"Initializers","generated":true,"anchor":"Initializers"},{"title":"Type Aliases","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"],"anchor":"Type-Aliases"}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas."},{"type":"text","text":" "},{"type":"text","text":"e.g"}]},{"type":"codeListing","code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ string in","    return \"<b>\\(string)<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"syntax":null}]}],"metadata":{"modules":[{"name":"Mustache"}],"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"role":"symbol","externalID":"s:8Mustache0A6LambdaV","title":"MustacheLambda","roleHeading":"Structure","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"},"variants":[{"paths":["\/documentation\/mustache\/mustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"url":"\/documentation\/mustache\/mustachelambda","role":"symbol","type":"topic","title":"MustacheLambda","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"role":"symbol","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/mustache\/mustachecustomrenderable","kind":"symbol","title":"MustacheCustomRenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)-4ksrf":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Callback","kind":"typeIdentifier","preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka"},{"kind":"text","text":")"}],"url":"\/documentation\/mustache\/mustachelambda\/init(_:)-4ksrf","role":"symbol","type":"topic","title":"init(_:)","abstract":[{"text":"Initialize ","type":"text"},{"code":"MustacheLambda","type":"codeVoice"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-4ksrf","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)-20tuc":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-20tuc","kind":"symbol","type":"topic","title":"init(_:)","url":"\/documentation\/mustache\/mustachelambda\/init(_:)-20tuc","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(() -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?)","kind":"text"}],"abstract":[{"text":"Initialize ","type":"text"},{"code":"MustacheLambda","type":"codeVoice"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"navigatorTitle":[{"kind":"identifier","text":"Callback"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachelambda\/callback","role":"symbol","type":"topic","title":"MustacheLambda.Callback","abstract":[{"text":"lambda callback","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","kind":"symbol","type":"topic","title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of using Mirror"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","images":[{"identifier":"logo.png","type":"icon"}],"title":"Mustache","role":"collection","abstract":[{"text":"Mustache template engine.","type":"text"}],"type":"topic","url":"\/documentation\/mustache","kind":"symbol"},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","kind":"symbol","type":"topic","title":"MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","role":"symbol","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheTransformable"}],"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}]}}}