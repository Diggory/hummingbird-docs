{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"},"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"]}],"variants":[{"paths":["\/documentation\/mustache\/mustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}],"type":"paragraph"},{"syntax":null,"code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"type":"codeListing"}]}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"symbolKind":"struct","title":"MustacheLambda","role":"symbol","roleHeading":"Structure","modules":[{"name":"Mustache"}],"externalID":"s:8Mustache0A6LambdaV"},"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"title":"MustacheCustomRenderable","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"type":"topic","kind":"symbol","url":"\/documentation\/mustache\/mustachecustomrenderable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"type":"topic","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"url":"\/documentation\/mustache\/mustachelambda","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"title":"MustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"kind":"symbol","url":"\/documentation\/mustache\/mustachetransformable","type":"topic","title":"MustacheTransformable","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","title":"MustacheParent","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustacheparent"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"title":"Mustache","url":"\/documentation\/mustache","type":"topic","abstract":[{"text":"Mustache template engine.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"abstract":[{"text":"lambda callback","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"role":"symbol","url":"\/documentation\/mustache\/mustachelambda\/callback","title":"MustacheLambda.Callback","kind":"symbol","navigatorTitle":[{"text":"Callback","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"abstract":[{"text":"Initialize ","type":"text"},{"type":"codeVoice","code":"MustacheLambda"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka","text":"Callback","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/mustache\/mustachelambda\/init(_:)","title":"init(_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"}}}