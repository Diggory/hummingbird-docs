{"sections":[],"kind":"symbol","metadata":{"symbolKind":"struct","role":"symbol","roleHeading":"Structure","modules":[{"name":"Mustache"}],"title":"MustacheLambda","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"externalID":"s:8Mustache0A6LambdaV"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"],"title":"Rendering"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"variants":[{"paths":["\/documentation\/mustache\/mustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"],"title":"Type Aliases"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}]}],"kind":"declarations"},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on","type":"text"},{"text":" ","type":"text"},{"text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}]},{"syntax":null,"type":"codeListing","code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"kind":"symbol","role":"symbol","type":"topic","title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"type":"topic","abstract":[{"text":"Initialize ","type":"text"},{"type":"codeVoice","code":"MustacheLambda"}],"title":"init(_:)","kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Callback","preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka"},{"kind":"text","text":")"}],"url":"\/documentation\/mustache\/mustachelambda\/init(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"type":"topic","abstract":[{"text":"lambda callback","type":"text"}],"title":"MustacheLambda.Callback","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Callback"}],"url":"\/documentation\/mustache\/mustachelambda\/callback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","navigatorTitle":[{"kind":"identifier","text":"Callback"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","title":"MustacheCustomRenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"type":"topic","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"title":"MustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","url":"\/documentation\/mustache\/mustachelambda","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","type":"topic","abstract":[{"text":"Mustache template engine.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","url":"\/documentation\/mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"kind":"symbol","role":"symbol","type":"topic","title":"MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}]}}}