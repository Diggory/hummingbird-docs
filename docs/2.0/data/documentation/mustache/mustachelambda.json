{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"],"title":"Rendering","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"platforms":["Linux"]}]},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on","type":"text"},{"text":" ","type":"text"},{"text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though","type":"text"},{"text":" ","type":"text"},{"text":"as they are passed a template representing the contained text and not the raw text","type":"text"},{"text":" ","type":"text"},{"text":"e.g","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"syntax":null}],"kind":"content"}],"metadata":{"modules":[{"name":"Mustache"}],"role":"symbol","roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"title":"MustacheLambda","symbolKind":"struct","externalID":"s:8Mustache0A6LambdaV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}]},"sections":[],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"},"variants":[{"paths":["\/documentation\/mustache\/mustachelambda"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"],"title":"Type Aliases"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"url":"\/documentation\/mustache\/mustachecustomrenderable","title":"MustacheCustomRenderable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection","url":"\/documentation\/mustache","kind":"symbol","title":"Mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustachetransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","title":"MustacheTransformable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"text":"of using Mirror","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheParent"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustachelambda","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","title":"MustacheLambda"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"navigatorTitle":[{"text":"Callback","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustachelambda\/callback","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Callback","kind":"identifier"}],"abstract":[{"type":"text","text":"lambda callback"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","title":"MustacheLambda.Callback"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustachelambda\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka","text":"Callback","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Initialize "},{"code":"MustacheLambda","type":"codeVoice"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)","title":"init(_:)"}}}