{"topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-20tuc","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-4ksrf"],"generated":true},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"],"title":"Type Aliases","anchor":"Type-Aliases"}],"metadata":{"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"externalID":"s:8Mustache0A6LambdaV","modules":[{"name":"Mustache"}],"role":"symbol","title":"MustacheLambda","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheLambda","kind":"identifier"}],"symbolKind":"struct"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"],"generated":true,"anchor":"Rendering","title":"Rendering"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"text":" ","type":"text"},{"type":"text","text":"mustache lambdas."},{"text":" ","type":"text"},{"type":"text","text":"e.g"}],"type":"paragraph"},{"syntax":null,"code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ string in","    return \"<b>\\(string)<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachelambda"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","interfaceLanguage":"swift"},"abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"kind":"symbol","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheLambda","kind":"identifier"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"url":"\/documentation\/mustache\/mustachelambda","kind":"symbol","title":"MustacheLambda","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)-4ksrf":{"type":"topic","url":"\/documentation\/mustache\/mustachelambda\/init(_:)-4ksrf","abstract":[{"type":"text","text":"Initialize "},{"type":"codeVoice","code":"MustacheLambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-4ksrf","role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka","text":"Callback"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheTransformable"}],"url":"\/documentation\/mustache\/mustachetransformable","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"kind":"symbol","title":"MustacheTransformable","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)-20tuc":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)-20tuc","abstract":[{"text":"Initialize ","type":"text"},{"type":"codeVoice","code":"MustacheLambda"}],"title":"init(_:)","url":"\/documentation\/mustache\/mustachelambda\/init(_:)-20tuc","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"(() -> "},{"text":"Any","kind":"keyword"},{"text":"?)","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"url":"\/documentation\/mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","kind":"symbol","title":"Mustache","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Mustache template engine."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheCustomRenderable","kind":"identifier"}],"abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"url":"\/documentation\/mustache\/mustachecustomrenderable","kind":"symbol","title":"MustacheCustomRenderable","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","role":"symbol"},"logo.png":{"alt":null,"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"url":"\/documentation\/mustache\/mustacheparent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","role":"symbol","kind":"symbol","title":"MustacheParent","type":"topic","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheParent","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"role":"symbol","navigatorTitle":[{"text":"Callback","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","abstract":[{"type":"text","text":"lambda callback"}],"title":"MustacheLambda.Callback","url":"\/documentation\/mustache\/mustachelambda\/callback","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Callback"}]}}}