{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachelambda"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"See http:\/\/mustache.github.io\/mustache.5.html for more details on"},{"type":"text","text":" "},{"type":"text","text":"mustache lambdas. Lambdas work slightly differently in HummingbirdMustache though"},{"type":"text","text":" "},{"type":"text","text":"as they are passed a template representing the contained text and not the raw text"},{"type":"text","text":" "},{"type":"text","text":"e.g"}],"type":"paragraph"},{"code":["struct Object {","    let name: String","    let wrapped: MustacheLambda","}","let willy = Object(name: \"Willy\", wrapped: .init({ object, template in","    return \"<b>\\(template.render(object))<\/b>\"","}))","let mustache = \"{{#wrapped}}{{name}} is awesome.{{\/wrapped}}\"","let template = try MustacheTemplate(string: mustache)","let output = template.render(willy)","print(output) \/\/ <b>Willy is awesome<\/b>"],"syntax":null,"type":"codeListing"}]}],"kind":"symbol","topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback"]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"seeAlsoSections":[{"title":"Rendering","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"modules":[{"name":"Mustache"}],"title":"MustacheLambda","externalID":"s:8Mustache0A6LambdaV","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"symbolKind":"struct","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"role":"symbol","url":"\/documentation\/mustache\/mustacheparent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"type":"topic","title":"MustacheParent","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"type":"topic","url":"\/documentation\/mustache\/mustachecustomrenderable","kind":"symbol","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","title":"MustacheCustomRenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"role":"symbol","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"url":"\/documentation\/mustache\/mustachelambda","kind":"symbol","title":"MustacheLambda","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/init(_:)":{"abstract":[{"type":"text","text":"Initialize "},{"type":"codeVoice","code":"MustacheLambda"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:8Mustache0A6LambdaV8Callbacka","text":"Callback","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/init(_:)","url":"\/documentation\/mustache\/mustachelambda\/init(_:)","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"role":"symbol","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol","title":"MustacheTransformable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda/Callback":{"url":"\/documentation\/mustache\/mustachelambda\/callback","title":"MustacheLambda.Callback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda\/Callback","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"lambda callback"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Callback"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Callback"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","role":"collection","url":"\/documentation\/mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic","title":"Mustache","abstract":[{"type":"text","text":"Mustache template engine."}]}}}