{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"seeAlsoSections":[{"generated":true,"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"languages":["swift"]}]},{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax for applying transforms is "},{"type":"codeVoice","code":"{{transform(variable)}}"},{"type":"text","text":". Transforms can be applied to both"},{"type":"text","text":" "},{"type":"text","text":"variables, sections and inverted sections."}]},{"type":"paragraph","inlineContent":[{"text":"A simple example would be ensuring a string is lowercase.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["{{lowercased(myString)}}"]},{"type":"paragraph","inlineContent":[{"text":"If applying a transform to a sequence then the closing element of the sequence should include the","type":"text"},{"text":" ","type":"text"},{"text":"transform name eg","type":"text"}]},{"type":"codeListing","syntax":null,"code":["{{#reversed(sequence)}}{{.}}{{\\reversed(sequence)}}"]}],"kind":"content"}],"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"metadata":{"roleHeading":"Protocol","externalID":"s:8Mustache0A13TransformableP","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"title":"MustacheTransformable","modules":[{"name":"Mustache"}],"role":"symbol","symbolKind":"protocol"},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)"]}],"variants":[{"paths":["\/documentation\/mustache\/mustachetransformable"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","title":"MustacheLambda","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheLambda"}],"type":"topic","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"role":"symbol","url":"\/documentation\/mustache\/mustachelambda","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"title":"MustacheTransformable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"type":"topic","url":"\/documentation\/mustache\/mustachetransformable","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection","url":"\/documentation\/mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","title":"MustacheParent","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"type":"topic","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"role":"symbol","url":"\/documentation\/mustache\/mustacheparent","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable/transform(_:)":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"transform","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"required":true,"title":"transform(_:)","type":"topic","url":"\/documentation\/mustache\/mustachetransformable\/transform(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"type":"topic","title":"MustacheCustomRenderable","abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheCustomRenderable"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"role":"symbol"}}}