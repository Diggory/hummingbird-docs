{"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"},"seeAlsoSections":[{"title":"Rendering","generated":true,"anchor":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]}],"topicSections":[{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheTransformable"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"The syntax for applying transforms is ","type":"text"},{"type":"codeVoice","code":"{{transform(variable)}}"},{"type":"text","text":". Transforms can be applied to both"},{"text":" ","type":"text"},{"type":"text","text":"variables, sections and inverted sections."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A simple example would be ensuring a string is lowercase."}],"type":"paragraph"},{"syntax":null,"code":["{{lowercased(myString)}}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If applying a transform to a sequence then the closing element of the sequence should include the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transform name eg"}]},{"type":"codeListing","code":["{{#reversed(sequence)}}{{.}}{{\\reversed(sequence)}}"],"syntax":null}]}],"sections":[],"variants":[{"paths":["\/documentation\/mustache\/mustachetransformable"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","externalID":"s:8Mustache0A13TransformableP","modules":[{"name":"Mustache"}],"title":"MustacheTransformable","symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheTransformable","kind":"identifier"}],"roleHeading":"Protocol"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","title":"MustacheParent","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"url":"\/documentation\/mustache\/mustacheparent","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"MustacheParent","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable/transform(_:)":{"role":"symbol","abstract":[],"required":true,"url":"\/documentation\/mustache\/mustachetransformable\/transform(_:)","title":"transform(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"transform","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"Any"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"type":"topic","role":"symbol","kind":"symbol","title":"MustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"url":"\/documentation\/mustache\/mustachelambda","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","url":"\/documentation\/mustache","type":"topic","title":"Mustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"title":"MustacheTransformable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","kind":"symbol","title":"MustacheCustomRenderable","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachecustomrenderable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"MustacheCustomRenderable","kind":"identifier"}],"abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}]},"logo.png":{"alt":null,"identifier":"logo.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]}}}