{"metadata":{"title":"MustacheTransformable","modules":[{"name":"Mustache"}],"roleHeading":"Protocol","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"externalID":"s:8Mustache0A13TransformableP","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"role":"symbol"},"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachetransformable"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"text":"The syntax for applying transforms is ","type":"text"},{"type":"codeVoice","code":"{{transform(variable)}}"},{"text":". Transforms can be applied to both","type":"text"},{"text":" ","type":"text"},{"text":"variables, sections and inverted sections.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A simple example would be ensuring a string is lowercase.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["{{lowercased(myString)}}"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"If applying a transform to a sequence then the closing element of the sequence should include the","type":"text"},{"text":" ","type":"text"},{"text":"transform name eg","type":"text"}]},{"code":["{{#reversed(sequence)}}{{.}}{{\\reversed(sequence)}}"],"type":"codeListing","syntax":null}]}],"seeAlsoSections":[{"generated":true,"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]}],"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)"]}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","role":"collection","abstract":[{"text":"Mustache template engine.","type":"text"}],"title":"Mustache","kind":"symbol","url":"\/documentation\/mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable/transform(_:)":{"required":true,"type":"topic","url":"\/documentation\/mustache\/mustachetransformable\/transform(_:)","role":"symbol","title":"transform(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"transform"},{"kind":"text","text":"("},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"title":"MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"type":"topic","title":"MustacheCustomRenderable","navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"url":"\/documentation\/mustache\/mustachecustomrenderable","kind":"symbol","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"kind":"symbol","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","title":"MustacheLambda","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"type":"topic","url":"\/documentation\/mustache\/mustachelambda"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"kind":"symbol","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"title":"MustacheParent","type":"topic","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"text":"of using Mirror","type":"text"}],"url":"\/documentation\/mustache\/mustacheparent","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheParent","kind":"identifier"}]}}}