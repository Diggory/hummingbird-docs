{"sections":[],"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdjobs"]}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"},{"type":"text","text":" that comes with the hummingbird-redis package that stores jobs in a Redis database."}]},{"type":"heading","level":3,"anchor":"Setting-up-Jobs","text":"Setting up Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"type":"codeListing","code":["let jobQueue = HBMemoryJobQueue()"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"Creating-a-Job","text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"type":"codeVoice","code":"HBJob"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"type":"codeVoice","code":"name"},{"type":"text","text":" and a function "},{"type":"codeVoice","code":"func execute(on:logger)"},{"type":"text","text":". The "},{"type":"codeVoice","code":"name"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" function does the work of the job and returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"type":"codeVoice","code":"sendEmail()"},{"type":"text","text":" function."}]},{"type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(logger: Logger) async throws {","        return try await sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"type":"codeListing","code":["SendEmailJob.register()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"code":"push","type":"codeVoice"},{"type":"text","text":" on "},{"code":"HBJobQueue","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job: job)"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"Processing-Jobs","text":"Processing Jobs"},{"type":"paragraph","inlineContent":[{"text":"To process jobs you need to create a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","isActive":true,"type":"reference"},{"text":". This defines the job queue it should service and how many jobs will be processed concurrently.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","isActive":true},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Service"},{"text":" from Swift Service Lifecycle so can be added to a ","type":"text"},{"type":"codeVoice","code":"ServiceGroup"}]},{"type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueueHandler],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or it can be added to the array of jobs that ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" manages","type":"text"}]},{"type":"codeListing","code":["let app = HBApplication(...)","app.addServices(jobQueueHandler)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are running your job queue handler on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue"},{"type":"text","text":"."}]}]}],"metadata":{"title":"HummingbirdJobs","modules":[{"name":"HummingbirdJobs"}],"externalID":"HummingbirdJobs","roleHeading":"Framework","role":"collection","symbolKind":"module"},"hierarchy":{"paths":[[]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"title":"HBJob","type":"topic","abstract":[{"type":"text","text":"Protocol for job description"}],"role":"symbol","navigatorTitle":[{"text":"HBJob","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/hbjob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"url":"\/documentation\/hummingbirdjobs\/hbjobqueue","kind":"symbol","type":"topic","role":"symbol","title":"HBJobQueue","navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","abstract":[{"text":"Job queue protocol.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Identifier for Job","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"title":"JobIdentifier"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"abstract":[{"text":"In memory implementation of job queue driver. Stores jobs in a circular buffer","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMemoryJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","role":"symbol","kind":"symbol","title":"HBMemoryJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobInstance":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobInstance"}],"title":"HBJobInstance","url":"\/documentation\/hummingbirdjobs\/hbjobinstance","role":"symbol","abstract":[{"type":"text","text":"Holder for all data related to a job"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobInstance"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","url":"\/documentation\/hummingbirdjobsredis","type":"topic","title":"HummingbirdJobsRedis","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBQueuedJob","kind":"identifier"}],"navigatorTitle":[{"text":"HBQueuedJob","kind":"identifier"}],"title":"HBQueuedJob","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","title":"HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"role":"symbol","title":"JobQueueError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueError"}],"abstract":[{"type":"text","text":"Job Queue Error type"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/jobqueueerror"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisJobQueue"}],"title":"HBRedisJobQueue","abstract":[{"text":"Redis implementation of job queues","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBRedisJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueHandler","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBJobQueueHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"Object handling a single job queue"}],"title":"HBJobQueueHandler","role":"symbol"}}}