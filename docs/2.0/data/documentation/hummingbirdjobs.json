{"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"sections":[],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation "},{"type":"codeVoice","code":"\/HummingbirdJobsRedis"},{"type":"text","text":" that comes with the hummingbird-redis package that stores jobs in a Redis database."}]},{"text":"Setting up Jobs","level":3,"type":"heading","anchor":"Setting-up-Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"type":"codeListing","code":["let jobQueue = HBMemoryJobQueue()"],"syntax":"swift"},{"text":"Creating a Job","level":3,"type":"heading","anchor":"Creating-a-Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"type":"codeVoice","code":"HBJob"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"type":"codeVoice","code":"name"},{"type":"text","text":" and a function "},{"type":"codeVoice","code":"func execute(on:logger)"},{"type":"text","text":". The "},{"type":"codeVoice","code":"name"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" function does the work of the job and returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"type":"codeVoice","code":"sendEmail()"},{"type":"text","text":" function."}]},{"type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(logger: Logger) async throws {","        return try await sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"type":"codeListing","code":["SendEmailJob.register()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"push"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job: job)"],"syntax":"swift"},{"text":"Processing Jobs","level":3,"type":"heading","anchor":"Processing-Jobs"},{"type":"paragraph","inlineContent":[{"text":"To process jobs you need to create a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","isActive":true},{"text":". This defines the job queue it should service and how many jobs will be processed concurrently.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle so can be added to a "},{"type":"codeVoice","code":"ServiceGroup"}]},{"type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueueHandler],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" manages"}]},{"type":"codeListing","code":["let app = HBApplication(...)","app.addServices(jobQueueHandler)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are running your job queue handler on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"codeVoice","code":"HummingbirdJobsRedis\/HBRedisJobQueue"},{"type":"text","text":"."}]}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance"],"title":"Jobs"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"],"title":"Queues"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"],"title":"Error"}],"metadata":{"symbolKind":"module","role":"collection","modules":[{"name":"HummingbirdJobs"}],"roleHeading":"Framework","title":"HummingbirdJobs","externalID":"HummingbirdJobs"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"abstract":[{"text":"Job queue protocol.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","kind":"symbol","title":"HBJobQueue","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"kind":"symbol","abstract":[{"text":"Object handling a single job queue","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueHandler"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueHandler"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","title":"HBJobQueueHandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobInstance":{"url":"\/documentation\/hummingbirdjobs\/hbjobinstance","abstract":[{"type":"text","text":"Holder for all data related to a job"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance","navigatorTitle":[{"kind":"identifier","text":"HBJobInstance"}],"role":"symbol","title":"HBJobInstance","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobInstance","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","role":"collection","title":"HummingbirdJobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","kind":"symbol","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryJobQueue"}],"title":"HBMemoryJobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"title":"HBJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","url":"\/documentation\/hummingbirdjobs\/hbjob","role":"symbol","navigatorTitle":[{"text":"HBJob","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Protocol for job description"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueueError","kind":"identifier"}],"navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","abstract":[{"text":"Job Queue Error type","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","title":"JobQueueError"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"kind":"symbol","abstract":[{"type":"text","text":"Queued job. Includes job, plus the id for the job"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBQueuedJob"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","title":"HBQueuedJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","abstract":[{"text":"Identifier for Job","type":"text"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"title":"JobIdentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}]}}}