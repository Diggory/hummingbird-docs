{"metadata":{"externalID":"HummingbirdJobs","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}],"title":"HummingbirdJobs","roleHeading":"Framework","role":"collection"},"kind":"symbol","hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"sections":[],"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"type":"codeVoice","code":"\/HummingbirdJobsRedis"},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}]},{"type":"heading","text":"Setting up Jobs","level":3,"anchor":"Setting-up-Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"type":"codeListing","code":["let jobQueue = HBMemoryJobQueue()"],"syntax":"swift"},{"type":"heading","text":"Creating a Job","level":3,"anchor":"Creating-a-Job"},{"type":"paragraph","inlineContent":[{"text":"First you must define your job. Create an object that inherits from ","type":"text"},{"code":"HBJob","type":"codeVoice"},{"text":". This protocol requires you to implement a static variable ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" and a function ","type":"text"},{"code":"func execute(on:logger)","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" variable should be unique to this job definition. It is used in the serialisation of the job. The ","type":"text"},{"code":"execute","type":"codeVoice"},{"text":" function does the work of the job and returns an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a ","type":"text"},{"code":"sendEmail()","type":"codeVoice"},{"text":" function.","type":"text"}]},{"type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(logger: Logger) async throws {","        return try await sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Before you can use this job you have to register it.","type":"text"}]},{"type":"codeListing","code":["SendEmailJob.register()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"push"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job: job)"],"syntax":"swift"},{"type":"heading","text":"Processing Jobs","level":3,"anchor":"Processing-Jobs"},{"type":"paragraph","inlineContent":[{"text":"To process jobs you need to create a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","type":"reference"},{"text":". This defines the job queue it should service and how many jobs will be processed concurrently.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"},{"type":"text","text":" conforms to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" from Swift Service Lifecycle so can be added to a "},{"code":"ServiceGroup","type":"codeVoice"}]},{"type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueueHandler],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or it can be added to the array of jobs that ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" manages","type":"text"}]},{"type":"codeListing","code":["let app = HBApplication(...)","app.addServices(jobQueueHandler)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you are running your job queue handler on a separate server you will need to use a job queue driver that saves to some external storage eg ","type":"text"},{"code":"HummingbirdJobsRedis\/HBRedisJobQueue","type":"codeVoice"},{"text":".","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}],"title":"HBQueuedJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","abstract":[{"type":"text","text":"Queued job. Includes job, plus the id for the job"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueHandler"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueHandler"}],"title":"HBJobQueueHandler","kind":"symbol","abstract":[{"type":"text","text":"Object handling a single job queue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobInstance":{"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobinstance","navigatorTitle":[{"kind":"identifier","text":"HBJobInstance"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobInstance"}],"title":"HBJobInstance","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance","abstract":[{"type":"text","text":"Holder for all data related to a job"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","title":"Hummingbird","role":"collection","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","abstract":[{"type":"text","text":"Protocol for job description"}],"title":"HBJob","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBJob","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"HummingbirdJobs","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HBMemoryJobQueue","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"title":"HBMemoryJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBJobQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","title":"HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","abstract":[{"type":"text","text":"Job queue protocol."}],"role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","abstract":[{"type":"text","text":"Identifier for Job"}],"title":"JobIdentifier","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/jobidentifier"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Job Queue Error type","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueueError","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","type":"topic","title":"JobQueueError"}}}