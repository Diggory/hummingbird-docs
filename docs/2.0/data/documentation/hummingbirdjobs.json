{"metadata":{"title":"HummingbirdJobs","externalID":"HummingbirdJobs","roleHeading":"Framework","symbolKind":"module","role":"collection","modules":[{"name":"HummingbirdJobs"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdjobs"]}],"sections":[],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[[]]},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","type":"reference","isActive":true},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Setting up Jobs","anchor":"Setting-up-Jobs"},{"inlineContent":[{"text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let jobQueue = HBMemoryJobQueue()"],"type":"codeListing"},{"level":3,"type":"heading","text":"Creating a Job","anchor":"Creating-a-Job"},{"inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"type":"codeVoice","code":"HBJob"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"type":"codeVoice","code":"name"},{"type":"text","text":" and a function "},{"type":"codeVoice","code":"func execute(on:logger)"},{"type":"text","text":". The "},{"type":"codeVoice","code":"name"},{"text":" variable should be unique to this job definition. It is used in the serialisation of the job. The ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" function does the work of the job and returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a ","type":"text"},{"type":"codeVoice","code":"sendEmail()"},{"text":" function.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(logger: Logger) async throws {","        return try await sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Before you can use this job you have to register it.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["SendEmailJob.register()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"push"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job: job)"],"type":"codeListing"},{"level":3,"type":"heading","text":"Processing Jobs","anchor":"Processing-Jobs"},{"inlineContent":[{"type":"text","text":"To process jobs you need to create a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"},{"type":"text","text":". This defines the job queue it should service and how many jobs will be processed concurrently."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","type":"reference"},{"type":"text","text":" conforms to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" from Swift Service Lifecycle so can be added to a "},{"code":"ServiceGroup","type":"codeVoice"}],"type":"paragraph"},{"syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueueHandler],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"type":"codeListing"},{"inlineContent":[{"text":"Or it can be added to the array of jobs that ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" manages","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let app = HBApplication(...)","app.addServices(jobQueueHandler)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you are running your job queue handler on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue"},{"type":"text","text":"."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","url":"\/documentation\/hummingbirdjobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"role":"collection","title":"HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"role":"collection","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","url":"\/documentation\/hummingbirdjobsredis","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"role":"collection","title":"HummingbirdJobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"role":"symbol","title":"HBJob","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"abstract":[{"text":"Protocol for job description","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}],"url":"\/documentation\/hummingbirdjobs\/hbjob","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"HBRedisJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","abstract":[{"type":"text","text":"Redis implementation of job queues"}],"role":"symbol","url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","title":"HBRedisJobQueue","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryJobQueue","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","navigatorTitle":[{"text":"HBMemoryJobQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"role":"symbol","title":"HBMemoryJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueHandler","kind":"identifier"}],"navigatorTitle":[{"text":"HBJobQueueHandler","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","abstract":[{"text":"Object handling a single job queue","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","title":"HBJobQueueHandler","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobInstance":{"navigatorTitle":[{"kind":"identifier","text":"HBJobInstance"}],"title":"HBJobInstance","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobInstance"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance","abstract":[{"text":"Holder for all data related to a job","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobinstance"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueError"}],"navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"abstract":[{"type":"text","text":"Job Queue Error type"}],"kind":"symbol","type":"topic","title":"JobQueueError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}],"navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","abstract":[{"type":"text","text":"Queued job. Includes job, plus the id for the job"}],"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","title":"HBQueuedJob","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"title":"HBJobQueue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"type":"topic","abstract":[{"type":"text","text":"Job queue protocol."}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","abstract":[{"text":"Identifier for Job","type":"text"}],"role":"symbol","url":"\/documentation\/hummingbirdjobs\/jobidentifier","title":"JobIdentifier","type":"topic","kind":"symbol"}}}