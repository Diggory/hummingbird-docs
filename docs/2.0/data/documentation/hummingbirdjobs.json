{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","isActive":true,"type":"reference"},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}]},{"type":"heading","anchor":"Setting-up-Jobs","text":"Setting up Jobs","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"type":"codeListing","syntax":"swift","code":["let jobQueue = HBMemoryJobQueue()"]},{"type":"heading","anchor":"Creating-a-Job","text":"Creating a Job","level":3},{"type":"paragraph","inlineContent":[{"text":"First you must define your job. Create an object that inherits from ","type":"text"},{"code":"HBJob","type":"codeVoice"},{"text":". This protocol requires you to implement a static variable ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" and a function ","type":"text"},{"code":"func execute(on:logger)","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"name","type":"codeVoice"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" function does the work of the job and returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"code":"sendEmail()","type":"codeVoice"},{"type":"text","text":" function."}]},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(logger: Logger) async throws {","        return try await sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Before you can use this job you have to register it.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["SendEmailJob.register()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"push"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job: job)"]},{"type":"heading","anchor":"Processing-Jobs","text":"Processing Jobs","level":3},{"type":"paragraph","inlineContent":[{"text":"To process jobs you need to create a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"},{"text":". This defines the job queue it should service and how many jobs will be processed concurrently.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","type":"reference"},{"type":"text","text":" conforms to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" from Swift Service Lifecycle so can be added to a "},{"code":"ServiceGroup","type":"codeVoice"}]},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueueHandler],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" manages"}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication(...)","app.addServices(jobQueueHandler)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are running your job queue handler on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"kind":"content"}],"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Framework","role":"collection","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}],"externalID":"HummingbirdJobs","title":"HummingbirdJobs"},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobQueueError"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"title":"JobQueueError","type":"topic","abstract":[{"type":"text","text":"Job Queue Error type"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBJobQueue","kind":"identifier"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HBJobQueue","kind":"identifier"}],"abstract":[{"text":"Job queue protocol.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","type":"topic","title":"HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobInstance":{"url":"\/documentation\/hummingbirdjobs\/hbjobinstance","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobInstance","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance","navigatorTitle":[{"text":"HBJobInstance","kind":"identifier"}],"title":"HBJobInstance","type":"topic","abstract":[{"text":"Holder for all data related to a job","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","type":"topic","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBQueuedJob","kind":"identifier"}],"abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"title":"HBQueuedJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","kind":"symbol","navigatorTitle":[{"text":"HBQueuedJob","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"abstract":[{"type":"text","text":"Object handling a single job queue"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueHandler"}],"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HBJobQueueHandler","kind":"identifier"}],"kind":"symbol","title":"HBJobQueueHandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"role":"symbol","abstract":[{"type":"text","text":"Protocol for job description"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjob","title":"HBJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"navigatorTitle":[{"text":"HBJob","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"url":"\/documentation\/hummingbirdjobs","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","title":"HummingbirdJobs","type":"topic","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis/HBRedisJobQueue":{"abstract":[{"text":"Redis implementation of job queues","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis\/HBRedisJobQueue","type":"topic","navigatorTitle":[{"text":"HBRedisJobQueue","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"HBRedisJobQueue","url":"\/documentation\/hummingbirdjobsredis\/hbredisjobqueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRedisJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobsRedis":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobsRedis","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"url":"\/documentation\/hummingbirdjobsredis","title":"HummingbirdJobsRedis","role":"collection","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryJobQueue"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"title":"HBMemoryJobQueue","type":"topic","abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"role":"symbol","abstract":[{"text":"Identifier for Job","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"kind":"symbol","title":"JobIdentifier","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"type":"topic"}}}