{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[[]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"kind":"symbol","metadata":{"title":"HummingbirdJobs","role":"collection","modules":[{"name":"HummingbirdJobs"}],"symbolKind":"module","externalID":"HummingbirdJobs","roleHeading":"Framework"},"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"code":"\/HummingbirdJobsRedis","type":"codeVoice"},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}]},{"anchor":"Setting-up-Jobs","type":"heading","level":3,"text":"Setting up Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"syntax":"swift","type":"codeListing","code":["let jobQueue = HBMemoryJobQueue()"]},{"anchor":"Creating-a-Job","type":"heading","level":3,"text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"code":"HBJob","type":"codeVoice"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"code":"name","type":"codeVoice"},{"type":"text","text":" and a function "},{"code":"func execute(on:logger)","type":"codeVoice"},{"type":"text","text":". The "},{"code":"name","type":"codeVoice"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" function does the work of the job and returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"code":"sendEmail()","type":"codeVoice"},{"type":"text","text":" function."}]},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(logger: Logger) async throws {","        return try await sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"syntax":"swift","type":"codeListing","code":["SendEmailJob.register()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"push"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job: job)"]},{"anchor":"Processing-Jobs","type":"heading","level":3,"text":"Processing Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To process jobs you need to create a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","type":"reference","isActive":true},{"type":"text","text":". This defines the job queue it should service and how many jobs will be processed concurrently."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle so can be added to a "},{"type":"codeVoice","code":"ServiceGroup"}]},{"syntax":"swift","type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueueHandler],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or it can be added to the array of jobs that "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" manages"}]},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication(...)","app.addServices(jobQueueHandler)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are running your job queue handler on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"codeVoice","code":"HummingbirdJobsRedis\/HBRedisJobQueue"},{"type":"text","text":"."}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"abstract":[{"type":"text","text":"Job queue protocol."}],"navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"type":"topic","kind":"symbol","title":"HBJobQueue","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"role":"symbol","url":"\/documentation\/hummingbirdjobs\/jobqueueerror","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueError"}],"abstract":[{"type":"text","text":"Job Queue Error type"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","title":"JobQueueError","navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"title":"HBJob","url":"\/documentation\/hummingbirdjobs\/hbjob","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Protocol for job description"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueHandler"}],"navigatorTitle":[{"kind":"identifier","text":"HBJobQueueHandler"}],"role":"symbol","title":"HBJobQueueHandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler","abstract":[{"type":"text","text":"Object handling a single job queue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"type":"topic","abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"title":"HBQueuedJob","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBQueuedJob","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HBQueuedJob","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobInstance":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobInstance","url":"\/documentation\/hummingbirdjobs\/hbjobinstance","abstract":[{"text":"Holder for all data related to a job","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HBJobInstance","kind":"identifier"}],"title":"HBJobInstance","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBJobInstance","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","type":"topic","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMemoryJobQueue","kind":"identifier"}],"abstract":[{"text":"In memory implementation of job queue driver. Stores jobs in a circular buffer","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","title":"HBMemoryJobQueue","navigatorTitle":[{"text":"HBMemoryJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","type":"topic","kind":"symbol","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"title":"JobIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier","abstract":[{"text":"Identifier for Job","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"role":"collection","url":"\/documentation\/hummingbirdjobs","type":"topic","kind":"symbol","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","title":"HummingbirdJobs"}}}