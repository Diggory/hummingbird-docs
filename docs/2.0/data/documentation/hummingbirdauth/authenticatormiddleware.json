{"metadata":{"role":"symbol","externalID":"s:15HummingbirdAuth23AuthenticatorMiddlewareP","symbolKind":"protocol","title":"AuthenticatorMiddleware","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AuthenticatorMiddleware"}],"modules":[{"name":"HummingbirdAuth"}],"roleHeading":"Protocol","navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}]},"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"]},{"title":"Conforming Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/ClosureAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator"],"type":"conformingTypes","kind":"relationships"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"anchor":"Authenticators","title":"Authenticators","generated":true}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthenticatorMiddleware"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird16RouterMiddlewareP","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","text":"RouterMiddleware","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Context","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","kind":"typeIdentifier","text":"Context"},{"text":" : ","kind":"text"},{"text":"AuthRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","preciseIdentifier":"s:15HummingbirdAuth0B14RequestContextP","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"text":"Requires an ","type":"text"},{"type":"codeVoice","code":"authenticate"},{"text":" function that returns authentication data when successful.","type":"text"},{"type":"text","text":" "},{"text":"If it is unsuccessful then nil should be returned so middleware further down the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"middleware chain can do authentication. If you donâ€™t want any further middleware to"},{"text":" ","type":"text"},{"text":"run then throw an error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To use an authenticator middleware it is required that your request context conform to"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":" so the middleware can attach authentication data to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the"},{"text":" ","type":"text"},{"type":"text","text":"authenticator is successful it returns a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct, otherwise it returns "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct BasicAuthenticator<Context: AuthRequestContext>: AuthenticatorMiddleware {","    func authenticate(request: Request, context: Context) async throws -> User? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database","        guard let user = try await database.getUserWithUsername(basic.username) else {","            return nil","        }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await context.threadPool.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware"]]},"variants":[{"paths":["\/documentation\/hummingbirdauth\/authenticatormiddleware"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","interfaceLanguage":"swift"},"topicSections":[{"title":"Associated Types","generated":true,"anchor":"Associated-Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/Identity"]},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)"],"generated":true}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Context":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Context"}],"required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Context","kind":"symbol","abstract":[],"role":"symbol","type":"topic","title":"Context","url":"\/documentation\/hummingbird\/middlewareprotocol\/context"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)":{"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)","title":"authenticate(request:context:)","type":"topic","kind":"symbol","required":true,"abstract":[{"type":"text","text":"Called by middleware to see if request can authenticate."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"authenticate","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"request"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP8IdentityQa","text":"Identity","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","type":"topic","title":"AuthenticatorMiddleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AuthenticatorMiddleware","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AuthenticatorMiddleware"}],"abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","navigatorTitle":[{"text":"RouterMiddleware","kind":"identifier"}],"kind":"symbol","title":"RouterMiddleware","abstract":[{"text":"Version of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol"},{"text":" whose Input is ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"type":"text","text":" and output is "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"reference","isActive":true},{"type":"text","text":"."}],"role":"symbol","url":"\/documentation\/hummingbird\/routermiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterMiddleware"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","url":"\/documentation\/hummingbirdauth","role":"collection","type":"topic","kind":"symbol","title":"HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","title":"Swift.Sendable"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"title":"IsAuthenticatedMiddleware","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"abstract":[{"type":"text","text":"Middleware returning 401 for unauthenticated requests"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"title":"Response","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","url":"\/documentation\/hummingbirdcore\/response","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Response"}],"navigatorTitle":[{"text":"Response","kind":"identifier"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","kind":"symbol","title":"AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"navigatorTitle":[{"kind":"identifier","text":"AuthRequestContext"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","navigatorTitle":[{"kind":"identifier","text":"MiddlewareProtocol"}],"kind":"symbol","title":"MiddlewareProtocol","abstract":[{"type":"text","text":"Middleware protocol with generic input, context and output types"}],"role":"symbol","url":"\/documentation\/hummingbird\/middlewareprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MiddlewareProtocol"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/ClosureAuthenticator":{"url":"\/documentation\/hummingbirdauth\/closureauthenticator","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ClosureAuthenticator"}],"navigatorTitle":[{"text":"ClosureAuthenticator","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[],"title":"ClosureAuthenticator","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/ClosureAuthenticator"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"kind":"symbol","title":"Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/request","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdBasicAuth/BasicAuthenticator":{"title":"BasicAuthenticator","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","type":"topic","url":"\/documentation\/hummingbirdbasicauth\/basicauthenticator","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicAuthenticator"}],"navigatorTitle":[{"kind":"identifier","text":"BasicAuthenticator"}],"abstract":[{"type":"text","text":"Basic password authenticator"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/Identity":{"abstract":[{"text":"Type to be authenticated","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/identity","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/Identity","title":"Identity","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"Identity","kind":"identifier"}],"kind":"symbol"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionAuthenticator":{"url":"\/documentation\/hummingbirdauth\/sessionauthenticator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SessionAuthenticator"}],"navigatorTitle":[{"kind":"identifier","text":"SessionAuthenticator"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Session authenticator"}],"title":"SessionAuthenticator","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"type":"text","text":"Lightweight, flexible, modern server framework written in Swift."}],"kind":"article","url":"\/documentation\/index","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","title":"Hummingbird","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/AuthenticatorMiddleware":{"title":"Authenticator Middleware","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Request authentication middleware"}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddleware","url":"\/documentation\/hummingbird\/authenticatormiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/identity-swift.property":{"abstract":[{"text":"The authenticated identity","type":"text"}],"role":"symbol","title":"identity","url":"\/documentation\/hummingbirdauth\/authrequestcontext\/identity-swift.property","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"identity","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Identity","preciseIdentifier":"s:15HummingbirdAuth0B14RequestContextP8IdentityQa"},{"text":"?","kind":"text"}],"type":"topic","kind":"symbol","required":true}}}