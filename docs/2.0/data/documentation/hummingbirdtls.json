{"metadata":{"roleHeading":"Framework","externalID":"HummingbirdTLS","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"HummingbirdTLS"}],"role":"collection","symbolKind":"module","title":"HummingbirdTLS"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdTLS provides TLS support via "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel"},{"type":"text","text":". You can add this to your application using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder\/tls(_:tlsConfiguration:)"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Load certificates and private key to construct server TLS configuration","let certificateChain = try NIOSSLCertificate.fromPEMFile(arguments.certificateChain)","let privateKey = try NIOSSLPrivateKey(file: arguments.privateKey, format: .pem)","let tlsConfiguration = TLSConfiguration.makeServerConfiguration(","    certificateChain: certificateChain.map { .certificate($0) },","    privateKey: .privateKey(privateKey)",")","","let router = Router()","let app = Application(","    router: router,","    server: .tls(.http1(), tlsConfiguration: tlsConfiguration)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function "},{"code":"tls","type":"codeVoice"},{"type":"text","text":" can be used to wrap any other child channel in the example above we use it to wrap an HTTP1 channel."}]}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel"],"title":"Structures"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"},"abstract":[{"text":"Add TLS support to Hummingbird server.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdtls"]}],"sections":[],"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2"],"title":"Related Documentation"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS/TLSChannel":{"navigatorTitle":[{"text":"TLSChannel","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TLSChannel","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel","type":"topic","title":"TLSChannel","url":"\/documentation\/hummingbirdtls\/tlschannel","abstract":[{"text":"Sets up child channel to use TLS before accessing base channel setup","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server."}],"title":"HummingbirdHTTP2","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","kind":"symbol","url":"\/documentation\/hummingbirdhttp2","role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","type":"topic","title":"HummingbirdTLS","url":"\/documentation\/hummingbirdtls","abstract":[{"text":"Add TLS support to Hummingbird server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"logo.png":{"alt":null,"type":"image","identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBuilder/tls(_:tlsConfiguration:)":{"url":"\/documentation\/hummingbirdcore\/httpserverbuilder\/tls(_:tlsconfiguration:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tls"},{"kind":"text","text":"("},{"preciseIdentifier":"s:15HummingbirdCore17HTTPServerBuilderV","kind":"typeIdentifier","text":"HTTPServerBuilder"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tlsConfiguration"},{"kind":"text","text":": "},{"preciseIdentifier":"s:6NIOSSL16TLSConfigurationV","kind":"typeIdentifier","text":"TLSConfiguration"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"HTTPServerBuilder","preciseIdentifier":"s:15HummingbirdCore17HTTPServerBuilderV","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder\/tls(_:tlsConfiguration:)","type":"topic","title":"tls(_:tlsConfiguration:)","kind":"symbol","abstract":[{"type":"text","text":"Build server supporting HTTP with TLS"}],"role":"symbol"}}}