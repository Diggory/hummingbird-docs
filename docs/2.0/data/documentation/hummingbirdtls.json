{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdtls"]}],"topicSections":[{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","metadata":{"symbolKind":"module","role":"collection","title":"HummingbirdTLS","roleHeading":"Framework","modules":[{"name":"HummingbirdTLS"}],"externalID":"HummingbirdTLS"},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdTLS adds a single type ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel","isActive":true,"type":"reference"},{"text":". If you want a server to support TLS then build a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel","isActive":true,"type":"reference"},{"text":" with your base channel setup type and a ","type":"text"},{"code":"TLSConfiguration","type":"codeVoice"},{"type":"text","text":" struct from "},{"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","type":"reference","isActive":true},{"type":"text","text":" as parameters."}]},{"syntax":"swift","code":["let http1Channel = HTTP1Channel { _, context in","    let responseBody = channel.allocator.buffer(string: \"Hello\")","    return HBResponse(status: .ok, body: .init(byteBuffer: responseBody))","}","\/\/ Load certificates and private key to construct server TLS configuration","let certificateChain = try NIOSSLCertificate.fromPEMFile(arguments.certificateChain)","let privateKey = try NIOSSLPrivateKey(file: arguments.privateKey, format: .pem)","let tlsConfiguration = TLSConfiguration.makeServerConfiguration(","    certificateChain: certificateChain.map { .certificate($0) },","    privateKey: .privateKey(privateKey)",")","\/\/ Create TLS Channel","let tlsChannel = TLSChannel(http1Channel, tlsConfiguration: tlsConfiguration)","let server = HBServer(","    childChannelSetup: tlsChannel,","    configuration: .init(address: .hostname(port: 8080)),","    eventLoopGroup: eventLoopGroup,","    logger: Logger(label: \"HelloServer\")",")"],"type":"codeListing"}],"kind":"content"}],"abstract":[{"text":"Add TLS support to Hummingbird server","type":"text"}],"references":{"https://github.com/apple/swift-nio-ssl":{"titleInlineContent":[{"type":"text","text":"NIOSSL"}],"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","title":"NIOSSL","url":"https:\/\/github.com\/apple\/swift-nio-ssl","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"title":"HummingbirdCore","type":"topic","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","role":"collection","type":"topic","title":"HummingbirdTLS","abstract":[{"text":"Add TLS support to Hummingbird server","type":"text"}],"url":"\/documentation\/hummingbirdtls"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS/TLSChannel":{"title":"TLSChannel","abstract":[{"text":"Sets up child channel to use TLS before accessing base channel setup","type":"text"}],"navigatorTitle":[{"text":"TLSChannel","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/hummingbirdtls\/tlschannel","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TLSChannel","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS\/TLSChannel"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","type":"topic","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","kind":"symbol","title":"HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2","type":"topic","role":"collection","abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server"}]}}}