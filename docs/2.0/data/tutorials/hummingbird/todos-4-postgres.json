{"metadata":{"category":"Todo backend","categoryPathComponent":"Todos","role":"project","title":"Use PostgresNIO to store your Todos in a Postgres database"},"kind":"project","variants":[{"paths":["\/tutorials\/hummingbird\/todos-4-postgres"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"kind":"hero","content":[{"inlineContent":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"type":"paragraph"}],"chapter":"Store Todos in a database","estimatedTimeInMinutes":20,"title":"Use PostgresNIO to store your Todos in a Postgres database","image":"hummingbird.png","backgroundImage":"hummingbird.png"},{"kind":"tasks","tasks":[{"anchor":"Setup-your-Postgres-database","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Setup a Postgres database to use with the Todos application."}],"type":"paragraph"}],"mediaPosition":"trailing","media":"hummingbird.png","kind":"contentAndMedia"}],"title":"Setup your Postgres database","stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"You’ll need to install postgres on your system if you don’t already have it. Detailed instructions on installing Postgres can be found ","type":"text"},{"type":"reference","identifier":"https:\/\/www.postgresql.org\/download\/","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Once you have installed Postgres follow the instructions on screen to start your Postgres database service.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"todos-postgres-01.sh"},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"The Postgres install comes with "},{"type":"codeVoice","code":"psql"},{"type":"text","text":" the commandline interface to Postgres. We are going to use this to create a new database and a new role."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Note the SQL commands all end in a semi-colon. The "},{"type":"codeVoice","code":"\\c"},{"type":"text","text":" command connects to a database and the "},{"type":"codeVoice","code":"\\q"},{"type":"text","text":" command quits "},{"type":"codeVoice","code":"pqsl"},{"type":"text","text":". You can find out more about "},{"type":"codeVoice","code":"psql"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"code":"todos-postgres-02.sh"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"We return to our project…","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"todos-postgres-03.swift"},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"And add PostgresNIO as a dependency"}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"todos-postgres-04.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s return to ","type":"text"},{"code":"buildApplication(_:)","type":"codeVoice"},{"text":" in Todos.swift…","type":"text"}]}],"caption":[],"type":"step","media":null,"code":"todos-postgres-06.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"And setup a client to connect to Postgres. We are going to use ","type":"text"},{"type":"codeVoice","code":"PostgresClient"},{"text":" from PostgresNIO. The ","type":"text"},{"type":"codeVoice","code":"inMemoryTesting"},{"text":" flag is used to decide on whether we should setup the ","type":"text"},{"type":"codeVoice","code":"PostgresClient"},{"text":". Note the configuration details are the same as the Postgres role we set up earlier.","type":"text"}]}],"caption":[],"type":"step","media":null,"code":"todos-postgres-07.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" sets up background processes that require lifecycle management. You can add a service to "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" to have its lifecycle managed as long as it conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". This is done by adding it to an internally held "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":". More details on "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" can be found in the documentation for "},{"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","isActive":true,"type":"reference"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" does not conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" so we cannot add it as a Service."}]}],"type":"step","media":null,"code":"todos-postgres-08.swift"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Instead we create a wrapper ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" that runs the client and cancels it when a graceful shutdown signal is received.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"todos-postgres-09.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now if we add "},{"type":"codeVoice","code":"PostgresClientService(client: client)"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" the client’s lifecycle is managed."}]}],"caption":[],"type":"step","media":null,"code":"todos-postgres-10.swift"}]},{"anchor":"Setup-a-Postgres-repository","contentSection":[{"media":"hummingbird.png","mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a version of "},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" that uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":"."}]}]}],"title":"Setup a Postgres repository","stepsSection":[{"media":null,"code":"todos-postgres-11.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"We start our Postgres support by creating a type conforming to "},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" that uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" from PostgresNIO. The functions are filled out with dummy code just now so the project will compile."}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-12.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"I won’t go into any great detail about the SQL calls. We will cover how you construct, send calls and parse their results with ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" as we proceed through the tutorial.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"If we are going to be saving our todos to a database we are going to need a table to store them in.","type":"text"}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-13.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Return to Todos.swift…","type":"text"}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-14.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the newly created "},{"type":"codeVoice","code":"TodoPostgresRepository"},{"type":"text","text":" and once the "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" is running call "},{"type":"codeVoice","code":"createTable"},{"type":"text","text":"."}]}],"type":"step"},{"media":null,"code":"todos-postgres-12.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Back to TodoPostgresRepository.swift to start implementing our repository methods."}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-15.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Wait a sec! If you look closer that query looks like it got SQL injection. That’s a classic security issue. Except this isn’t SQL injection the object being constructed is not a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" but a ","type":"text"},{"type":"codeVoice","code":"PostgresQuery"},{"text":" which uses ","type":"text"},{"type":"codeVoice","code":"StringInterpolation"},{"text":" to create parameter bindings for all the interpolated variables.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" method gives you an idea of how the ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" works. You lease a Postgres connection using ","type":"text"},{"code":"withConnection","type":"codeVoice"},{"text":", it runs your queries inside the closure and then releases the connection back to the connection pool once they are done.","type":"text"}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-16.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" method demonstrates how you get data returned from a query. The query returns a sequence of rows. You extract the data from the row by decoding it as a Tuple. In this case there should only be one row so we return immediately as soon as we have it.","type":"text"}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-17.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"code":"list","type":"codeVoice"},{"type":"text","text":" is very similar to "},{"code":"get","type":"codeVoice"},{"type":"text","text":". Except there is no "},{"code":"WHERE","type":"codeVoice"},{"type":"text","text":" clause in the SQL and we return all of the rows returned from the query instead of just the first."}],"type":"paragraph"}],"type":"step"},{"media":null,"code":"todos-postgres-18.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"patch"},{"type":"text","text":" has a complication where we only want to include the non optional values in my "},{"type":"codeVoice","code":"UPDATE"},{"type":"text","text":" query otherwise we’ll be setting database columns to null. The easiest way to do this is build up the "},{"type":"codeVoice","code":"PostgresQuery.StringInterpolation"},{"type":"text","text":" bit by bit but that is quite messy."}]}],"type":"step"},{"media":null,"code":"todos-postgres-19.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"We can get around this by adding a String interpolation function for converting a variadic list of key value pairs into KEY = VALUE, KEY2 = VALUE2 based off if each value was not nil or not. This uses parameter packs, if you want to find out more about them read the ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0393-parameter-packs.md","type":"reference"},{"text":".","type":"text"}]}],"type":"step"},{"media":null,"code":"todos-postgres-20.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally the "},{"code":"delete","type":"codeVoice"},{"type":"text","text":" and "},{"code":"deleteAll","type":"codeVoice"},{"type":"text","text":". This completes the implementation of the Postgres todos repository."}]}],"type":"step"},{"media":null,"code":"todos-postgres-21.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you go to TodosTests.swift…"}]}],"type":"step"},{"media":null,"code":"todos-postgres-22.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"You can switch the ","type":"text"},{"type":"codeVoice","code":"inMemoryTesting"},{"text":" boolean to false to test your Postgres solution.","type":"text"}]}],"type":"step"},{"media":null,"code":null,"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"The code for this tutorial can be found in the "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/2.x.x-todos-tutorial\/todos-postgres-tutuorial"},{"type":"text","text":"."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"That’s us done, we have a working and tested Todos application."}],"type":"paragraph"}],"type":"step"}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"]],"modules":[{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","kind":"task"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application","kind":"task"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"references":{"todos-postgres-08.swift":{"syntax":"swift","identifier":"todos-postgres-08.swift","type":"file","content":["import ArgumentParser","import Hummingbird","@_spi(ConnectionPool) import PostgresNIO","","\/\/\/ Build a HBApplication","func buildApplication(_ args: some AppArguments) async throws -> some HBApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = HBRouter(context: TodoRequestContext.self)","    \/\/ add logging middleware","    router.middlewares.add(HBLogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = HBApplication(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(postgresClient) \/\/ COMPILE ERROR","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift","highlights":[{"line":17},{"line":23},{"line":28},{"line":33},{"line":34},{"line":35}]},"todos-postgres-09.swift":{"syntax":"swift","identifier":"todos-postgres-09.swift","type":"file","content":["import Hummingbird","@_spi(ConnectionPool) import PostgresNIO","import ServiceLifecycle","","\/\/\/ Manage the lifecycle of a PostgresClient","struct PostgresClientService: Service {","    let client: PostgresClient","","    func run() async {","        await cancelOnGracefulShutdown {","            await self.client.run()","        }","    }","}"],"fileName":"PostgresClientService.swift","fileType":"swift","highlights":[]},"todos-postgres-01.sh":{"syntax":"","identifier":"todos-postgres-01.sh","type":"file","content":["> brew install postgresql"],"fileName":"Install Postgress","fileType":"","highlights":[]},"https://github.com/apple/swift-evolution/blob/main/proposals/0393-parameter-packs.md":{"url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0393-parameter-packs.md","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0393-parameter-packs.md","title":"swift-evolution proposal","type":"link","titleInlineContent":[{"text":"swift-evolution proposal","type":"text"}]},"https://www.postgresql.org/docs/current/app-psql.html":{"url":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","title":"here","type":"link","titleInlineContent":[{"text":"here","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","type":"topic","kind":"project","url":"\/tutorials\/hummingbird\/todos-3-testing","estimatedTime":"15min","title":"Testing your application","role":"project","abstract":[{"text":"Test your application using the HummingbirdXCT framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","role":"pseudoSymbol","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","title":"Setup your Postgres database","kind":"section","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}]},"todos-postgres-16.swift":{"syntax":"swift","identifier":"todos-postgres-16.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { ","        try await self.client.withConnection{ connection in","            let stream = try await connection.query(\"\"\"","                SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","                \"\"\", logger: logger","            )","            for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","                return Todo(id: id, title: title, order: order, url: url, completed: completed)","            }","            return nil","        }","    }","}"],"fileName":"TodoPostgresRepository > get(id:).swift","fileType":"swift","highlights":[]},"todos-postgres-12.swift":{"syntax":"swift","identifier":"todos-postgres-12.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        _ = try await client.withConnection { connection in","            connection.query(\"\"\"","                CREATE TABLE IF NOT EXISTS todos (","                    \"id\" uuid PRIMARY KEY,","                    \"title\" text NOT NULL,","                    \"order\" integer,","                    \"completed\" boolean,","                    \"url\" text","                )","                \"\"\",","                logger: logger","            )","        }","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","fileType":"swift","highlights":[]},"todos-postgres-11.swift":{"syntax":"swift","identifier":"todos-postgres-11.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","fileType":"swift","highlights":[]},"https://www.postgresql.org/download/":{"url":"https:\/\/www.postgresql.org\/download\/","identifier":"https:\/\/www.postgresql.org\/download\/","title":"here","type":"link","titleInlineContent":[{"text":"here","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","role":"article","url":"\/tutorials\/todos\/store-todos-in-a-database","title":"Store Todos in a database","kind":"article","abstract":[]},"https://github.com/hummingbird-project/hummingbird-examples/tree/2.x.x-todos-tutorial/todos-postgres-tutuorial":{"url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/2.x.x-todos-tutorial\/todos-postgres-tutuorial","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/2.x.x-todos-tutorial\/todos-postgres-tutuorial","title":"hummingbird-examples repository","type":"link","titleInlineContent":[{"text":"hummingbird-examples repository","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","type":"topic","kind":"project","url":"\/tutorials\/hummingbird\/todos-1-setup","estimatedTime":"5min","title":"Setup a Hummingbird application.","role":"project","abstract":[{"text":"Create a simple web application.","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","role":"article","url":"\/tutorials\/todos\/testing-your-application","title":"Testing your application","kind":"article","abstract":[]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","role":"article","url":"\/tutorials\/todos\/api-setup","title":"API Setup","kind":"article","abstract":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"estimatedTime":"20min","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","title":"Use PostgresNIO to store your Todos in a Postgres database","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"role":"project","kind":"project","url":"\/tutorials\/hummingbird\/todos-4-postgres"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","role":"project","url":"\/tutorials\/hummingbird\/todos-2-api","estimatedTime":"15min","title":"Add your application API","kind":"project","abstract":[{"type":"text","text":"Add some functionality to your app"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Setup-your-project-for-testing":{"type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing","title":"Setup your project for testing","abstract":[{"text":"Test your application using the HummingbirdXCT framework","type":"text"}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Setup-your-project-for-testing"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","title":"Build a Todos application.","abstract":[{"type":"text","text":"This is a tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"role":"overview","kind":"overview","url":"\/tutorials\/todos"},"todos-postgres-19.swift":{"syntax":"swift","identifier":"todos-postgres-19.swift","type":"file","content":["\/\/ UPDATE query","let query: PostgresQuery = \"\"\"","    UPDATE todos SET \\(optionalUpdateFields: ((\"title\", title), (\"order\", order), (\"completed\", completed))) WHERE id = \\(id)","    \"\"\"","","\/\/\/ Append interpolation of a series of fields with optional values for a SQL UPDATE call. ","\/\/\/ If the value is nil it doesn't add the field to the query.","\/\/\/ ","\/\/\/ This call only works if you have more than one field.","mutating func appendInterpolation<each Value: PostgresDynamicTypeEncodable>(optionalUpdateFields fields: (repeat (String, Optional<each Value>))) {","    func appendSelect(id: String, value: Optional<some PostgresDynamicTypeEncodable>, first: Bool) -> Bool {","        if let value {","            self.appendInterpolation(unescaped: \"\\(first ? \"\": \", \")\\(id) = \")","            self.appendInterpolation(value)","            return false","        }","        return first","    }","    var first: Bool = true \/\/ indicates whether we should prefix with a comma","    repeat (","        first = appendSelect(id: (each fields).0, value: (each fields).1, first: first)","    )","}"],"fileName":"TodoPostgresRepository > appendInterpolation.swift","fileType":"swift","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","title":"Todo Controller and Repository","role":"pseudoSymbol","abstract":[{"text":"Add some functionality to your app","type":"text"}]},"todos-postgres-18.swift":{"syntax":"swift","identifier":"todos-postgres-18.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        return try await self.client.withConnection{ connection in ","            \/\/ UPDATE query","            let query: PostgresQuery = \"\"\"","                UPDATE todos SET \\(optionalUpdateFields: ((\"title\", title), (\"order\", order), (\"completed\", completed))) WHERE id = \\(id)","                \"\"\"","            \/\/ if bind count is 1 then we aren't updating anything. Return nil","            if query.binds.count == 1 {","                return nil","            }","            _ = try await connection.query(query, logger: logger","            )","            \/\/ SELECT so I can get the full details of the TODO back","            let stream = try await connection.query(\"\"\"","                SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","                \"\"\", logger: logger","            )","            for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","                return Todo(id: id, title: title, order: order, url: url, completed: completed)","            }","            return nil","        }","    }","}"],"fileName":"TodoPostgresRepository > patch(id:).swift","fileType":"swift","highlights":[]},"todos-postgres-02.sh":{"syntax":"","identifier":"todos-postgres-02.sh","type":"file","content":["> psql postgres","psql (14.10 (Homebrew))","Type \"help\" for help.","","postgres=# create database hummingbird;","CREATE DATABASE","postgres=# \\c hummingbird","You are now connected to database \"hummingbird\" as user \"user\".","hummingbird=# create role todos createrole login password 'todos';","CREATE ROLE","hummingbird=# \\q"],"fileName":"Setup Postgress","fileType":"","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Extend-your-Application":{"type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","title":"Extend your Application","abstract":[{"type":"text","text":"Create a simple web application."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/hummingbird\/todos-1-setup#Extend-your-Application"},"todos-postgres-15.swift":{"syntax":"swift","identifier":"todos-postgres-15.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        _ = try await client.withConnection { connection in","            connection.query(\"\"\"","                CREATE TABLE IF NOT EXISTS todos (","                    \"id\" uuid PRIMARY KEY,","                    \"title\" text NOT NULL,","                    \"order\" integer,","                    \"completed\" boolean,","                    \"url\" text","                )","                \"\"\",","                logger: logger","            )","        }","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        _ = try await self.client.withConnection{ connection in ","            try await connection.query(","                \"INSERT INTO todos (id, title, url, \\\"order\\\") VALUES (\\(id), \\(title), \\(url), \\(order));\", ","                logger: logger","            )","        }","        return Todo(id: id, title: title, order: order, url: url, completed: nil)","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"todos-postgres-13.swift":{"syntax":"swift","identifier":"todos-postgres-13.swift","type":"file","content":["import ArgumentParser","import Hummingbird","@_spi(ConnectionPool) import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a HBApplication","func buildApplication(_ args: some AppArguments) async throws -> some HBApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = HBRouter(context: TodoRequestContext.self)","    \/\/ add logging middleware","    router.middlewares.add(HBLogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = HBApplication(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(PostgresClientService(client: postgresClient))","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift","highlights":[]},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","title":"Swift Service Lifecycle","type":"link","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}]},"todos-postgres-07.swift":{"syntax":"swift","identifier":"todos-postgres-07.swift","type":"file","content":["import ArgumentParser","import Hummingbird","@_spi(ConnectionPool) import PostgresNIO","","\/\/\/ Build a HBApplication","func buildApplication(_ args: some AppArguments) async throws -> some HBApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = HBRouter(context: TodoRequestContext.self)","    \/\/ add logging middleware","    router.middlewares.add(HBLogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = HBApplication(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"fileName":"Todos.swift","fileType":"swift","highlights":[{"line":3},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Setup-your-project":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-1-setup#Setup-your-project","title":"Setup your project","role":"pseudoSymbol","abstract":[{"text":"Create a simple web application.","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-you-application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-you-application","title":"Test you application","role":"pseudoSymbol","abstract":[{"text":"Test your application using the HummingbirdXCT framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","title":"Setup a Postgres repository","role":"pseudoSymbol","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","title":"Testing your application with curl","role":"pseudoSymbol","abstract":[{"text":"Add some functionality to your app","type":"text"}]},"todos-postgres-03.swift":{"syntax":"swift","identifier":"todos-postgres-03.swift","type":"file","content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", branch: \"2.x.x\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdFoundation\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdXCT\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileName":"Package.swift","fileType":"swift","highlights":[]},"todos-postgres-20.swift":{"syntax":"swift","identifier":"todos-postgres-20.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        return try await self.client.withConnection{ connection in","            let selectStream = try await connection.query(\"\"\"","                SELECT \"id\" FROM todos WHERE \"id\" = \\(id)","                \"\"\", logger: logger","            )","            \/\/ if we didn't find the item with this id then return false","            if try await selectStream.decode((UUID).self, context: .default).first(where: { _ in true} ) == nil {","                return false","            }","            _ = try await connection.query(\"DELETE FROM todos WHERE id = \\(id);\", logger: logger)","            return true","        }","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        return try await self.client.withConnection{ connection in","            try await connection.query(\"DELETE FROM todos;\", logger: logger)","        }","    }","}"],"fileName":"TodoPostgresRepository > delete.swift","fileType":"swift","highlights":[]},"todos-postgres-04.swift":{"syntax":"swift","identifier":"todos-postgres-04.swift","type":"file","content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", branch: \"2.x.x\"),","        .package(url: \"https:\/\/github.com\/vapor\/postgres-nio.git\", from: \"1.20.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdFoundation\", package: \"hummingbird\"),","                .product(name: \"PostgresNIO\", package: \"postgres-nio\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdXCT\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileName":"Package.swift","fileType":"swift","highlights":[{"line":10},{"line":19}]},"todos-postgres-14.swift":{"syntax":"swift","identifier":"todos-postgres-14.swift","type":"file","content":["import ArgumentParser","import Hummingbird","@_spi(ConnectionPool) import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a HBApplication","func buildApplication(_ args: some AppArguments) async throws -> some HBApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = HBRouter(context: TodoRequestContext.self)","    \/\/ add logging middleware","    router.middlewares.add(HBLogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    var postgresRepository: TodoPostgresRepository?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        let repository = TodoPostgresRepository(client: client, logger: logger)","        postgresRepository = repository","        TodoController(repository: repository).addRoutes(to: router.group(\"todos\"))","    } else {","        TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    }","    let staticPostgresRepository = postgresRepository","    \/\/ create application","    var app = HBApplication(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        onServerRunning: { _ in","            try? await staticPostgresRepository?.createTable()","        },","        logger: logger","    )","    if let postgresRepository {","        app.addServices(PostgresClientService(client: postgresRepository.client))","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":36},{"line":37},{"line":38},{"line":41},{"line":42}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-setup":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","title":"Application setup","abstract":[],"role":"article","kind":"article","url":"\/tutorials\/todos\/application-setup"},"hummingbird.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/hummingbird.png"}],"identifier":"hummingbird.png","type":"image","alt":"Hummingbird logo"},"todos-postgres-17.swift":{"syntax":"swift","identifier":"todos-postgres-17.swift","type":"file","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ List all todos","    func list() async throws -> [Todo] { ","        try await self.client.withConnection { connection in","            let stream = try await connection.query(\"\"\"","                SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos","                \"\"\", logger: logger","            )","            var todos: [Todo] = []","            for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","                let todo = Todo(id: id, title: title, order: order, url: url, completed: completed)","                todos.append(todo)","            }","            return todos","        }","    }","}"],"fileName":"TodoPostgresRepository > list().swift","fileType":"swift","highlights":[]},"todos-postgres-10.swift":{"syntax":"swift","identifier":"todos-postgres-10.swift","type":"file","content":["import ArgumentParser","import Hummingbird","@_spi(ConnectionPool) import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a HBApplication","func buildApplication(_ args: some AppArguments) async throws -> some HBApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = HBRouter(context: TodoRequestContext.self)","    \/\/ add logging middleware","    router.middlewares.add(HBLogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = HBApplication(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(PostgresClientService(client: postgresClient))","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift","highlights":[]},"todos-postgres-06.swift":{"syntax":"swift","identifier":"todos-postgres-06.swift","type":"file","content":["import ArgumentParser","import Hummingbird","","\/\/\/ Build a HBApplication","func buildApplication(_ args: some AppArguments) async throws -> some HBApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = HBRouter(context: TodoRequestContext.self)","    \/\/ add logging middleware","    router.middlewares.add(HBLogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = HBApplication(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"fileName":"Todos.swift","fileType":"swift","highlights":[]},"todos-postgres-21.swift":{"syntax":"swift","identifier":"todos-postgres-21.swift","type":"file","content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdXCT","import XCTest","","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }",""],"fileName":"TodosTests.swift","fileType":"swift","highlights":[]},"todos-postgres-22.swift":{"syntax":"swift","identifier":"todos-postgres-22.swift","type":"file","content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdXCT","import XCTest","","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = false","    }",""],"fileName":"TodosTests.swift","fileType":"swift","highlights":[{"line":12}]}}}