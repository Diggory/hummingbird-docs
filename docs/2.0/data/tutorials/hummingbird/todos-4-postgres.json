{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"]],"modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","kind":"task"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing"}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}]}]},"kind":"project","variants":[{"paths":["\/tutorials\/hummingbird\/todos-4-postgres"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"estimatedTimeInMinutes":20,"kind":"hero","chapter":"Store Todos in a database","content":[{"inlineContent":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"type":"paragraph"}],"image":"hummingbird.png","backgroundImage":"hummingbird.png","title":"Use PostgresNIO to store your Todos in a Postgres database"},{"kind":"tasks","tasks":[{"title":"Setup your Postgres database","contentSection":[{"mediaPosition":"trailing","media":"hummingbird.png","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Setup a Postgres database to use with the Todos application."}],"type":"paragraph"}]}],"anchor":"Setup-your-Postgres-database","stepsSection":[{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-01.sh","content":[{"inlineContent":[{"type":"text","text":"You’ll need to install postgres on your system if you don’t already have it. Detailed instructions on installing Postgres can be found "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.postgresql.org\/download\/"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Once you have installed Postgres follow the instructions on screen to start your Postgres database service."}],"type":"paragraph"}]},{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-02.sh","content":[{"inlineContent":[{"text":"The Postgres install comes with ","type":"text"},{"type":"codeVoice","code":"psql"},{"text":" the commandline interface to Postgres. We are going to use this to create a new database and a new role.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Note the SQL commands all end in a semi-colon. The ","type":"text"},{"code":"\\c","type":"codeVoice"},{"text":" command connects to a database and the ","type":"text"},{"code":"\\q","type":"codeVoice"},{"text":" command quits ","type":"text"},{"code":"pqsl","type":"codeVoice"},{"text":". You can find out more about ","type":"text"},{"code":"psql","type":"codeVoice"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We return to our project…"}]}],"caption":[]},{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And add PostgresNIO as a dependency"}]}],"caption":[]},{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s return to "},{"code":"buildApplication(_:)","type":"codeVoice"},{"type":"text","text":" in Todos.swift…"}]}],"caption":[]},{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-07.swift","content":[{"inlineContent":[{"text":"And setup a client to connect to Postgres. We are going to use ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" from PostgresNIO. The ","type":"text"},{"code":"inMemoryTesting","type":"codeVoice"},{"text":" flag is used to decide on whether we should setup the ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":". Note the configuration details are the same as the Postgres role we set up earlier.","type":"text"}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"media":null,"type":"step","code":"todos-postgres-08.swift","content":[{"type":"paragraph","inlineContent":[{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" sets up background processes that require lifecycle management. You can add a service to "},{"code":"Application","type":"codeVoice"},{"type":"text","text":" to have its lifecycle managed as long as it conforms to "},{"code":"Service","type":"codeVoice"},{"type":"text","text":". This is done by adding it to an internally held "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":". More details on "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":" can be found in the documentation for "},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"type":"text","text":"."}]}],"caption":[]}]},{"title":"Setup a Postgres repository","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Implement a version of "},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" that uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"contentAndMedia","media":"hummingbird.png","mediaPosition":"trailing"}],"anchor":"Setup-a-Postgres-repository","stepsSection":[{"type":"step","content":[{"inlineContent":[{"type":"text","text":"We start our Postgres support by creating a type conforming to "},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" that uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" from PostgresNIO. The functions are filled out with dummy code just now so the project will compile."}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-11.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"If we are going to be saving our todos to a database we are going to need a table to store them in."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"I won’t go into any great detail about the SQL calls. That is not the purpose of this tutorial. We will cover how you construct, send calls and parse their results with "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" as we proceed through the tutorial."}],"type":"paragraph"}],"media":null,"code":"todos-postgres-12.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Return to Todos.swift…","type":"text"}]}],"caption":[],"media":null,"code":"todos-postgres-13.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Use the newly created "},{"type":"codeVoice","code":"TodoPostgresRepository"},{"type":"text","text":" and once the "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" is running call "},{"type":"codeVoice","code":"createTable"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-14.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Back to TodoPostgresRepository.swift to start implementing our repository methods."}]}],"caption":[],"media":null,"code":"todos-postgres-12.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" method gives you an idea of how the ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" works. You lease a Postgres connection using ","type":"text"},{"code":"withConnection","type":"codeVoice"},{"text":", it runs your queries inside the closure and then releases the connection back to the connection pool once they are done.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wait a sec! If you look closer that query looks like it’s got SQL injection. That’s a classic security issue. Except this isn’t the case here. The object being constructed is not a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" but a "},{"type":"codeVoice","code":"PostgresQuery"},{"type":"text","text":" which uses "},{"type":"codeVoice","code":"StringInterpolation"},{"type":"text","text":" to create parameter bindings for all the interpolated variables."}]}],"media":null,"code":"todos-postgres-15.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" method demonstrates how you get data returned from a query. The query returns a sequence of rows. You extract the data from the row by decoding it as a tuple. In this case there should only be one row so we return immediately as soon as we have it.","type":"text"}]}],"caption":[],"media":null,"code":"todos-postgres-16.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"code":"list","type":"codeVoice"},{"text":" is very similar to ","type":"text"},{"code":"get","type":"codeVoice"},{"text":". Except there is no ","type":"text"},{"code":"WHERE","type":"codeVoice"},{"text":" clause in the SQL and we return all of the rows returned from the query instead of just the first.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-17.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"codeVoice","code":"patch"},{"type":"text","text":" has a complication where we only want to include the non optional values in the "},{"type":"codeVoice","code":"UPDATE"},{"type":"text","text":" query otherwise we’ll be setting database columns to null. You could do this dynamically and build a "},{"type":"codeVoice","code":"PostgresQuery.StringInterpolation"},{"type":"text","text":" bit by bit but it is safer just to provide the full query strings for each situation."}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-18.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"And finally the ","type":"text"},{"type":"codeVoice","code":"delete"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"deleteAll"},{"text":" functions. This completes the implementation of the Postgres todos repository.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-20.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"If you go to TodosTests.swift…"}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-21.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"You can switch the ","type":"text"},{"code":"inMemoryTesting","type":"codeVoice"},{"text":" boolean to false to test your Postgres solution.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-postgres-22.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"That’s us done, we have a working and tested Todos application.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"The code for this tutorial can be found in the ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/2.x.x\/todos-postgres-tutuorial","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":null,"runtimePreview":null}]}]}],"metadata":{"categoryPathComponent":"Todos","category":"Todo backend","role":"project","title":"Use PostgresNIO to store your Todos in a Postgres database"},"references":{"todos-postgres-04.swift":{"fileType":"swift","identifier":"todos-postgres-04.swift","syntax":"swift","content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0-alpha.1\"),","        .package(url: \"https:\/\/github.com\/vapor\/postgres-nio.git\", from: \"1.21.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"PostgresNIO\", package: \"postgres-nio\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileName":"Package.swift","highlights":[{"line":10},{"line":18}],"type":"file"},"https://www.postgresql.org/download/":{"url":"https:\/\/www.postgresql.org\/download\/","identifier":"https:\/\/www.postgresql.org\/download\/","titleInlineContent":[{"type":"text","text":"here"}],"title":"here","type":"link"},"todos-postgres-21.swift":{"fileType":"swift","identifier":"todos-postgres-21.swift","syntax":"swift","content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }",""],"fileName":"TodosTests.swift","highlights":[],"type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Setup-your-project-for-testing":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Setup-your-project-for-testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing","title":"Setup your project for testing","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section"},"https://www.postgresql.org/docs/current/app-psql.html":{"identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","url":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","title":"here","type":"link","titleInlineContent":[{"text":"here","type":"text"}]},"todos-postgres-16.swift":{"identifier":"todos-postgres-16.swift","fileName":"TodoPostgresRepository > get(id:).swift","highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { ","        try await self.client.query(\"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","            \"\"\", logger: logger","        )","        for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            return Todo(id: id, title: title, order: order, url: url, completed: completed)","        }","        return nil","    }","}"],"type":"file","syntax":"swift","fileType":"swift"},"todos-postgres-17.swift":{"fileType":"swift","identifier":"todos-postgres-17.swift","syntax":"swift","content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ List all todos","    func list() async throws -> [Todo] { ","        let stream = try await self.client.query(\"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos","            \"\"\", logger: logger","        )","        var todos: [Todo] = []","        for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            let todo = Todo(id: id, title: title, order: order, url: url, completed: completed)","            todos.append(todo)","        }","        return todos","    }","}"],"fileName":"TodoPostgresRepository > list().swift","highlights":[],"type":"file"},"todos-postgres-08.swift":{"identifier":"todos-postgres-08.swift","fileName":"Todos.swift","highlights":[{"line":17},{"line":23},{"line":28},{"line":33},{"line":34},{"line":35}],"content":["import ArgumentParser","import Hummingbird","import PostgresNIO","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(postgresClient)","    }","    return app","}"],"type":"file","syntax":"swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Setup-your-project":{"url":"\/tutorials\/hummingbird\/todos-1-setup#Setup-your-project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","title":"Setup your project","abstract":[{"text":"Create a simple web application.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section"},"todos-postgres-13.swift":{"identifier":"todos-postgres-13.swift","fileName":"Todos.swift","highlights":[],"content":["import ArgumentParser","import Hummingbird","import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(postgresClient)","    }","    return app","}"],"type":"file","syntax":"swift","fileType":"swift"},"todos-postgres-18.swift":{"identifier":"todos-postgres-18.swift","fileName":"TodoPostgresRepository > patch(id:).swift","highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        let query: PostgresQuery","        \/\/ UPDATE query. Work out query based on whick values are not nil","        \/\/ The string interpolations are building a PostgresQuery with bindings and is safe from sql injection","        if let title {","            if let order {","                if let completed {","                    query = \"UPDATE todos SET title = \\(title), order = \\(order), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET title = \\(title), order = \\(order) WHERE id = \\(id)\"","                }","            } else {","                if let completed {","                    query = \"UPDATE todos SET title = \\(title), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET title = \\(title) WHERE id = \\(id)\"","                }","            }","        } else {","            if let order {","                if let completed {","                    query = \"UPDATE todos SET order = \\(order), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET order = \\(order) WHERE id = \\(id)\"","                }","            } else {","                if let completed {","                    query = \"UPDATE todos SET completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    return nil","                }","            }","        }","        _ = try await self.client.query(query, logger: self.logger)","","        \/\/ SELECT so I can get the full details of the TODO back","        \/\/ The string interpolation is building a PostgresQuery with bindings and is safe from sql injection","        let stream = try await self.client.query(","            \"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","            \"\"\",","            logger: self.logger","        )","        for try await(id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            return Todo(id: id, title: title, order: order, url: url, completed: completed)","        }","        return nil","    }","}"],"type":"file","syntax":"swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"url":"\/tutorials\/todos\/api-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","title":"API Setup","abstract":[],"kind":"article","role":"article","type":"topic"},"todos-postgres-12.swift":{"fileType":"swift","identifier":"todos-postgres-12.swift","syntax":"swift","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        _ = try await client.withConnection { connection in","            connection.query(\"\"\"","                CREATE TABLE IF NOT EXISTS todos (","                    \"id\" uuid PRIMARY KEY,","                    \"title\" text NOT NULL,","                    \"order\" integer,","                    \"completed\" boolean,","                    \"url\" text","                )","                \"\"\",","                logger: logger","            )","        }","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","highlights":[],"type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"url":"\/tutorials\/todos\/store-todos-in-a-database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","title":"Store Todos in a database","abstract":[],"kind":"article","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Extend-your-Application":{"role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","kind":"section","url":"\/tutorials\/hummingbird\/todos-1-setup#Extend-your-Application","type":"section","title":"Extend your Application","abstract":[{"text":"Create a simple web application.","type":"text"}]},"todos-postgres-22.swift":{"identifier":"todos-postgres-22.swift","fileName":"TodosTests.swift","highlights":[{"line":12}],"content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = false","    }",""],"type":"file","syntax":"swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"role":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","kind":"project","url":"\/tutorials\/hummingbird\/todos-2-api","type":"topic","title":"Add your application API","abstract":[{"text":"Add some functionality to your app","type":"text"}],"estimatedTime":"15min"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup":{"role":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","kind":"project","url":"\/tutorials\/hummingbird\/todos-1-setup","type":"topic","title":"Setup a Hummingbird application.","abstract":[{"text":"Create a simple web application.","type":"text"}],"estimatedTime":"5min"},"todos-postgres-03.swift":{"identifier":"todos-postgres-03.swift","fileName":"Package.swift","highlights":[],"content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0-alpha.1\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"type":"file","syntax":"swift","fileType":"swift"},"https://github.com/hummingbird-project/hummingbird-examples/tree/2.x.x/todos-postgres-tutuorial":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/2.x.x\/todos-postgres-tutuorial","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/2.x.x\/todos-postgres-tutuorial","title":"hummingbird-examples repository","type":"link","titleInlineContent":[{"text":"hummingbird-examples repository","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"kind":"overview","role":"overview","title":"Build a Todos application.","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"url":"\/tutorials\/todos"},"todos-postgres-02.sh":{"identifier":"todos-postgres-02.sh","fileName":"Setup Postgress","highlights":[],"content":["> psql postgres","psql (14.10 (Homebrew))","Type \"help\" for help.","","postgres=# create database hummingbird;","CREATE DATABASE","postgres=# \\c hummingbird","You are now connected to database \"hummingbird\" as user \"user\".","hummingbird=# create role todos createrole login password 'todos';","CREATE ROLE","hummingbird=# \\q"],"type":"file","syntax":"","fileType":""},"todos-postgres-15.swift":{"fileType":"swift","identifier":"todos-postgres-15.swift","syntax":"swift","content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        try await self.client.query(\"\"\"","            CREATE TABLE IF NOT EXISTS todos (","                \"id\" uuid PRIMARY KEY,","                \"title\" text NOT NULL,","                \"order\" integer,","                \"completed\" boolean,","                \"url\" text","            )","            \"\"\",","            logger: logger","        )","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        try await self.client.query(","            \"INSERT INTO todos (id, title, url, \\\"order\\\") VALUES (\\(id), \\(title), \\(url), \\(order));\", ","            logger: logger","        )","        return Todo(id: id, title: title, order: order, url: url, completed: nil)","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","highlights":[{"line":2},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"estimatedTime":"20min","url":"\/tutorials\/hummingbird\/todos-4-postgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","title":"Use PostgresNIO to store your Todos in a Postgres database","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"project","role":"project","type":"topic"},"todos-postgres-07.swift":{"identifier":"todos-postgres-07.swift","fileName":"Todos.swift","highlights":[{"line":3},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}],"content":["import ArgumentParser","import Hummingbird","import PostgresNIO","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"type":"file","syntax":"swift","fileType":"swift"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","title":"Swift Service Lifecycle","type":"link","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}]},"hummingbird.png":{"identifier":"hummingbird.png","type":"image","variants":[{"url":"\/images\/hummingbird.png","traits":["1x","light"]}],"alt":"Hummingbird logo"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","title":"Setup a Postgres repository","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","title":"Setup your Postgres database","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-setup":{"url":"\/tutorials\/todos\/application-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","title":"Application setup","abstract":[],"kind":"article","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","title":"Testing your application with curl","abstract":[{"type":"text","text":"Add some functionality to your app"}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","kind":"article","url":"\/tutorials\/todos\/testing-your-application","type":"topic","title":"Testing your application","abstract":[]},"todos-postgres-20.swift":{"identifier":"todos-postgres-20.swift","fileName":"TodoPostgresRepository > delete.swift","highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        let selectStream = try await self.client.query(\"\"\"","            SELECT \"id\" FROM todos WHERE \"id\" = \\(id)","            \"\"\", logger: logger","        )","        \/\/ if we didn't find the item with this id then return false","        if try await selectStream.decode((UUID).self, context: .default).first(where: { _ in true} ) == nil {","            return false","        }","        _ = try await connection.query(\"DELETE FROM todos WHERE id = \\(id);\", logger: logger)","        return true","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        try await self.client.query(\"DELETE FROM todos;\", logger: logger)","    }","}"],"type":"file","syntax":"swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","title":"Todo Controller and Repository","abstract":[{"type":"text","text":"Add some functionality to your app"}],"kind":"section","role":"pseudoSymbol","type":"section"},"todos-postgres-14.swift":{"identifier":"todos-postgres-14.swift","fileName":"Todos.swift","highlights":[{"line":18},{"line":19},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"content":["import ArgumentParser","import Hummingbird","import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    var postgresRepository: TodoPostgresRepository?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        let repository = TodoPostgresRepository(client: client, logger: logger)","        postgresRepository = repository","        TodoController(repository: repository).addRoutes(to: router.group(\"todos\"))","    } else {","        TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    }","    \/\/ create application","    var app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    \/\/ if we setup a postgres service then add as a service and run createTable before","    \/\/ server starts","    if let postgresRepository {","        app.addServices(postgresRepository.client)","        app.runBeforeServerStart {","            try await postgresRepository.createTable()","        }","    }","    return app","}"],"type":"file","syntax":"swift","fileType":"swift"},"todos-postgres-11.swift":{"identifier":"todos-postgres-11.swift","fileName":"TodoPostgresRepository.swift","highlights":[],"content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"type":"file","syntax":"swift","fileType":"swift"},"todos-postgres-06.swift":{"identifier":"todos-postgres-06.swift","fileName":"Todos.swift","highlights":[],"content":["import ArgumentParser","import Hummingbird","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"type":"file","syntax":"swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-you-application":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Test-you-application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application","title":"Test you application","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"section","role":"pseudoSymbol","type":"section"},"todos-postgres-01.sh":{"identifier":"todos-postgres-01.sh","fileName":"Install Postgress","highlights":[],"content":["> brew install postgresql"],"type":"file","syntax":"","fileType":""},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"estimatedTime":"15min","url":"\/tutorials\/hummingbird\/todos-3-testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","title":"Testing your application","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"project","role":"project","type":"topic"}}}