{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","interfaceLanguage":"swift"},"metadata":{"role":"project","category":"Todo backend","title":"Use PostgresNIO to store your Todos in a Postgres database","categoryPathComponent":"Todos"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-4-postgres"]}],"hierarchy":{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"]],"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"}]},"kind":"project","sections":[{"title":"Use PostgresNIO to store your Todos in a Postgres database","backgroundImage":"hummingbird.png","content":[{"type":"paragraph","inlineContent":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}]}],"kind":"hero","estimatedTimeInMinutes":20,"image":"hummingbird.png","chapter":"Store Todos in a database"},{"tasks":[{"title":"Setup your Postgres database","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Setup a Postgres database to use with the Todos application."}]}],"mediaPosition":"trailing","kind":"contentAndMedia","media":"hummingbird.png"}],"anchor":"Setup-your-Postgres-database","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You’ll need to install postgres on your system if you don’t already have it. Detailed instructions on installing Postgres can be found ","type":"text"},{"identifier":"https:\/\/www.postgresql.org\/download\/","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Once you have installed Postgres follow the instructions on screen to start your Postgres database service.","type":"text"}]}],"code":"todos-postgres-01.sh","runtimePreview":null,"media":null,"type":"step"},{"content":[{"inlineContent":[{"text":"The Postgres install comes with ","type":"text"},{"type":"codeVoice","code":"psql"},{"text":" the commandline interface to Postgres. We are going to use this to create a new database and a new role.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Note the SQL commands all end in a semi-colon. The "},{"type":"codeVoice","code":"\\c"},{"type":"text","text":" command connects to a database and the "},{"type":"codeVoice","code":"\\q"},{"type":"text","text":" command quits "},{"type":"codeVoice","code":"pqsl"},{"type":"text","text":". You can find out more about "},{"type":"codeVoice","code":"psql"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"todos-postgres-02.sh","runtimePreview":null,"media":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"We return to our project…","type":"text"}]}],"caption":[],"code":"todos-postgres-03.swift","runtimePreview":null,"media":null,"type":"step"},{"content":[{"inlineContent":[{"text":"And add PostgresNIO as a dependency","type":"text"}],"type":"paragraph"}],"caption":[],"code":"todos-postgres-04.swift","runtimePreview":null,"media":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s return to ","type":"text"},{"code":"buildApplication(_:)","type":"codeVoice"},{"text":" in Todos.swift…","type":"text"}]}],"caption":[],"code":"todos-postgres-06.swift","runtimePreview":null,"media":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And setup a client to connect to Postgres. We are going to use "},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" from PostgresNIO. The "},{"code":"inMemoryTesting","type":"codeVoice"},{"type":"text","text":" flag is used to decide on whether we should setup the "},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":". Note the configuration details are the same as the Postgres role we set up earlier."}]}],"caption":[],"code":"todos-postgres-07.swift","runtimePreview":null,"media":null,"type":"step"},{"content":[{"inlineContent":[{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" sets up background processes that require lifecycle management. You can add a service to "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" to have its lifecycle managed as long as it conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". This is done by adding it to an internally held "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":". More details on "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" can be found in the documentation for "},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"code":"todos-postgres-08.swift","runtimePreview":null,"media":null,"type":"step"}]},{"title":"Setup a Postgres repository","contentSection":[{"content":[{"inlineContent":[{"text":"Implement a version of ","type":"text"},{"type":"codeVoice","code":"TodoRepository"},{"text":" that uses ","type":"text"},{"type":"codeVoice","code":"PostgresClient"},{"text":".","type":"text"}],"type":"paragraph"}],"media":"hummingbird.png","mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Setup-a-Postgres-repository","stepsSection":[{"runtimePreview":null,"code":"todos-postgres-11.swift","content":[{"inlineContent":[{"text":"We start our Postgres support by creating a type conforming to ","type":"text"},{"code":"TodoRepository","type":"codeVoice"},{"text":" that uses ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" from PostgresNIO. The functions are filled out with dummy code just now so the project will compile.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we are going to be saving our todos to a database we are going to need a table to store them in."}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"I won’t go into any great detail about the SQL calls. That is not the purpose of this tutorial. We will cover how you construct, send calls and parse their results with ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" as we proceed through the tutorial.","type":"text"}]}],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-13.swift","content":[{"inlineContent":[{"text":"Return to Todos.swift…","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-14.swift","content":[{"inlineContent":[{"type":"text","text":"Use the newly created "},{"code":"TodoPostgresRepository","type":"codeVoice"},{"type":"text","text":" and once the "},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" is running call "},{"code":"createTable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-12.swift","content":[{"inlineContent":[{"type":"text","text":"Back to TodoPostgresRepository.swift to start implementing our repository methods."}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-15.swift","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" method gives you an idea of how the ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" works. You lease a Postgres connection using ","type":"text"},{"code":"withConnection","type":"codeVoice"},{"text":", it runs your queries inside the closure and then releases the connection back to the connection pool once they are done.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Wait a sec! If you look closer that query looks like it’s got SQL injection. That’s a classic security issue. Except this isn’t the case here. The object being constructed is not a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" but a "},{"type":"codeVoice","code":"PostgresQuery"},{"type":"text","text":" which uses "},{"type":"codeVoice","code":"StringInterpolation"},{"type":"text","text":" to create parameter bindings for all the interpolated variables."}],"type":"paragraph"}],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-16.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"get","type":"codeVoice"},{"type":"text","text":" method demonstrates how you get data returned from a query. The query returns a sequence of rows. You extract the data from the row by decoding it as a tuple. In this case there should only be one row so we return immediately as soon as we have it."}]}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-17.swift","content":[{"inlineContent":[{"type":"codeVoice","code":"list"},{"type":"text","text":" is very similar to "},{"type":"codeVoice","code":"get"},{"type":"text","text":". Except there is no "},{"type":"codeVoice","code":"WHERE"},{"type":"text","text":" clause in the SQL and we return all of the rows returned from the query instead of just the first."}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-18.swift","content":[{"inlineContent":[{"type":"codeVoice","code":"patch"},{"text":" has a complication where we only want to include the non optional values in the ","type":"text"},{"type":"codeVoice","code":"UPDATE"},{"text":" query otherwise we’ll be setting database columns to null. You could do this dynamically and build a ","type":"text"},{"type":"codeVoice","code":"PostgresQuery.StringInterpolation"},{"text":" bit by bit but it is safer just to provide the full query strings for each situation.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-20.swift","content":[{"type":"paragraph","inlineContent":[{"text":"And finally the ","type":"text"},{"type":"codeVoice","code":"delete"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"deleteAll"},{"text":" functions. This completes the implementation of the Postgres todos repository.","type":"text"}]}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-21.swift","content":[{"type":"paragraph","inlineContent":[{"text":"If you go to TodosTests.swift…","type":"text"}]}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":"todos-postgres-22.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can switch the "},{"type":"codeVoice","code":"inMemoryTesting"},{"type":"text","text":" boolean to false to test your Postgres solution."}]}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"code":null,"content":[{"inlineContent":[{"type":"text","text":"That’s us done, we have a working and tested Todos application."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"The code for this tutorial can be found in the "},{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/todos-postgres-tutorial","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"type":"step"}]}],"kind":"tasks"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"todos-postgres-20.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-20.swift","content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        let selectStream = try await self.client.query(\"\"\"","            SELECT \"id\" FROM todos WHERE \"id\" = \\(id)","            \"\"\", logger: logger","        )","        \/\/ if we didn't find the item with this id then return false","        if try await selectStream.decode((UUID).self, context: .default).first(where: { _ in true} ) == nil {","            return false","        }","        _ = try await connection.query(\"DELETE FROM todos WHERE id = \\(id);\", logger: logger)","        return true","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        try await self.client.query(\"DELETE FROM todos;\", logger: logger)","    }","}"],"fileName":"TodoPostgresRepository > delete.swift","fileType":"swift"},"todos-postgres-22.swift":{"type":"file","highlights":[{"line":12}],"syntax":"swift","identifier":"todos-postgres-22.swift","content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = false","    }",""],"fileName":"TodosTests.swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"role":"article","abstract":[],"title":"API Setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","type":"topic","url":"\/tutorials\/todos\/api-setup","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Setup-your-project":{"url":"\/tutorials\/hummingbird\/todos-1-setup#Setup-your-project","role":"pseudoSymbol","type":"section","kind":"section","title":"Setup your project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","abstract":[{"text":"Create a simple web application.","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup":{"role":"project","abstract":[{"type":"text","text":"Create a simple web application."}],"title":"Setup a Hummingbird application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","type":"topic","estimatedTime":"5min","url":"\/tutorials\/hummingbird\/todos-1-setup","kind":"project"},"todos-postgres-15.swift":{"type":"file","highlights":[{"line":2},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"syntax":"swift","identifier":"todos-postgres-15.swift","content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        try await self.client.query(\"\"\"","            CREATE TABLE IF NOT EXISTS todos (","                \"id\" uuid PRIMARY KEY,","                \"title\" text NOT NULL,","                \"order\" integer,","                \"completed\" boolean,","                \"url\" text","            )","            \"\"\",","            logger: logger","        )","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        try await self.client.query(","            \"INSERT INTO todos (id, title, url, \\\"order\\\") VALUES (\\(id), \\(title), \\(url), \\(order));\", ","            logger: logger","        )","        return Todo(id: id, title: title, order: order, url: url, completed: nil)","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","fileType":"swift"},"todos-postgres-06.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-06.swift","content":["import ArgumentParser","import Hummingbird","import Logging","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"fileName":"Todos.swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Setup-your-project-for-testing":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Setup-your-project-for-testing","role":"pseudoSymbol","type":"section","kind":"section","title":"Setup your project for testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}]},"todos-postgres-16.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-16.swift","content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { ","        try await self.client.query(\"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","            \"\"\", logger: logger","        )","        for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            return Todo(id: id, title: title, order: order, url: url, completed: completed)","        }","        return nil","    }","}"],"fileName":"TodoPostgresRepository > get(id:).swift","fileType":"swift"},"todos-postgres-17.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-17.swift","content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ List all todos","    func list() async throws -> [Todo] { ","        let stream = try await self.client.query(\"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos","            \"\"\", logger: logger","        )","        var todos: [Todo] = []","        for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            let todo = Todo(id: id, title: title, order: order, url: url, completed: completed)","            todos.append(todo)","        }","        return todos","    }","}"],"fileName":"TodoPostgresRepository > list().swift","fileType":"swift"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/todos-postgres-tutorial":{"type":"link","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/todos-postgres-tutorial","title":"hummingbird-examples repository","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/todos-postgres-tutorial","titleInlineContent":[{"text":"hummingbird-examples repository","type":"text"}]},"https://www.postgresql.org/docs/current/app-psql.html":{"type":"link","url":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","title":"here","identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","titleInlineContent":[{"text":"here","type":"text"}]},"todos-postgres-04.swift":{"type":"file","highlights":[{"line":10},{"line":18}],"syntax":"swift","identifier":"todos-postgres-04.swift","content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0-alpha.1\"),","        .package(url: \"https:\/\/github.com\/vapor\/postgres-nio.git\", from: \"1.21.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"PostgresNIO\", package: \"postgres-nio\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileName":"Package.swift","fileType":"swift"},"todos-postgres-12.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-12.swift","content":["import Foundation","@_spi(ConnectionPool) import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        _ = try await client.withConnection { connection in","            connection.query(\"\"\"","                CREATE TABLE IF NOT EXISTS todos (","                    \"id\" uuid PRIMARY KEY,","                    \"title\" text NOT NULL,","                    \"order\" integer,","                    \"completed\" boolean,","                    \"url\" text","                )","                \"\"\",","                logger: logger","            )","        }","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-setup":{"url":"\/tutorials\/todos\/application-setup","role":"article","type":"topic","kind":"article","title":"Application setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","abstract":[]},"todos-postgres-02.sh":{"type":"file","highlights":[],"syntax":"","identifier":"todos-postgres-02.sh","content":["> psql postgres","psql (14.10 (Homebrew))","Type \"help\" for help.","","postgres=# create database hummingbird;","CREATE DATABASE","postgres=# \\c hummingbird","You are now connected to database \"hummingbird\" as user \"user\".","hummingbird=# create role todos createrole login password 'todos';","CREATE ROLE","hummingbird=# \\q"],"fileName":"Setup Postgress","fileType":""},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Add some functionality to your app"}],"title":"Todo Controller and Repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","type":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","kind":"section"},"todos-postgres-08.swift":{"type":"file","highlights":[{"line":18},{"line":24},{"line":29},{"line":34},{"line":35},{"line":36}],"syntax":"swift","identifier":"todos-postgres-08.swift","content":["import ArgumentParser","import Hummingbird","import Logging","import PostgresNIO","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(postgresClient)","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift"},"hummingbird.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/hummingbird.png"}],"alt":"Hummingbird logo","identifier":"hummingbird.png"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"role":"project","abstract":[{"type":"text","text":"Add some functionality to your app"}],"title":"Add your application API","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","type":"topic","estimatedTime":"15min","url":"\/tutorials\/hummingbird\/todos-2-api","kind":"project"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","url":"\/tutorials\/todos","type":"topic","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"role":"overview","title":"Build a Todos application.","kind":"overview"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"type":"link","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","title":"Swift Service Lifecycle","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Extend-your-Application":{"url":"\/tutorials\/hummingbird\/todos-1-setup#Extend-your-Application","role":"pseudoSymbol","type":"section","kind":"section","title":"Extend your Application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","abstract":[{"text":"Create a simple web application.","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"url":"\/tutorials\/hummingbird\/todos-4-postgres","role":"project","type":"topic","kind":"project","estimatedTime":"20min","title":"Use PostgresNIO to store your Todos in a Postgres database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}]},"todos-postgres-18.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-18.swift","content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        let query: PostgresQuery","        \/\/ UPDATE query. Work out query based on whick values are not nil","        \/\/ The string interpolations are building a PostgresQuery with bindings and is safe from sql injection","        if let title {","            if let order {","                if let completed {","                    query = \"UPDATE todos SET title = \\(title), order = \\(order), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET title = \\(title), order = \\(order) WHERE id = \\(id)\"","                }","            } else {","                if let completed {","                    query = \"UPDATE todos SET title = \\(title), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET title = \\(title) WHERE id = \\(id)\"","                }","            }","        } else {","            if let order {","                if let completed {","                    query = \"UPDATE todos SET order = \\(order), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET order = \\(order) WHERE id = \\(id)\"","                }","            } else {","                if let completed {","                    query = \"UPDATE todos SET completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    return nil","                }","            }","        }","        _ = try await self.client.query(query, logger: self.logger)","","        \/\/ SELECT so I can get the full details of the TODO back","        \/\/ The string interpolation is building a PostgresQuery with bindings and is safe from sql injection","        let stream = try await self.client.query(","            \"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","            \"\"\",","            logger: self.logger","        )","        for try await(id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            return Todo(id: id, title: title, order: order, url: url, completed: completed)","        }","        return nil","    }","}"],"fileName":"TodoPostgresRepository > patch(id:).swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","role":"pseudoSymbol","type":"section","kind":"section","title":"Testing your application with curl","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","abstract":[{"text":"Add some functionality to your app","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"role":"project","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"title":"Testing your application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","type":"topic","estimatedTime":"15min","url":"\/tutorials\/hummingbird\/todos-3-testing","kind":"project"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"role":"article","abstract":[],"title":"Store Todos in a database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","type":"topic","url":"\/tutorials\/todos\/store-todos-in-a-database","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"title":"Setup your Postgres database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","kind":"section"},"todos-postgres-07.swift":{"type":"file","highlights":[{"line":4},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"syntax":"swift","identifier":"todos-postgres-07.swift","content":["import ArgumentParser","import Hummingbird","import Logging","import PostgresNIO","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"fileName":"Todos.swift","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-you-application":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"title":"Test you application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-you-application","kind":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"title":"Setup a Postgres repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","kind":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"url":"\/tutorials\/todos\/testing-your-application","role":"article","type":"topic","kind":"article","title":"Testing your application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","abstract":[]},"todos-postgres-21.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-21.swift","content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }",""],"fileName":"TodosTests.swift","fileType":"swift"},"todos-postgres-01.sh":{"type":"file","highlights":[],"syntax":"","identifier":"todos-postgres-01.sh","content":["> brew install postgresql"],"fileName":"Install Postgress","fileType":""},"todos-postgres-03.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-03.swift","content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0-alpha.1\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileName":"Package.swift","fileType":"swift"},"todos-postgres-13.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-13.swift","content":["import ArgumentParser","import Hummingbird","import Logging","import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    var postgresClient: PostgresClient?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    var app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    if let postgresClient {","        app.addServices(postgresClient)","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift"},"todos-postgres-11.swift":{"type":"file","highlights":[],"syntax":"swift","identifier":"todos-postgres-11.swift","content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileName":"TodoPostgresRepository.swift","fileType":"swift"},"todos-postgres-14.swift":{"type":"file","highlights":[{"line":19},{"line":20},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"syntax":"swift","identifier":"todos-postgres-14.swift","content":["import ArgumentParser","import Hummingbird","import Logging","import PostgresNIO","import ServiceLifecycle","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    var postgresRepository: TodoPostgresRepository?","    if !args.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        let repository = TodoPostgresRepository(client: client, logger: logger)","        postgresRepository = repository","        TodoController(repository: repository).addRoutes(to: router.group(\"todos\"))","    } else {","        TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    }","    \/\/ create application","    var app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    \/\/ if we setup a postgres service then add as a service and run createTable before","    \/\/ server starts","    if let postgresRepository {","        app.addServices(postgresRepository.client)","        app.runBeforeServerStart {","            try await postgresRepository.createTable()","        }","    }","    return app","}"],"fileName":"Todos.swift","fileType":"swift"},"https://www.postgresql.org/download/":{"type":"link","url":"https:\/\/www.postgresql.org\/download\/","title":"here","identifier":"https:\/\/www.postgresql.org\/download\/","titleInlineContent":[{"text":"here","type":"text"}]}}}