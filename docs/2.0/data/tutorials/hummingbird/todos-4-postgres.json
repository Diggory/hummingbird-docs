{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"project","sections":[{"backgroundImage":"hummingbird.png","title":"Use PostgresNIO to store your Todos in a Postgres database","chapter":"Store Todos in a database","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}]}],"estimatedTimeInMinutes":15,"kind":"hero","image":"hummingbird.png"},{"tasks":[{"title":"Setup your Postgres database","contentSection":[{"kind":"contentAndMedia","media":"hummingbird.png","content":[{"inlineContent":[{"text":"Setup a Postgres database to use with the Todos application.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"step","media":null,"caption":[{"inlineContent":[{"text":"Once you have installed Postgres follow the instructions on screen to start your Postgres database service.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"content":[{"inlineContent":[{"text":"You’ll need to install postgres on your system if you don’t already have it. Detailed instructions on installing Postgres can be found ","type":"text"},{"identifier":"https:\/\/www.postgresql.org\/download\/","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"todos-postgres-01.sh"},{"type":"step","media":null,"caption":[{"inlineContent":[{"type":"text","text":"Note the SQL commands all end in a semi-colon. The "},{"type":"codeVoice","code":"\\c"},{"type":"text","text":" command connects to a database and the "},{"type":"codeVoice","code":"\\q"},{"type":"text","text":" command quits "},{"type":"codeVoice","code":"pqsl"},{"type":"text","text":". You can find out more about "},{"type":"codeVoice","code":"psql"},{"type":"text","text":" "},{"identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"The Postgres install comes with "},{"type":"codeVoice","code":"psql"},{"type":"text","text":" the commandline interface to Postgres. We are going to use this to create a new database and a new role."}],"type":"paragraph"}],"code":"todos-postgres-02.sh"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"We return to our project…"}],"type":"paragraph"}],"code":"todos-postgres-03.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"And add PostgresNIO as a dependency"}],"type":"paragraph"}],"code":"todos-postgres-04.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Sources\/App\/Application+build.swift…"}]}],"code":"todos-postgres-05.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"we add a new requirement "},{"type":"codeVoice","code":"inMemoryTesting"},{"type":"text","text":" to "},{"type":"codeVoice","code":"AppArguments"},{"type":"text","text":". This will decide whether we store Todos in memory or a Postgres database."}],"type":"paragraph"}],"code":"todos-postgres-06.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We then need to add implementations of this requirement in Sources\/App\/App.swift","type":"text"}]}],"code":"todos-postgres-07.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"and Tests\/AppTests\/AppTests.swift","type":"text"}]}],"code":"todos-postgres-08.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to use "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" from PostgresNIO for our Postgres support. The "},{"type":"codeVoice","code":"inMemoryTesting"},{"type":"text","text":" flag is used to decide on whether we should set one up. Note the Postgres configuration details are the same as the Postgres role we set up earlier in psql."}]}],"code":"todos-postgres-09.swift"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" sets up background processes that requires lifecycle management. You can add a service to "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" to have its lifecycle managed as long as it conforms to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". This is done by adding it to an internally held "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":". More details on "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" can be found in the documentation for "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},{"type":"text","text":"."}]}],"code":"todos-postgres-10.swift"}],"anchor":"Setup-your-Postgres-database"},{"title":"Setup a Postgres repository","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Implement a version of "},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" that uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":"."}],"type":"paragraph"}],"mediaPosition":"trailing","media":"hummingbird.png","kind":"contentAndMedia"}],"stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We start our Postgres support by creating a type conforming to ","type":"text"},{"type":"codeVoice","code":"TodoRepository"},{"text":" that uses ","type":"text"},{"type":"codeVoice","code":"PostgresClient"},{"text":" from PostgresNIO. The functions are filled out with dummy code just now so the project will compile.","type":"text"}]}],"type":"step","caption":[],"code":"todos-postgres-11.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"If we are going to be saving our todos to a database we are going to need a table to store them in."}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"I won’t go into any great detail about the SQL calls. That is not the purpose of this tutorial. We will cover how you construct, send calls and parse their results with ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" as we proceed through the tutorial.","type":"text"}],"type":"paragraph"}],"code":"todos-postgres-12.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return to "},{"code":"buildApplication(_:)","type":"codeVoice"},{"type":"text","text":" in Application+build.swift…"}]}],"type":"step","caption":[],"code":"todos-postgres-10.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Use the newly created ","type":"text"},{"code":"TodoPostgresRepository","type":"codeVoice"},{"text":" and once the ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" is running call ","type":"text"},{"code":"createTable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":"todos-postgres-14.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Update ","type":"text"},{"code":"buildRouter(_:)","type":"codeVoice"},{"text":" to take the repository as an argument and pass it to the controller.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":"todos-postgres-23.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Back to TodoPostgresRepository.swift to start implementing our repository methods.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":"todos-postgres-12.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"To run a SQL query call ","type":"text"},{"code":"PostgresClient.query(_:logger:)","type":"codeVoice"},{"text":" with the query string and a Logger`.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"Wait a sec! If you look closer that query looks like it’s got SQL injection. That’s a classic security issue. Except this isn’t the case here. The object being constructed is not a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" but a ","type":"text"},{"code":"PostgresQuery","type":"codeVoice"},{"text":" which uses ","type":"text"},{"code":"StringInterpolation","type":"codeVoice"},{"text":" to create parameter bindings for all the interpolated variables.","type":"text"}],"type":"paragraph"}],"code":"todos-postgres-15.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"get"},{"text":" method demonstrates how you get data returned from a query. The query returns a sequence of rows. You extract the data from the row by decoding it as a tuple. In this case there should only be one row so we return immediately as soon as we have it.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":"todos-postgres-16.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"list"},{"type":"text","text":" is very similar to "},{"type":"codeVoice","code":"get"},{"type":"text","text":". Except there is no "},{"type":"codeVoice","code":"WHERE"},{"type":"text","text":" clause in the SQL and we return all of the rows returned from the query instead of just the first."}]}],"type":"step","caption":[],"code":"todos-postgres-17.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"patch"},{"type":"text","text":" has a complication where we only want to include the non optional values in the "},{"type":"codeVoice","code":"UPDATE"},{"type":"text","text":" query otherwise we’ll be setting database columns to null. You could do this dynamically and build a "},{"type":"codeVoice","code":"PostgresQuery.StringInterpolation"},{"type":"text","text":" bit by bit but it is safer just to provide the full query strings for each situation."}]}],"type":"step","caption":[],"code":"todos-postgres-18.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"And finally the ","type":"text"},{"type":"codeVoice","code":"delete"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"deleteAll"},{"text":" functions. This completes the implementation of the Postgres todos repository.","type":"text"}]}],"type":"step","caption":[],"code":"todos-postgres-20.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"If you go to Tests\/AppTests\/AppTests.swift…"}],"type":"paragraph"}],"type":"step","caption":[],"code":"todos-postgres-21.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can switch the "},{"code":"inMemoryTesting","type":"codeVoice"},{"type":"text","text":" boolean to false to test your Postgres solution."}]}],"type":"step","caption":[],"code":"todos-postgres-22.swift","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"That’s us done, we have a working and tested Todos application.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"The code for this tutorial can be found in the ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/todos-postgres-tutorial","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"code":null,"media":null}],"anchor":"Setup-a-Postgres-repository"}],"kind":"tasks"}],"metadata":{"title":"Use PostgresNIO to store your Todos in a Postgres database","category":"Todo backend","categoryPathComponent":"Todos","role":"project"},"variants":[{"paths":["\/tutorials\/hummingbird\/todos-4-postgres"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"]],"modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template"}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"references":{"todos-postgres-04.swift":{"highlights":[{"line":15},{"line":23}],"content":["\/\/ swift-tools-version:5.9","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","        .package(url: \"https:\/\/github.com\/vapor\/postgres-nio.git\", from: \"1.21.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"PostgresNIO\", package: \"postgres-nio\"),","            ]","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileType":"swift","fileName":"Package.swift","type":"file","syntax":"swift","identifier":"todos-postgres-04.swift"},"todos-postgres-03.swift":{"highlights":[],"identifier":"todos-postgres-03.swift","fileName":"Package.swift","fileType":"swift","content":["\/\/ swift-tools-version:5.9","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"type":"file","syntax":"swift"},"https://www.postgresql.org/download/":{"identifier":"https:\/\/www.postgresql.org\/download\/","title":"here","url":"https:\/\/www.postgresql.org\/download\/","type":"link","titleInlineContent":[{"type":"text","text":"here"}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"type":"topic","role":"article","abstract":[],"kind":"article","url":"\/tutorials\/todos\/store-todos-in-a-database","title":"Store Todos in a database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"type":"topic","role":"article","abstract":[],"kind":"article","url":"\/tutorials\/todos\/testing-your-application","title":"Testing your application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},"todos-postgres-06.swift":{"highlights":[{"line":12}],"content":["import Hummingbird","import Logging","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable. ","\/\/\/ Any variables added here also have to be added to `App` in App.swift and ","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","    var inMemoryTesting: Bool { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","syntax":"swift","identifier":"todos-postgres-06.swift"},"todos-postgres-14.swift":{"highlights":[{"line":13},{"line":14},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"content":["\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"todos-postgres-tutorial\")","        logger.logLevel =","            arguments.logLevel ??","            environment.get(\"LOG_LEVEL\").map { Logger.Level(rawValue: $0) ?? .info } ??","            .info","        return logger","    }()","    var postgresRepository: TodoPostgresRepository?","    let router: Router<AppRequestContext>","    if !arguments.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        let repository = TodoPostgresRepository(client: client, logger: logger)","        postgresRepository = repository","        router = buildRouter(repository)","    } else {","        router = buildRouter(TodoMemoryRepository())","    }","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"todos-postgres-tutorial\"","        ),","        logger: logger","    )","    \/\/ if we setup a postgres service then add as a service and run createTable before","    \/\/ server starts","    if let postgresRepository {","        app.addServices(postgresRepository.client)","        app.beforeServerStarts {","            try await postgresRepository.createTable()","        }","    }","    return app","}"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","syntax":"swift","identifier":"todos-postgres-14.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"type":"topic","role":"overview","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"kind":"overview","url":"\/tutorials\/todos","title":"Build a Todos application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","type":"link","title":"Swift Service Lifecycle","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},"hummingbird.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/hummingbird.png"}],"type":"image","alt":"Hummingbird logo","identifier":"hummingbird.png"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","title":"Testing your application with curl","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"},"todos-postgres-11.swift":{"highlights":[],"content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileType":"swift","fileName":"Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-11.swift"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/todos-postgres-tutorial":{"url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/todos-postgres-tutorial","type":"link","title":"hummingbird-examples repository","titleInlineContent":[{"text":"hummingbird-examples repository","type":"text"}],"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/todos-postgres-tutorial"},"todos-postgres-12.swift":{"highlights":[],"content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        try await self.client.query(\"\"\"","            CREATE TABLE IF NOT EXISTS todos (","                \"id\" uuid PRIMARY KEY,","                \"title\" text NOT NULL,","                \"order\" integer,","                \"completed\" boolean,","                \"url\" text","            )","            \"\"\",","            logger: logger","        )","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        .init(id: UUID(), title: \"\", url: \"\")","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileType":"swift","fileName":"Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-12.swift"},"todos-postgres-15.swift":{"highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"content":["import Foundation","import PostgresNIO","","struct TodoPostgresRepository: TodoRepository {","    let client: PostgresClient","","    \/\/\/ Create Todos table","    func createTable() async throws {","        try await self.client.query(\"\"\"","            CREATE TABLE IF NOT EXISTS todos (","                \"id\" uuid PRIMARY KEY,","                \"title\" text NOT NULL,","                \"order\" integer,","                \"completed\" boolean,","                \"url\" text","            )","            \"\"\",","            logger: logger","        )","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        try await self.client.query(","            \"INSERT INTO todos (id, title, url, \\\"order\\\") VALUES (\\(id), \\(title), \\(url), \\(order));\", ","            logger: logger","        )","        return Todo(id: id, title: title, order: order, url: url, completed: nil)","    }","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { nil }","    \/\/\/ List all todos","    func list() async throws -> [Todo] { [] }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? { nil }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool { false }","    \/\/\/ Delete all todos","    func deleteAll() async throws {}","}"],"fileType":"swift","fileName":"Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-15.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"type":"topic","role":"article","abstract":[],"kind":"article","url":"\/tutorials\/todos\/api-setup","title":"API Setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},"todos-postgres-18.swift":{"highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        let query: PostgresQuery","        \/\/ UPDATE query. Work out query based on whick values are not nil","        \/\/ The string interpolations are building a PostgresQuery with bindings and is safe from sql injection","        if let title {","            if let order {","                if let completed {","                    query = \"UPDATE todos SET title = \\(title), order = \\(order), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET title = \\(title), order = \\(order) WHERE id = \\(id)\"","                }","            } else {","                if let completed {","                    query = \"UPDATE todos SET title = \\(title), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET title = \\(title) WHERE id = \\(id)\"","                }","            }","        } else {","            if let order {","                if let completed {","                    query = \"UPDATE todos SET order = \\(order), completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    query = \"UPDATE todos SET order = \\(order) WHERE id = \\(id)\"","                }","            } else {","                if let completed {","                    query = \"UPDATE todos SET completed = \\(completed) WHERE id = \\(id)\"","                } else {","                    return nil","                }","            }","        }","        _ = try await self.client.query(query, logger: self.logger)","","        \/\/ SELECT so I can get the full details of the TODO back","        \/\/ The string interpolation is building a PostgresQuery with bindings and is safe from sql injection","        let stream = try await self.client.query(","            \"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","            \"\"\",","            logger: self.logger","        )","        for try await(id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            return Todo(id: id, title: title, order: order, url: url, completed: completed)","        }","        return nil","    }","}"],"fileType":"swift","fileName":"patch(id:) - Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-18.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"estimatedTime":"20min","url":"\/tutorials\/hummingbird\/todos-2-api","role":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","type":"topic","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"project","title":"Add your application API"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"type":"topic","role":"project","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"project","url":"\/tutorials\/hummingbird\/todos-4-postgres","title":"Use PostgresNIO to store your Todos in a Postgres database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","estimatedTime":"15min"},"todos-postgres-05.swift":{"highlights":[],"content":["import Hummingbird","import Logging","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable. ","\/\/\/ Any variables added here also have to be added to `App` in App.swift and ","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","syntax":"swift","identifier":"todos-postgres-05.swift"},"todos-postgres-21.swift":{"highlights":[],"content":["import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let logLevel: Logger.Level? = nil","        let inMemoryTesting = true","    }",""],"fileType":"swift","fileName":"Tests\/AppTests\/AppTests.swift","type":"file","syntax":"swift","identifier":"todos-postgres-21.swift"},"todos-postgres-08.swift":{"highlights":[],"content":["import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let logLevel: Logger.Level? = nil","        let inMemoryTesting = true","    }",""],"fileType":"swift","fileName":"Tests\/AppTests\/AppTests.swift","type":"file","syntax":"swift","identifier":"todos-postgres-08.swift"},"todos-postgres-22.swift":{"highlights":[{"line":13}],"content":["import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let logLevel: Logger.Level? = nil","        let inMemoryTesting = false","    }",""],"fileType":"swift","fileName":"Tests\/AppTests\/AppTests.swift","type":"file","syntax":"swift","identifier":"todos-postgres-22.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-setup":{"type":"topic","role":"article","abstract":[],"kind":"article","url":"\/tutorials\/todos\/application-setup","title":"Application setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup"},"todos-postgres-23.swift":{"highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":13},{"line":14}],"content":["\/\/\/ Build router","func buildRouter(_ repository: some TodoRepository) -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    router.addRoutes(TodoController(repository: repository).endpoints, atPath: \"\/todos\")","    return router","}"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","syntax":"swift","identifier":"todos-postgres-23.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","type":"section","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"section","title":"Setup a Postgres repository"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","title":"Test your application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"},"todos-postgres-16.swift":{"highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Get todo.","    func get(id: UUID) async throws -> Todo? { ","        let stream = try await self.client.query(\"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos WHERE \"id\" = \\(id)","            \"\"\", logger: logger","        )","        for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            return Todo(id: id, title: title, order: order, url: url, completed: completed)","        }","        return nil","    }","}"],"fileType":"swift","fileName":"get(id:) - Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-16.swift"},"todos-postgres-01.sh":{"highlights":[],"content":["> brew install postgresql"],"fileType":"","fileName":"Install Postgres","type":"file","syntax":"","identifier":"todos-postgres-01.sh"},"todos-postgres-07.swift":{"highlights":[],"content":["@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    @Flag","    var inMemoryTesting: Bool = false","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}"],"fileType":"swift","fileName":"Sources\/App\/App.swift","type":"file","syntax":"swift","identifier":"todos-postgres-07.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup","title":"Project testing setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","type":"section","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"section","title":"Todo Controller and Repository"},"todos-postgres-17.swift":{"highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ List all todos","    func list() async throws -> [Todo] { ","        let stream = try await self.client.query(\"\"\"","            SELECT \"id\", \"title\", \"order\", \"url\", \"completed\" FROM todos","            \"\"\", logger: logger","        )","        var todos: [Todo] = []","        for try await (id, title, order, url, completed) in stream.decode((UUID, String, Int?, String, Bool?).self, context: .default) {","            let todo = Todo(id: id, title: title, order: order, url: url, completed: completed)","            todos.append(todo)","        }","        return todos","    }","}"],"fileType":"swift","fileName":"list() - Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-17.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"type":"topic","role":"project","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"kind":"project","url":"\/tutorials\/hummingbird\/todos-1-template","title":"Create a Hummingbird application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","estimatedTime":"5min"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","title":"Setup your Postgres database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"type":"topic","role":"project","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"project","url":"\/tutorials\/hummingbird\/todos-3-testing","title":"Testing your application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","estimatedTime":"15min"},"todos-postgres-10.swift":{"highlights":[],"content":["\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"todos-postgres-tutorial\")","        logger.logLevel =","            arguments.logLevel ??","            environment.get(\"LOG_LEVEL\").map { Logger.Level(rawValue: $0) ?? .info } ??","            .info","        return logger","    }()","    var postgresClient: PostgresClient?","    if !arguments.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","        postgresClient = client","    }","    let router = buildRouter()","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"todos-postgres-tutorial\"","        ),","        logger: logger","    )","    if let postgresClient {","        app.addServices(postgresClient)","    }","    return app","}",""],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","syntax":"swift","identifier":"todos-postgres-10.swift"},"todos-postgres-02.sh":{"highlights":[],"content":["> psql postgres","psql (14.10 (Homebrew))","Type \"help\" for help.","","postgres=# create database hummingbird;","CREATE DATABASE","postgres=# \\c hummingbird","You are now connected to database \"hummingbird\" as user \"user\".","hummingbird=# create role todos createrole login password 'todos';","CREATE ROLE","hummingbird=# \\q"],"fileType":"","fileName":"Setup Postgres","type":"file","syntax":"","identifier":"todos-postgres-02.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"kind":"section","url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","title":"Create your project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"},"todos-postgres-09.swift":{"highlights":[],"content":["\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"todos-postgres-tutorial\")","        logger.logLevel =","            arguments.logLevel ??","            environment.get(\"LOG_LEVEL\").map { Logger.Level(rawValue: $0) ?? .info } ??","            .info","        return logger","    }()","    if !arguments.inMemoryTesting {","        let client = PostgresClient(","            configuration: .init(host: \"localhost\", username: \"todos\", password: \"todos\", database: \"hummingbird\", tls: .disable),","            backgroundLogger: logger","        )","    }","    let router = buildRouter()","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"todos-postgres-tutorial\"","        ),","        logger: logger","    )","    return app","}",""],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","syntax":"swift","identifier":"todos-postgres-09.swift"},"todos-postgres-20.swift":{"highlights":[],"content":["import Foundation","import PostgresNIO","","extension TodoPostgresRepository {","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        let selectStream = try await self.client.query(\"\"\"","            SELECT \"id\" FROM todos WHERE \"id\" = \\(id)","            \"\"\", logger: logger","        )","        \/\/ if we didn't find the item with this id then return false","        if try await selectStream.decode((UUID).self, context: .default).first(where: { _ in true} ) == nil {","            return false","        }","        try await client.query(\"DELETE FROM todos WHERE id = \\(id);\", logger: logger)","        return true","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        try await self.client.query(\"DELETE FROM todos;\", logger: logger)","    }","}"],"fileType":"swift","fileName":"delete() - Sources\/App\/Repositories\/TodoPostgresRepository.swift","type":"file","syntax":"swift","identifier":"todos-postgres-20.swift"},"https://www.postgresql.org/docs/current/app-psql.html":{"url":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html","type":"link","title":"here","titleInlineContent":[{"text":"here","type":"text"}],"identifier":"https:\/\/www.postgresql.org\/docs\/current\/app-psql.html"}}}