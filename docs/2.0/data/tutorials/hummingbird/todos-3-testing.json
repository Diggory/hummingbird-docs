{"sections":[{"estimatedTimeInMinutes":15,"content":[{"inlineContent":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"type":"paragraph"}],"chapter":"Testing your application","backgroundImage":"hummingbird.png","title":"Testing your application","kind":"hero","image":"hummingbird.png"},{"kind":"tasks","tasks":[{"anchor":"Setup-your-project-for-testing","title":"Setup your project for testing","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a test target and restructure your project to make it easier to test."}]}],"media":"hummingbird.png","kind":"contentAndMedia"}],"stepsSection":[{"runtimePreview":null,"code":"todos-testing-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open Package.swift"}]}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"code":"todos-testing-02.swift","content":[{"inlineContent":[{"text":"Add a test target for “TodosTests”","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"code":"todos-testing-03.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a Tests folder and add the file TodosTests.swift inside it.","type":"text"}]}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"code":"todos-testing-04.swift","content":[{"inlineContent":[{"type":"text","text":"Before we can start testing the application we need a function to create the application. Currently it is created inside "},{"type":"codeVoice","code":"Todos.run"},{"type":"text","text":" and is inaccessible."}],"type":"paragraph"}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"code":"todos-testing-05.swift","content":[{"inlineContent":[{"type":"text","text":"We move the application creation to a global function outside of "},{"type":"codeVoice","code":"Todos"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"buildApplication"},{"type":"text","text":" function returns "},{"type":"codeVoice","code":"some ApplicationProtocol"},{"type":"text","text":". This is to avoid having to list all the generic parameters of "},{"type":"codeVoice","code":"Application"},{"type":"text","text":". FYI in this case it is "},{"type":"codeVoice","code":"Application<RouterResponder<BasicRequestContext>, HTTP1Channel>"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null},{"runtimePreview":null,"code":"todos-testing-06.swift","content":[{"inlineContent":[{"text":"We cannot instantiate ","type":"text"},{"code":"Todos","type":"codeVoice"},{"text":" in our tests so need another way to pass arguments to the buildApplication function. We solve this by creating a protocol AppArguments which Todos conforms to. In our tests we can create a separate concrete type that conforms to this.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"We’ve added a ","type":"text"},{"code":"inMemoryTesting","type":"codeVoice"},{"text":" variable to this protocol which we will use in the future.","type":"text"}],"type":"paragraph"}],"type":"step","media":null}]},{"anchor":"Test-you-application","title":"Test you application","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","media":"hummingbird.png","content":[{"inlineContent":[{"text":"Writing Tests to ensure you application API works.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"caption":[],"code":"todos-testing-07.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We are now in a position where we can test our application. We create a concrete type conforming to ","type":"text"},{"code":"AppArguments","type":"codeVoice"},{"text":" which we can pass to ","type":"text"},{"code":"buildApplication","type":"codeVoice"},{"text":". The start of function to test the create API is here, with its first line creating the todos application.","type":"text"}]}]},{"caption":[{"inlineContent":[{"type":"text","text":"In the closure passed to "},{"type":"codeVoice","code":"test"},{"type":"text","text":" you are provided with a client to interact with the current test framework. With this you can send requests and verify the contents of their responses."}],"type":"paragraph"}],"code":"todos-testing-08.swift","type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"This is the filled out function. Application testing is done with the function "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","isActive":true},{"type":"text","text":". The first parameter indicates what test framework you want to use. Here we are using "},{"type":"codeVoice","code":".router"},{"type":"text","text":" which indicates we send our request directly to the router without a live server process."}],"type":"paragraph"}]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the create test has been simplified to two lines of code. Call create function, test return value."}]}],"code":"todos-testing-09.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Writing the whole execute line out each time and converting the responses to something readable can become tiresome. So lets break out the create API call to a separate function. You’ll notice in this function we return the decoded Todo from the execute closure.","type":"text"}]}]},{"caption":[],"code":"todos-testing-10.swift","type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"In actual fact lets create helper functions for all the API calls. With these it shoud be a lot easier to write tests","type":"text"}],"type":"paragraph"}]},{"caption":[],"code":"todos-testing-11.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We can now create more complex test functions. This one edits a todo twice and verifies the edits have been stored.","type":"text"}]}]},{"caption":[],"code":"todos-testing-12.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The following is the equivalent of the list of curl commands we wrote in the previous chapter to test everything was working ok. Its not the most sensible test but it demonstrates how much easier it is test your application using HummingbirdTesting."}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Hint: A couple of these require you to use execute directly instead of calling the helper functions we wrote at the top.","type":"text"}]}],"code":"todos-testing-13.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Here are some tests that haven’t been written yet. Maybe you could complete them for me.","type":"text"}]}]}]}]},{"abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"action":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"type":"reference","overridingTitle":"Get started"},"title":"Use PostgresNIO to store your Todos in a Postgres database","kind":"callToAction","featuredEyebrow":"Tutorial"}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"]],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"variants":[{"paths":["\/tutorials\/hummingbird\/todos-3-testing"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"categoryPathComponent":"Todos","role":"project","title":"Testing your application","category":"Todo backend"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing"},"references":{"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"title":"API Setup","url":"\/tutorials\/todos\/api-setup","abstract":[],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},"todos-testing-06.swift":{"syntax":"swift","highlights":[{"line":5},{"line":12},{"line":13},{"line":14},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":31}],"content":["import ArgumentParser","import Hummingbird","","@main","struct Todos: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Flag","    var inMemoryTesting: Bool = false","","    func run() async throws {","        \/\/ create application","        let app = try await buildApplication(self)","        \/\/ run application","        try await app.runService()","    }","}","","\/\/\/ Arguments extracted from commandline","protocol AppArguments {","    var hostname: String { get}","    var port: Int { get }","    var inMemoryTesting: Bool { get }","}","","\/\/\/ Build a Application","func buildApplication(_ args: some AppArguments) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}"],"fileName":"Todos.swift","identifier":"todos-testing-06.swift","type":"file","fileType":"swift"},"todos-testing-04.swift":{"syntax":"swift","highlights":[],"content":["import ArgumentParser","import Hummingbird","","@main","struct Todos: AsyncParsableCommand {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    func run() async throws {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = .debug","        \/\/ create router","        let router = Router()","        \/\/ add logging middleware","        router.middlewares.add(LogRequestsMiddleware(.info))","        \/\/ add hello route","        router.get(\"\/\") { request, context in","            \"Hello\\n\"","        }","        \/\/ add Todos API","        TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","        \/\/ create application","        let app = Application(","            router: router,","            configuration: .init(address: .hostname(self.hostname, port: self.port)),","            logger: logger","        )","        \/\/ run application","        try await app.runService()","    }","}"],"fileName":"Todos.swift","identifier":"todos-testing-04.swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"title":"Setup your Postgres database","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},"todos-testing-02.swift":{"syntax":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0-alpha.1\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"TodosTests\",","            dependencies: [","                \"Todos\",","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        )","    ]",")"],"fileName":"Package.swift","identifier":"todos-testing-02.swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"url":"\/tutorials\/hummingbird\/todos-3-testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","title":"Testing your application","kind":"project","role":"project","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"type":"topic","estimatedTime":"15min"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Extend-your-Application":{"role":"pseudoSymbol","title":"Extend your Application","abstract":[{"text":"Create a simple web application.","type":"text"}],"type":"section","url":"\/tutorials\/hummingbird\/todos-1-setup#Extend-your-Application","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"title":"Add your application API","url":"\/tutorials\/hummingbird\/todos-2-api","abstract":[{"text":"Add some functionality to your app","type":"text"}],"kind":"project","estimatedTime":"15min","role":"project","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","title":"Testing your application","url":"\/tutorials\/todos\/testing-your-application","type":"topic","abstract":[]},"todos-testing-05.swift":{"syntax":"swift","highlights":[{"line":14},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42}],"content":["import ArgumentParser","import Hummingbird","","@main","struct Todos: AsyncParsableCommand {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    func run() async throws {","        \/\/ create application","        let app = try await buildApplication(self)","        \/\/ run application","        try await app.runService()","    }","}","","\/\/\/ Build a Application","func buildApplication(_ args: Todos) async throws -> some ApplicationProtocol {","    var logger = Logger(label: \"Todos\")","    logger.logLevel = .debug","    \/\/ create router","    let router = Router()","    \/\/ add logging middleware","    router.middlewares.add(LogRequestsMiddleware(.info))","    \/\/ add hello route","    router.get(\"\/\") { request, context in","        \"Hello\\n\"","    }","    \/\/ add Todos API","    TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","    \/\/ create application","    let app = Application(","        router: router,","        configuration: .init(address: .hostname(args.hostname, port: args.port)),","        logger: logger","    )","    return app","}",""],"fileName":"Todos.swift","identifier":"todos-testing-05.swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","abstract":[{"text":"Test ","type":"text"},{"type":"codeVoice","code":"Application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","title":"test(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"TestClientProtocol","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKctYaKlF5ValueL_qd__mfp","text":"Value","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","role":"symbol"},"todos-testing-07.swift":{"syntax":"swift","highlights":[],"content":["@testable import Todos","import Hummingbird","import HummingbirdTesting","import XCTest","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }","","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","    }","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-07.swift","type":"file","fileType":"swift"},"todos-testing-10.swift":{"syntax":"swift","highlights":[{"line":2},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":75}],"content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }","","    struct CreateRequest: Encodable {","        let title: String","        let order: Int?","    }","    func create(title: String, order: Int? = nil, client: some TestClientProtocol) async throws -> Todo {","        let request = CreateRequest(title: title, order: order)","        let buffer = try JSONEncoder().encodeAsByteBuffer(request, allocator: ByteBufferAllocator())","        return try await client.execute(uri: \"\/todos\", method: .post, body: buffer) { response in","            XCTAssertEqual(response.status, .created)","            return try JSONDecoder().decode(Todo.self, from: response.body)","        }","    }","","    func get(id: UUID, client: some TestClientProtocol) async throws -> Todo? {","        try await client.execute(uri: \"\/todos\/\\(id)\", method: .get) { response in","            \/\/ either the get request returned an 200 status or it didn't return a Todo","            XCTAssert(response.status == .ok || response.body.readableBytes == 0)","            if response.body.readableBytes > 0 {","                return try JSONDecoder().decode(Todo.self, from: response.body)","            } else {","                return nil","            }","        }","    }","","    func list(client: some TestClientProtocol) async throws -> [Todo] {","        try await client.execute(uri: \"\/todos\", method: .get) { response in","            XCTAssertEqual(response.status, .ok)","            return try JSONDecoder().decode([Todo].self, from: response.body)","        }","    }","","    struct UpdateRequest: Encodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    func patch(id: UUID, title: String? = nil, order: Int? = nil, completed: Bool? = nil, client: some TestClientProtocol) async throws -> Todo? {","        let request = UpdateRequest(title: title, order: order, completed: completed)","        let buffer = try JSONEncoder().encodeAsByteBuffer(request, allocator: ByteBufferAllocator())","        return try await client.execute(uri: \"\/todos\/\\(id)\", method: .patch, body: buffer) { response in","            XCTAssertEqual(response.status, .ok)","            if response.body.readableBytes > 0 {","                return try JSONDecoder().decode(Todo.self, from: response.body)","            } else {","                return nil","            }","        }","    }","","    func delete(id: UUID, client: some TestClientProtocol) async throws -> HTTPResponse.Status {","        try await client.execute(uri: \"\/todos\/\\(id)\", method: .delete) { response in","            response.status","        }","    }","","    func deleteAll(client: some TestClientProtocol) async throws -> Void {","        try await client.execute(uri: \"\/todos\", method: .delete) { _ in }","    }","","    \/\/ MARK: Tests","","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            let todo = try await self.create(title: \"My first todo\", client: client)","            XCTAssertEqual(todo.title, \"My first todo\")","        }","    }","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-10.swift","type":"file","fileType":"swift"},"hummingbird.png":{"variants":[{"url":"\/images\/hummingbird.png","traits":["1x","light"]}],"alt":"Hummingbird logo","identifier":"hummingbird.png","type":"image"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Setup-your-project-for-testing":{"title":"Setup your project for testing","url":"\/tutorials\/hummingbird\/todos-3-testing#Setup-your-project-for-testing","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing"},"todos-testing-08.swift":{"syntax":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"content":["@testable import Todos","import Hummingbird","import HummingbirdTesting","import XCTest","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }","","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            try await client.execute(uri: \"\/todos\", method: .post, body: ByteBuffer(string: #\"{\"title\":\"My first todo\"}\"#)) { response in","                XCTAssertEqual(response.status, .created)","                let todo = try JSONDecoder().decode(Todo.self, from: response.body)","                XCTAssertEqual(todo.title, \"My first todo\")","            }","        }","    }","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-08.swift","type":"file","fileType":"swift"},"todos-testing-11.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","extension TodosTests {","    func testPatch() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            \/\/ create todo","            let todo = try await self.create(title: \"Deliver parcels to James\", client: client)","            \/\/ rename it","            _ = try await self.patch(id: todo.id, title: \"Deliver parcels to Claire\", client: client)","            let editedTodo = try await self.get(id: todo.id, client: client)","            XCTAssertEqual(editedTodo?.title, \"Deliver parcels to Claire\")","            \/\/ set it to completed","            _ = try await self.patch(id: todo.id, completed: true, client: client)","            let editedTodo2 = try await self.get(id: todo.id, client: client)","            XCTAssertEqual(editedTodo2?.completed, true)","            \/\/ revert it","            _ = try await self.patch(id: todo.id, title: \"Deliver parcels to James\", completed: false, client: client)","            let editedTodo3 = try await self.get(id: todo.id, client: client)","            XCTAssertEqual(editedTodo3?.title, \"Deliver parcels to James\")","            XCTAssertEqual(editedTodo3?.completed, false)","        }","    }","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-11.swift","type":"file","fileType":"swift"},"todos-testing-01.swift":{"syntax":"swift","highlights":[],"content":["\/\/ swift-tools-version: 5.9","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14)],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.2.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0-alpha.1\"),","    ],","    targets: [","        .executableTarget(","            name: \"Todos\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileName":"Package.swift","identifier":"todos-testing-01.swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","title":"Todo Controller and Repository","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","type":"section","abstract":[{"text":"Add some functionality to your app","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"type":"topic","url":"\/tutorials\/todos","title":"Build a Todos application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","role":"overview","kind":"overview"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Setup-your-project":{"title":"Setup your project","url":"\/tutorials\/hummingbird\/todos-1-setup#Setup-your-project","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"text":"Create a simple web application.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"title":"Testing your application with curl","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","abstract":[{"text":"Add some functionality to your app","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"},"todos-testing-12.swift":{"syntax":"swift","highlights":[{"line":8},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","extension TodosTests {","    func testAPI() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            \/\/ create two todos","            let todo1 = try await self.create(title: \"Wash my hair\", client: client)","            let todo2 = try await self.create(title: \"Brush my teeth\", client: client)","            \/\/ get first todo","            let getTodo = try await self.get(id: todo1.id, client: client)","            XCTAssertEqual(getTodo, todo1)","            \/\/ patch second todo","            let optionalPatchedTodo = try await self.patch(id: todo2.id, completed: true, client: client)","            let patchedTodo = try XCTUnwrap(optionalPatchedTodo)","            XCTAssertEqual(patchedTodo.completed, true)","            XCTAssertEqual(patchedTodo.title, todo2.title)","            \/\/ get all todos and check first todo and patched second todo are in the list","            let todos = try await self.list(client: client)","            XCTAssertNotNil(todos.firstIndex(of: todo1))","            XCTAssertNotNil(todos.firstIndex(of: patchedTodo))","            \/\/ delete a todo and verify it has been deleted","            let status = try await self.delete(id: todo1.id, client: client)","            XCTAssertEqual(status, .ok)","            let deletedTodo = try await self.get(id: todo1.id, client: client)","            XCTAssertNil(deletedTodo)","            \/\/ delete all todos and verify there are none left","            try await self.deleteAll(client: client)","            let todos2 = try await self.list(client: client)","            XCTAssertEqual(todos2.count, 0)","        }","    }","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-12.swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup":{"title":"Setup a Hummingbird application.","url":"\/tutorials\/hummingbird\/todos-1-setup","role":"project","kind":"project","estimatedTime":"5min","type":"topic","abstract":[{"text":"Create a simple web application.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-you-application":{"abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-you-application","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application","title":"Test you application"},"todos-testing-03.swift":{"syntax":"swift","highlights":[],"content":["@testable import Todos","import XCTest","","final class TodosTests: XCTestCase {","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-03.swift","type":"file","fileType":"swift"},"todos-testing-13.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11}],"content":["@testable import Todos","import Foundation","import Hummingbird","import HummingbirdTesting","import XCTest","","extension TodosTests {","    func testDeletingTodoTwiceReturnsBadRequest() async throws {}","    func testGettingTodoWithInvalidUUIDReturnsBadRequest() async throws {}","    func test30ConcurrentlyCreatedTodosAreAllCreated() async throws {}","    func testUpdatingNonExistentTodoReturnsBadRequest() async throws {}","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-13.swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"section","title":"Setup a Postgres repository","type":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-setup":{"abstract":[],"kind":"article","role":"article","url":"\/tutorials\/todos\/application-setup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","title":"Application setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"title":"Use PostgresNIO to store your Todos in a Postgres database","url":"\/tutorials\/hummingbird\/todos-4-postgres","role":"project","kind":"project","estimatedTime":"20min","type":"topic","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"title":"Store Todos in a database","url":"\/tutorials\/todos\/store-todos-in-a-database","abstract":[],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"},"todos-testing-09.swift":{"syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":31},{"line":32}],"content":["@testable import Todos","import Hummingbird","import HummingbirdTesting","import XCTest","","final class TodosTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 8080","        let inMemoryTesting = true","    }","","    struct CreateRequest: Encodable {","        let title: String","        let order: Int?","    }","    func create(title: String, order: Int? = nil, client: some TestClientProtocol) async throws -> Todo {","        let request = CreateRequest(title: title, order: order)","        let buffer = try JSONEncoder().encodeAsByteBuffer(request, allocator: ByteBufferAllocator())","        return try await client.execute(uri: \"\/todos\", method: .post, body: buffer) { response in","            XCTAssertEqual(response.status, .created)","            return try JSONDecoder().decode(Todo.self, from: response.body)","        }","    }","","    \/\/ MARK: Tests","    ","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            let todo = try await self.create(title: \"My first todo\", client: client)","            XCTAssertEqual(todo.title, \"My first todo\")","        }","    }","}"],"fileName":"TodosTests.swift","identifier":"todos-testing-09.swift","type":"file","fileType":"swift"}}}