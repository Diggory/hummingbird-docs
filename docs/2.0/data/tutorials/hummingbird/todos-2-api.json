{"sections":[{"image":"hummingbird.png","kind":"hero","chapter":"API Setup","content":[{"type":"paragraph","inlineContent":[{"text":"Add some functionality to your application.","type":"text"}]}],"backgroundImage":"hummingbird.png","estimatedTimeInMinutes":20,"title":"Add your application API"},{"kind":"tasks","tasks":[{"title":"Todo Controller and Repository","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Create a controller type that will hold the Todos API","type":"text"}],"type":"paragraph"}],"media":"hummingbird.png"}],"anchor":"Todo-Controller-and-Repository","stepsSection":[{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Add the new file "},{"code":"Sources\/App\/Controllers\/TodoController.swift","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"todos-api-01.swift","type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to "},{"type":"codeVoice","code":"buildRouter()"},{"text":" in Application+build.swift","type":"text"}]}],"code":"todos-template-06.swift","type":"step","caption":[],"media":null},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"And add the TodoController endpoints to your router. The Todos API has a URI prefix of “todos”."}],"type":"paragraph"}],"code":"todos-api-02.swift","media":null,"type":"step","runtimePreview":null},{"media":null,"type":"step","caption":[],"code":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to use the "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/"},{"type":"text","text":" to separate our storage concerns from our API. With this we should be able to create an API and test it without worrying about Database setup."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Create a product "},{"type":"codeVoice","code":"Todo"},{"type":"text","text":" that includes everything to define a todo."}],"type":"paragraph"}],"type":"step","caption":[],"code":"todos-api-03.swift","media":null,"runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to use "},{"type":"codeVoice","code":"Todo"},{"type":"text","text":" as the return value for some of our routes, so it needs to conform to "},{"type":"codeVoice","code":"ResponseEncodable"},{"text":". Later we will also be using it in tests so lets add ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" conformances.","type":"text"}]}],"type":"step","caption":[],"runtimePreview":null,"code":"todos-api-04.swift"},{"caption":[],"runtimePreview":null,"code":"todos-api-05.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"TodoRepository"},{"text":" protocol that defines all the methods to manage todos: (get, list, create, update, delete and deleteAll).","type":"text"}]}],"media":null},{"caption":[],"media":null,"type":"step","runtimePreview":null,"code":"todos-api-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a concrete implementation of "},{"code":"TodoRepository","type":"codeVoice"},{"type":"text","text":" protocol that saves everything to memory. We use an actor because multiple tasks could be accessing the repository at the same time."}]}]},{"caption":[],"code":"todos-api-01.swift","type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Return to TodoController.swift","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"And add a generic repository member variable conforming to ","type":"text"},{"code":"TodoRepository","type":"codeVoice"},{"text":" to be used by the ","type":"text"},{"code":"TodoController","type":"codeVoice"},{"text":" routes.","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"todos-api-07.swift"},{"type":"step","code":"todos-api-02.swift","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Go to "},{"type":"codeVoice","code":"buildRouter()"},{"type":"text","text":" in Application+build.swift"}],"type":"paragraph"}]},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And add the repository parameter to the TodoController initializer. We are using the memory implementation of the "},{"type":"codeVoice","code":"TodoRepository"},{"text":" we have already implemented above.","type":"text"}]}],"runtimePreview":null,"code":"todos-api-08.swift","caption":[]},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Return to TodoController.swift. We can now start adding our endpoints."}],"type":"paragraph"}],"code":"todos-api-07.swift","caption":[],"media":null,"type":"step"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Our first endpoint is to return a Todo given an id in the URI. We extract the id from the URI, attempt to convert it to a UUID and then call the repository method ","type":"text"},{"code":"get","type":"codeVoice"},{"type":"text","text":" and return the result. The result is then converted to a response using the response encoder (JSONEncoder by default) attached to the context."}],"type":"paragraph"}],"type":"step","code":"todos-api-09.swift","caption":[]},{"media":null,"caption":[{"inlineContent":[{"text":"If the endpoint returns nil because it could not find a todo this will automatically return a 204 (No Content) HTTP response to the client.","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"This endpoint has a few other features. If it fails to convert the id to a UUID then it throws an ","type":"text"},{"code":"HTTPError","type":"codeVoice"},{"type":"text","text":". This is an error that can be converted by the server to a valid HTTP response. If the server receives an error it cannot convert to an HTTP response it will return a 500 (Internal Server Error) HTTP error to the client."}]}],"type":"step","runtimePreview":null,"code":"todos-api-09.swift"},{"code":"todos-api-10.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Our second endpoint is to create a Todo. We have added a struct to decode from the request. In a similar way the get endpoint response uses JSONEncoder to generate its response, this uses the JSONDecoder attached to the context. We then call the repository ","type":"text"},{"type":"codeVoice","code":"create"},{"type":"text","text":" method and return the result."}]}],"media":null,"runtimePreview":null,"type":"step","caption":[]},{"caption":[],"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Returning an object and not a raw Response, in general sets the response status to 200 (OK). In this situation we want to return a 201 (Created) status. We can do this by returning an ","type":"text"},{"type":"codeVoice","code":"EditedResponse"},{"text":" which can be used to edit the status code and headers of a generated response.","type":"text"}],"type":"paragraph"}],"media":null,"code":"todos-api-11.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"We now have an API we can test. Lets use curl to create a Todo. If we include the command line parameter ","type":"text"},{"type":"codeVoice","code":"-i"},{"text":" we get the full HTTP response and can see that the status code is 201 (Created).","type":"text"}]}],"runtimePreview":null,"code":"todos-api-12.sh","caption":[],"media":null,"type":"step"},{"type":"step","media":null,"code":"todos-api-13.sh","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then use curl to access the URL that was in the returned json from the previous curl call."}]}],"caption":[{"inlineContent":[{"text":"Cool it works!","type":"text"}],"type":"paragraph"}]},{"media":null,"caption":[],"content":[{"inlineContent":[{"text":"Continuing with adding our API endpoints","type":"text"}],"type":"paragraph"}],"type":"step","code":"todos-api-11.swift","runtimePreview":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that lists all of the todos that have been created. Because "},{"code":"Todo","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ResponseEncodable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Array<Todo>","type":"codeVoice"},{"type":"text","text":" automatically conforms to "},{"code":"ResponseEncodable","type":"codeVoice"},{"type":"text","text":" as well."}]}],"type":"step","code":"todos-api-14.swift","runtimePreview":null,"media":null},{"caption":[],"type":"step","code":"todos-api-15.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that updates a todo. It extracts the todo id from the URI, decodes the UpdateRequest from the request and then calls the repository "},{"code":"update","type":"codeVoice"},{"text":" function.","type":"text"}]}],"media":null,"runtimePreview":null},{"type":"step","caption":[],"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"This is the endpoint that deletes a todo. It extracts the todo id from the URI and calls the repository ","type":"text"},{"code":"delete","type":"codeVoice"},{"type":"text","text":" function."}]}],"code":"todos-api-16.swift"},{"code":"todos-api-17.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The final endpoint is the one that deletes all todos. It simply calls the repository "},{"type":"codeVoice","code":"deleteAll"},{"type":"text","text":" function, as it doesn’t need to extract any information from the request."}]}],"runtimePreview":null,"type":"step","media":null}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Use curl to ensure your API is working as expected.","type":"text"}]}],"mediaPosition":"trailing","media":"hummingbird.png"}],"title":"Testing your application with curl","anchor":"Testing-your-application-with-curl","stepsSection":[{"media":null,"caption":[],"content":[{"inlineContent":[{"text":"Lets test the full API. First we are going to create two todos","type":"text"}],"type":"paragraph"}],"code":"todos-api-18.sh","runtimePreview":null,"type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When we query the URL returned by the first curl request we should get the first Todo added."}]}],"type":"step","media":null,"code":"todos-api-19.sh","caption":[]},{"caption":[],"media":null,"code":"todos-api-20.sh","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we update the second Todo and set it to completed …"}]}]},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"when we list all the tests you will see it is now flagged as completed"}],"type":"paragraph"}],"code":"todos-api-21.sh","type":"step","runtimePreview":null},{"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we delete a Todo …"}]}],"media":null,"code":"todos-api-22.sh"},{"caption":[],"media":null,"runtimePreview":null,"code":"todos-api-23.sh","type":"step","content":[{"inlineContent":[{"text":"when we try to get it again a 204 (No Content) response is returned, as it no longer exists.","type":"text"}],"type":"paragraph"}]},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"If we delete all of the Todos …"}],"type":"paragraph"}],"code":"todos-api-24.sh","runtimePreview":null,"type":"step","caption":[]},{"type":"step","code":"todos-api-25.sh","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when we list the Todos, the list is empty."}]}],"caption":[{"inlineContent":[{"type":"text","text":"This is not exactly a thorough way to test your application. It is error prone and cumbersome. Move onto the next chapter to discover how you can make this process more streamlined."}],"type":"paragraph"}],"media":null}]}]},{"abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"kind":"callToAction","title":"Testing your application","action":{"overridingTitle":"Get started","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true},"featuredEyebrow":"Tutorial"}],"metadata":{"category":"Todo backend","categoryPathComponent":"Todos","title":"Add your application API","role":"project"},"kind":"project","hierarchy":{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"}]}]},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","kind":"task"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}]}]}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-2-api"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"todos-api-18.sh":{"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Mon, 9 Sep 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"syntax":"","highlights":[],"fileName":"Test create and get","type":"file","fileType":"","identifier":"todos-api-18.sh"},"todos-api-08.swift":{"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    router.addRoutes(TodoController(repository: TodoMemoryRepository()).endpoints, atPath: \"\/todos\")","    return router","}"],"syntax":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","fileType":"swift","identifier":"todos-api-08.swift","highlights":[{"line":13}]},"todos-api-25.sh":{"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:52:19 GMT","","> curl -i http:\/\/localhost:8080\/todos\/                                              ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 2","Date: Mon, 9 Sep 2024 11:52:24 GMT","","[]"],"syntax":"","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"fileName":"Test delete","type":"file","fileType":"","identifier":"todos-api-25.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"url":"\/tutorials\/todos\/store-todos-in-a-database","role":"article","abstract":[],"title":"Store Todos in a database","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","kind":"article"},"todos-api-19.sh":{"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Mon, 9 Sep 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:43 GMT","","{\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"completed\":false}"],"syntax":"","fileName":"Test create and get","type":"file","fileType":"","identifier":"todos-api-19.sh","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","abstract":[{"type":"text","text":"Add some functionality to your application."}],"type":"topic","url":"\/tutorials\/hummingbird\/todos-2-api","kind":"project","estimatedTime":"20min","role":"project","title":"Add your application API"},"todos-api-24.sh":{"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:52:19 GMT"],"syntax":"","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileName":"Test delete","type":"file","fileType":"","identifier":"todos-api-24.sh"},"todos-api-04.swift":{"content":["import Foundation","import Hummingbird","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}","","extension Todo: ResponseEncodable, Decodable, Equatable {}"],"syntax":"swift","fileName":"Sources\/App\/Repositories\/Todo.swift","type":"file","fileType":"swift","identifier":"todos-api-04.swift","highlights":[{"line":2},{"line":16},{"line":17}]},"todos-api-06.swift":{"content":["import Foundation","","\/\/\/ Concrete implementation of `TodoRepository` that stores everything in memory","actor TodoMemoryRepository: TodoRepository {","    var todos: [UUID: Todo]","","    init() {","        self.todos = [:]","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        let todo = Todo(id: id, title: title, order: order, url: url, completed: false)","        self.todos[id] = todo","        return todo","    }","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo? {","        return self.todos[id]","    }","    \/\/\/ List all todos","    func list() async throws -> [Todo] {","        return self.todos.values.map { $0 }","    }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        if var todo = self.todos[id] {","            if let title {","                todo.title = title","            }","            if let order {","                todo.order = order","            }","            if let completed {","                todo.completed = completed","            }","            self.todos[id] = todo","            return todo","        }","        return nil","    }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        if self.todos[id] != nil {","            self.todos[id] = nil","            return true","        }","        return false","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        self.todos = [:]","    }","","}"],"syntax":"swift","highlights":[],"fileName":"Sources\/App\/Repositories\/TodoMemoryRepository.swift","type":"file","fileType":"swift","identifier":"todos-api-06.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"type":"topic","kind":"project","url":"\/tutorials\/hummingbird\/todos-3-testing","estimatedTime":"15min","role":"project","title":"Testing your application"},"todos-api-05.swift":{"content":["import Foundation","","\/\/\/ Interface for storing and editing todos","protocol TodoRepository: Sendable {","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo?","    \/\/\/ List all todos","    func list() async throws -> [Todo]","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo?","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool","    \/\/\/ Delete all todos","    func deleteAll() async throws","}"],"syntax":"swift","fileName":"Sources\/App\/Repositories\/TodoRepository.swift","type":"file","fileType":"swift","identifier":"todos-api-05.swift","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","role":"pseudoSymbol","title":"Setup your Postgres database"},"todos-api-09.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","}"],"syntax":"swift","highlights":[],"fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-09.swift"},"todos-api-15.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-15.swift","highlights":[{"line":14},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}]},"todos-api-21.sh":{"content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Mon, 9 Sep 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 330","Date: Mon, 9 Sep 2024 11:50:26 GMT","","[{\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\"},{\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}]",""],"syntax":"","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"fileName":"Test update","type":"file","fileType":"","identifier":"todos-api-21.sh"},"todos-api-20.sh":{"content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Mon, 9 Sep 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"syntax":"","fileName":"Test update","type":"file","fileType":"","identifier":"todos-api-20.sh","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"type":"topic","url":"\/tutorials\/hummingbird\/todos-1-template","kind":"project","estimatedTime":"5min","role":"project","title":"Create a Hummingbird application."},"todos-api-16.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","    }","","    \/\/\/ Delete todo endpoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"syntax":"swift","highlights":[{"line":15},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-16.swift"},"todos-api-01.swift":{"content":["import Hummingbird","","struct TodoController {","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","    }","}"],"syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-01.swift","highlights":[]},"todos-api-07.swift":{"content":["import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","    }","}"],"syntax":"swift","highlights":[],"fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-07.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","role":"pseudoSymbol","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"title":"Test your application","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","kind":"section"},"todos-api-03.swift":{"content":["import Foundation","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}"],"syntax":"swift","fileName":"Sources\/App\/Repositories\/Todo.swift","type":"file","fileType":"swift","identifier":"todos-api-03.swift","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"url":"\/tutorials\/todos\/testing-your-application","role":"article","abstract":[],"title":"Testing your application","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"type":"section","kind":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","role":"pseudoSymbol","title":"Setup a Postgres repository"},"todos-api-17.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","            .delete(use: deleteAll)","    }","","    \/\/\/ Delete all todos endpoint","    @Sendable func deleteAll(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        try await self.repository.deleteAll()","        return .ok","    }","","    \/\/\/ Delete todo endpoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"syntax":"swift","highlights":[{"line":16},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-17.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"url":"\/tutorials\/todos\/application-setup","role":"article","abstract":[],"title":"Application Setup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","kind":"article"},"todos-api-11.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-11.swift","highlights":[]},"https://www.geeksforgeeks.org/repository-design-pattern/":{"type":"link","identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","titleInlineContent":[{"text":"repository design pattern","type":"text"}],"title":"repository design pattern","url":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/"},"todos-api-12.sh":{"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Read chapter on testing applications\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 187","Date: Mon, 9 Sep 2024 10:02:08 GMT","","{\"completed\":false,\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"title\":\"Read chapter on testing applications\"}"],"syntax":"","fileName":"Test create","type":"file","fileType":"","identifier":"todos-api-12.sh","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","role":"pseudoSymbol","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"title":"Create your project","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","kind":"section"},"todos-api-10.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> Todo {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        return try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","    }","}"],"syntax":"swift","highlights":[{"line":12},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-10.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"type":"topic","kind":"project","url":"\/tutorials\/hummingbird\/todos-4-postgres","estimatedTime":"15min","role":"project","title":"Use PostgresNIO to store your Todos in a Postgres database"},"todos-api-14.swift":{"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift","type":"file","fileType":"swift","identifier":"todos-api-14.swift","highlights":[{"line":12},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"type":"topic","url":"\/tutorials\/todos","kind":"overview","role":"overview","title":"Build a Todos application."},"todos-api-13.sh":{"content":["> curl http:\/\/localhost:8080\/todos\/284DC153-4FE9-458D-8A93-6CB60990B2F3","{\"completed\":false,\"title\":\"Read chapter on testing applications\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\"}"],"syntax":"","highlights":[],"fileName":"Test get","type":"file","fileType":"","identifier":"todos-api-13.sh"},"todos-api-02.swift":{"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    router.addRoutes(TodoController().endpoints, atPath: \"\/todos\")","    return router","}"],"syntax":"swift","fileName":"Sources\/App\/Application+build.swift","type":"file","fileType":"swift","identifier":"todos-api-02.swift","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","role":"pseudoSymbol","abstract":[{"type":"text","text":"Add some functionality to your application."}],"title":"Testing your application with curl","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","abstract":[],"type":"topic","kind":"article","url":"\/tutorials\/todos\/api-setup","role":"article","title":"API Setup"},"todos-template-06.swift":{"highlights":[],"fileName":"Sources\/App\/Application+build.swift","type":"file","identifier":"todos-template-06.swift","fileType":"swift","content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    return router","}"],"syntax":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","abstract":[{"type":"text","text":"Add some functionality to your application."}],"type":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","kind":"section","role":"pseudoSymbol","title":"Todo Controller and Repository"},"todos-api-22.sh":{"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT"],"syntax":"","fileName":"Test delete","type":"file","fileType":"","identifier":"todos-api-22.sh","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup","role":"pseudoSymbol","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"title":"Project testing setup","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","kind":"section"},"hummingbird.png":{"type":"image","identifier":"hummingbird.png","alt":"Hummingbird logo","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}]},"todos-api-23.sh":{"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT"],"syntax":"","fileName":"Test delete","type":"file","fileType":"","identifier":"todos-api-23.sh","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}]}}}