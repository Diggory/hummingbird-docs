{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-2-api"]}],"hierarchy":{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup"}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}]}]}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"]]},"sections":[{"title":"Add your application API","backgroundImage":"hummingbird.png","image":"hummingbird.png","kind":"hero","chapter":"API Setup","estimatedTimeInMinutes":15,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add some functionality to your app"}]}]},{"kind":"tasks","tasks":[{"stepsSection":[{"type":"step","runtimePreview":null,"code":"todos-api-01.swift","content":[{"inlineContent":[{"type":"text","text":"Add the new file "},{"code":"Sources\/TodoController.swift","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-extend-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to Todos.swift"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-02.swift","content":[{"type":"paragraph","inlineContent":[{"text":"And add the TodoController APIs to your router. The Todos API has a URI prefix of “todos”.","type":"text"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":null,"content":[{"inlineContent":[{"type":"text","text":"Before we start adding routes, we going to use the "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/"},{"type":"text","text":" to separate our storage concerns from our API. With this we should be able to create an API and test it without worrying about Database setup."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a product "},{"type":"codeVoice","code":"Todo"},{"type":"text","text":" that includes everything to define a todo."}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-04.swift","content":[{"type":"paragraph","inlineContent":[{"text":"We are going to use ","type":"text"},{"code":"Todo","type":"codeVoice"},{"text":" as the return value for some of our routes, so it needs to conform to ","type":"text"},{"code":"ResponseEncodable","type":"codeVoice"},{"text":". Later we will also be using it in tests so lets add ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" conformances.","type":"text"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-05.swift","content":[{"inlineContent":[{"type":"text","text":"Create a "},{"code":"TodoRepository","type":"codeVoice"},{"type":"text","text":" protocol that defines all the methods to manage todos: (get, list, create, update, delete and deleteAll)."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-06.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a concrete implementation of ","type":"text"},{"type":"codeVoice","code":"TodoRepository"},{"text":" protocol that saves everything to memory. We use an actor because multiple tasks could be accessing the repository at the same time.","type":"text"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-01.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Return to TodoController.swift","type":"text"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-07.swift","content":[{"inlineContent":[{"type":"text","text":"And add a generic repository member variable conforming to "},{"code":"TodoRepository","type":"codeVoice"},{"type":"text","text":" to be used by the "},{"code":"TodoController","type":"codeVoice"},{"type":"text","text":" routes."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to Todos.swift"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-08.swift","content":[{"inlineContent":[{"type":"text","text":"And add the repository parameter to the TodoController initializer."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-07.swift","content":[{"inlineContent":[{"text":"Return to TodoController.swift. We can now start adding our API.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-09.swift","content":[{"inlineContent":[{"type":"text","text":"Our first endpoint is to return a Todo given an id in the URI. We extract the id from the URI, attempt to convert it to a UUID and then call the repository method "},{"code":"get","type":"codeVoice"},{"type":"text","text":" and return the result. The result is then converted to a response using the response encoder (JSONEncoder by default) attached to the context."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-09.swift","content":[{"inlineContent":[{"type":"text","text":"This endpoint has a few other features. If it fails to convert the id to a UUID then it throws an "},{"type":"codeVoice","code":"HTTPError"},{"type":"text","text":". This is an error that can be converted by the server to a valid HTTP response. If the server receives an error it cannot convert to an HTTP response it will return a 500 (Internal Server Error) HTTP error to the client."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"If the endpoint returns nil because it could not find a route this will automatically return a 204 (No Content) HTTP response to the client."}],"type":"paragraph"}],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-10.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Our second endpoint is to create a Todo. We have added a struct to decode from the request. In a similar way the get endpoint response uses JSONEncoder to generate its response, this uses the JSONDecoder attached to the context. We then call the repository ","type":"text"},{"type":"codeVoice","code":"create"},{"text":" method and return the result.","type":"text"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning an object and not a raw Response, in general sets the response status to 200 (OK). In this situation we want to return a 201 (Created) status. We can do this by returning an "},{"code":"EditedResponse","type":"codeVoice"},{"type":"text","text":" which can be used to edit the status code and headers of a generated response."}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-12.sh","content":[{"inlineContent":[{"type":"text","text":"We now have an API we can test. Lets use curl to create a Todo. If we include the command line parameter "},{"code":"-i","type":"codeVoice"},{"type":"text","text":" we get the full HTTP response and that the status code is 201 (Created)."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-13.sh","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then use curl to access the URL that was in the returned json from the previous curl call."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cool it works!"}]}],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-11.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Continuing with adding our API endpoint","type":"text"}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that lists all of the todos that have been created. Because Todo conforms to ResponseEncodable, Array<Todo> automatically conforms to ResponseEncodable as well."}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-15.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that updates a todo. It extracts the todo id from the URI, decodes the UpdateRequest from the request and then calls the repository "},{"type":"codeVoice","code":"update"},{"type":"text","text":" function."}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":"todos-api-16.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that deletes a todo. It extracts the todo id from the URI and calls the repository "},{"code":"delete","type":"codeVoice"},{"type":"text","text":" function."}]}],"caption":[],"media":null},{"type":"step","runtimePreview":null,"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The final endpoint is the one that deletes all todos. It simply calls the repository ","type":"text"},{"code":"deleteAll","type":"codeVoice"},{"text":" function, as it doesn’t need to extract any information from the request.","type":"text"}]}],"caption":[],"media":null}],"anchor":"Todo-Controller-and-Repository","title":"Todo Controller and Repository","contentSection":[{"content":[{"inlineContent":[{"text":"Create a controller type that will hold the Todos API","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","media":"hummingbird.png","mediaPosition":"trailing"}]},{"stepsSection":[{"caption":[],"runtimePreview":null,"code":"todos-api-18.sh","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lets test the full API. First we are going to create two todos"}]}],"type":"step"},{"caption":[],"runtimePreview":null,"code":"todos-api-19.sh","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When we query the URL returned by the first curl request we should get the first Todo added."}]}],"type":"step"},{"caption":[],"runtimePreview":null,"code":"todos-api-20.sh","media":null,"content":[{"inlineContent":[{"type":"text","text":"If we update the second Todo and set it to completed …"}],"type":"paragraph"}],"type":"step"},{"caption":[],"runtimePreview":null,"code":"todos-api-21.sh","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"when we list all the tests you will see it is now flagged as completed","type":"text"}]}],"type":"step"},{"caption":[],"runtimePreview":null,"code":"todos-api-22.sh","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"If we delete a Todo …","type":"text"}]}],"type":"step"},{"caption":[],"runtimePreview":null,"code":"todos-api-23.sh","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"when we try to get it again a 204 (No Content) response is returned, as it no longer exists.","type":"text"}]}],"type":"step"},{"caption":[],"runtimePreview":null,"code":"todos-api-24.sh","media":null,"content":[{"inlineContent":[{"type":"text","text":"If we delete all of the Todos …"}],"type":"paragraph"}],"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"This is not exactly a thorough way to test your application. It is error prone and cumbersome. Move onto the next chapter to discover how you can make this process more streamlined.","type":"text"}]}],"runtimePreview":null,"code":"todos-api-25.sh","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when we list the Todos, the list is empty."}]}],"type":"step"}],"anchor":"Testing-your-application-with-curl","title":"Testing your application with curl","contentSection":[{"kind":"contentAndMedia","media":"hummingbird.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use curl to ensure your API is working as expected."}]}],"mediaPosition":"trailing"}]}]},{"title":"Testing your application","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"kind":"callToAction","featuredEyebrow":"Tutorial","action":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","overridingTitle":"Get started","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference"}}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"category":"Todo backend","title":"Add your application API","categoryPathComponent":"Todos","role":"project"},"kind":"project","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"references":{"todos-api-09.swift":{"fileType":"swift","identifier":"todos-api-09.swift","type":"file","fileName":"TodoController.swift","syntax":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","        group","            .get(\":id\", use: get)","    }","","    \/\/\/ Get todo entrypoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","}"],"highlights":[]},"todos-api-22.sh":{"fileType":"","identifier":"todos-api-22.sh","type":"file","fileName":"Test delete","syntax":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Sat, 6 Jan 2024 11:51:47 GMT"],"highlights":[]},"todos-api-01.swift":{"fileType":"swift","identifier":"todos-api-01.swift","type":"file","fileName":"TodoController.swift","syntax":"swift","content":["import Hummingbird","","struct TodoController {","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","    }","}"],"highlights":[]},"todos-api-14.swift":{"fileType":"swift","identifier":"todos-api-14.swift","type":"file","fileName":"TodoController.swift","syntax":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","        group","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","    }","","    \/\/\/ Get todo entrypoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos entrypoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo entrypoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"highlights":[{"line":12},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"todos-api-03.swift":{"fileName":"Todo.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}"],"identifier":"todos-api-03.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","type":"section","title":"Setup a Postgres repository","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"abstract":[{"text":"Add some functionality to your app","type":"text"}],"title":"Add your application API","url":"\/tutorials\/hummingbird\/todos-2-api","estimatedTime":"15min","kind":"project","role":"project","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"title":"Testing your application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","type":"topic","url":"\/tutorials\/hummingbird\/todos-3-testing","role":"project","estimatedTime":"15min","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"project"},"todos-api-23.sh":{"fileName":"Test delete","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"syntax":"","type":"file","fileType":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Sat, 6 Jan 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Sat, 6 Jan 2024 11:51:59 GMT"],"identifier":"todos-api-23.sh"},"todos-api-21.sh":{"fileName":"Test update","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"syntax":"","type":"file","fileType":"","content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Sat, 6 Jan 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 330","Date: Sat, 6 Jan 2024 11:50:26 GMT","","[{\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\"},{\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}]",""],"identifier":"todos-api-21.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"title":"Store Todos in a database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","url":"\/tutorials\/todos\/store-todos-in-a-database","type":"topic","role":"article","abstract":[],"kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"url":"\/tutorials\/hummingbird\/todos-4-postgres","kind":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","estimatedTime":"20min","role":"project","type":"topic","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"title":"Use PostgresNIO to store your Todos in a Postgres database"},"todos-extend-06.swift":{"fileType":"swift","identifier":"todos-extend-06.swift","type":"file","fileName":"Todos.swift","syntax":"swift","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct Todos: AsyncParsableCommand {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    func run() async throws {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = .debug","        \/\/ create router","        let router = Router()","        \/\/ add logging middleware","        router.middlewares.add(LogRequestsMiddleware(.info))","        \/\/ add hello route","        router.get(\"\/\") { request, context in","            \"Hello\\n\"","        }","        \/\/ create application","        let app = Application(router: router, logger: logger)","        \/\/ run application","        try await app.runService()","    }","}"],"highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"type":"topic","kind":"overview","role":"overview","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"title":"Build a Todos application.","url":"\/tutorials\/todos","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"todos-api-08.swift":{"fileType":"swift","identifier":"todos-api-08.swift","type":"file","fileName":"Todos.swift","syntax":"swift","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct Todos: AsyncParsableCommand {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    func run() async throws {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = .debug","        \/\/ create router","        let router = Router()","        \/\/ add logging middleware","        router.middlewares.add(LogRequestsMiddleware(.info))","        \/\/ add hello route","        router.get(\"\/\") { request, context in","            \"Hello\\n\"","        }","        \/\/ add Todos API","        TodoController(repository: TodoMemoryRepository()).addRoutes(to: router.group(\"todos\"))","        \/\/ create application","        let app = Application(","            router: router,","            configuration: .init(address: .hostname(self.hostname, port: self.port))","        )","        \/\/ run application","        try await app.runService()","    }","}"],"highlights":[{"line":25}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-you-application":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Test-you-application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-you-application","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section","title":"Test you application"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"url":"\/tutorials\/todos\/testing-your-application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","type":"topic","title":"Testing your application","role":"article","kind":"article","abstract":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","title":"Todo Controller and Repository","kind":"section","type":"section","abstract":[{"type":"text","text":"Add some functionality to your app"}]},"todos-api-13.sh":{"fileType":"","identifier":"todos-api-13.sh","type":"file","fileName":"Test get","syntax":"","content":["> curl http:\/\/localhost:8080\/todos\/284DC153-4FE9-458D-8A93-6CB60990B2F3","{\"completed\":false,\"title\":\"Read chapter on testing applications\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\"}"],"highlights":[]},"todos-api-25.sh":{"fileType":"","identifier":"todos-api-25.sh","type":"file","fileName":"Test delete","syntax":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Sat, 6 Jan 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Sat, 6 Jan 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Sat, 6 Jan 2024 11:52:19 GMT","","> curl -i http:\/\/localhost:8080\/todos\/                                              ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 2","Date: Sat, 6 Jan 2024 11:52:24 GMT","","[]"],"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}]},"todos-api-19.sh":{"fileType":"","identifier":"todos-api-19.sh","type":"file","fileName":"Test create and get","syntax":"","content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Sat, 6 Jan 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Sat, 6 Jan 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Sat, 6 Jan 2024 11:48:43 GMT","","{\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"completed\":false}"],"highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup":{"estimatedTime":"5min","url":"\/tutorials\/hummingbird\/todos-1-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup","type":"topic","title":"Setup a Hummingbird application.","role":"project","kind":"project","abstract":[{"type":"text","text":"Create a simple web application."}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-setup":{"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-setup","title":"Application setup","url":"\/tutorials\/todos\/application-setup","abstract":[],"kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Extend-your-Application":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Extend-your-Application","title":"Extend your Application","type":"section","url":"\/tutorials\/hummingbird\/todos-1-setup#Extend-your-Application","abstract":[{"text":"Create a simple web application.","type":"text"}]},"todos-api-02.swift":{"fileName":"Todos.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct Todos: AsyncParsableCommand {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    func run() async throws {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = .debug","        \/\/ create router","        let router = Router()","        \/\/ add logging middleware","        router.middlewares.add(LogRequestsMiddleware(.info))","        \/\/ add hello route","        router.get(\"\/\") { request, context in","            \"Hello\\n\"","        }","        \/\/ add Todos API","        TodoController().addRoutes(to: router.group(\"todos\"))","        \/\/ create application","        let app = Application(","            router: router,","            configuration: .init(address: .hostname(self.hostname, port: self.port))","        )","        \/\/ run application","        try await app.runService()","    }","}"],"identifier":"todos-api-02.swift"},"todos-api-24.sh":{"fileType":"","identifier":"todos-api-24.sh","type":"file","fileName":"Test delete","syntax":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Sat, 6 Jan 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Sat, 6 Jan 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Sat, 6 Jan 2024 11:52:19 GMT"],"highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"todos-api-15.swift":{"fileType":"swift","identifier":"todos-api-15.swift","type":"file","fileName":"TodoController.swift","syntax":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","        group","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo entrypoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo entrypoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos entrypoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo entrypoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"highlights":[{"line":14},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}]},"todos-api-11.swift":{"fileName":"TodoController.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","        group","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo entrypoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo entrypoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"identifier":"todos-api-11.swift"},"hummingbird.png":{"identifier":"hummingbird.png","alt":"Hummingbird logo","variants":[{"traits":["1x","light"],"url":"\/images\/hummingbird.png"}],"type":"image"},"todos-api-20.sh":{"fileName":"Test update","highlights":[],"syntax":"","type":"file","fileType":"","content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Sat, 6 Jan 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"identifier":"todos-api-20.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"url":"\/tutorials\/todos\/api-setup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","role":"article","type":"topic","abstract":[],"title":"API Setup"},"todos-api-16.swift":{"fileName":"TodoController.swift","highlights":[{"line":15},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","        group","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","    }","","    \/\/\/ Delete todo entrypoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo entrypoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo entrypoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos entrypoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo entrypoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"identifier":"todos-api-16.swift"},"https://www.geeksforgeeks.org/repository-design-pattern/":{"title":"repository design pattern","identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","url":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","type":"link","titleInlineContent":[{"text":"repository design pattern","type":"text"}]},"todos-api-07.swift":{"fileName":"TodoController.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","content":["import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","    }","}"],"identifier":"todos-api-07.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Add some functionality to your app"}],"title":"Testing your application with curl"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"title":"Setup your Postgres database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","role":"pseudoSymbol","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"kind":"section"},"todos-api-04.swift":{"fileName":"Todo.swift","highlights":[{"line":2},{"line":16},{"line":17}],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","import Hummingbird","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}","","extension Todo: ResponseEncodable, Decodable, Equatable {}"],"identifier":"todos-api-04.swift"},"todos-api-18.sh":{"fileName":"Test create and get","highlights":[],"syntax":"","type":"file","fileType":"","content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Sat, 6 Jan 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Sat, 6 Jan 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"identifier":"todos-api-18.sh"},"todos-api-06.swift":{"fileName":"TodoMemoryRepository.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","","\/\/\/ Concrete implementation of `TodoRepository` that stores everything in memory","actor TodoMemoryRepository: TodoRepository {","    var todos: [UUID: Todo]","","    init() {","        self.todos = [:]","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        let todo = Todo(id: id, title: title, order: order, url: url, completed: false)","        self.todos[id] = todo","        return todo","    }","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo? {","        return self.todos[id]","    }","    \/\/\/ List all todos","    func list() async throws -> [Todo] {","        return self.todos.values.map { $0 }","    }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        if var todo = self.todos[id] {","            if let title {","                todo.title = title","            }","            if let order {","                todo.order = order","            }","            if let completed {","                todo.completed = completed","            }","            self.todos[id] = todo","            return todo","        }","        return nil","    }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        if self.todos[id] != nil {","            self.todos[id] = nil","            return true","        }","        return false","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        self.todos = [:]","    }","","}"],"identifier":"todos-api-06.swift"},"todos-api-12.sh":{"fileType":"","identifier":"todos-api-12.sh","type":"file","fileName":"Test create","syntax":"","content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Read chapter on testing applications\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 187","Date: Sat, 6 Jan 2024 10:02:08 GMT","","{\"completed\":false,\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"title\":\"Read chapter on testing applications\"}"],"highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Setup-your-project-for-testing":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Setup-your-project-for-testing","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Setup-your-project-for-testing","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"title":"Setup your project for testing"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Setup#Setup-your-project":{"title":"Setup your project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Setup#Setup-your-project","url":"\/tutorials\/hummingbird\/todos-1-setup#Setup-your-project","type":"section","role":"pseudoSymbol","abstract":[{"text":"Create a simple web application.","type":"text"}],"kind":"section"},"todos-api-05.swift":{"fileName":"TodoRepository.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","","\/\/\/ Interface for storing and editing todos","protocol TodoRepository {","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo?","    \/\/\/ List all todos","    func list() async throws -> [Todo]","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo?","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool","    \/\/\/ Delete all todos","    func deleteAll() async throws","}"],"identifier":"todos-api-05.swift"},"todos-api-10.swift":{"fileName":"TodoController.swift","highlights":[{"line":12},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"syntax":"swift","type":"file","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ add Todos API to router group","    func addRoutes(to group: RouterGroup<some RequestContext>) {","        group","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo entrypoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo entrypoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> Todo {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        return try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","    }","}"],"identifier":"todos-api-10.swift"}}}