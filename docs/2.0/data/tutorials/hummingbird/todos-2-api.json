{"sections":[{"chapter":"API Setup","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add some functionality to your application."}]}],"kind":"hero","title":"Add your application API","image":"hummingbird.png","backgroundImage":"hummingbird.png","estimatedTimeInMinutes":20},{"tasks":[{"title":"Todo Controller and Repository","stepsSection":[{"caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the new file "},{"type":"codeVoice","code":"Sources\/App\/Controllers\/TodoController.swift"},{"type":"text","text":"."}]}],"code":"todos-api-01.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Go back to ","type":"text"},{"code":"buildRouter()","type":"codeVoice"},{"text":" in Application+build.swift","type":"text"}]}],"runtimePreview":null,"type":"step","code":"todos-template-06.swift","media":null},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"And add the TodoController endpoints to your router. The Todos API has a URI prefix of “todos”."}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-api-02.swift"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We are going to use the ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/"},{"type":"text","text":" to separate our storage concerns from our API. With this we should be able to create an API and test it without worrying about Database setup."}]}],"caption":[],"runtimePreview":null,"type":"step","code":null},{"media":null,"caption":[],"code":"todos-api-03.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a product ","type":"text"},{"type":"codeVoice","code":"Todo"},{"type":"text","text":" that includes everything to define a todo."}]}]},{"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"todos-api-04.swift","content":[{"inlineContent":[{"text":"We are going to use ","type":"text"},{"code":"Todo","type":"codeVoice"},{"type":"text","text":" as the return value for some of our routes, so it needs to conform to "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":". Later we will also be using it in tests so lets add "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Equatable","type":"codeVoice"},{"text":" conformances.","type":"text"}],"type":"paragraph"}]},{"caption":[],"type":"step","media":null,"code":"todos-api-05.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a ","type":"text"},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" protocol that defines all the methods to manage todos: (get, list, create, update, delete and deleteAll)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a concrete implementation of "},{"code":"TodoRepository","type":"codeVoice"},{"text":" protocol that saves everything to memory. We use an actor because multiple tasks could be accessing the repository at the same time.","type":"text"}]}],"code":"todos-api-06.swift","runtimePreview":null,"caption":[],"media":null,"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Return to TodoController.swift","type":"text"}]}],"code":"todos-api-01.swift","media":null,"runtimePreview":null,"caption":[]},{"runtimePreview":null,"media":null,"caption":[],"type":"step","code":"todos-api-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And add a generic repository member variable conforming to "},{"code":"TodoRepository","type":"codeVoice"},{"type":"text","text":" to be used by the "},{"type":"codeVoice","code":"TodoController"},{"text":" routes.","type":"text"}]}]},{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go to ","type":"text"},{"code":"buildRouter()","type":"codeVoice"},{"type":"text","text":" in Application+build.swift"}]}],"type":"step","code":"todos-api-02.swift","caption":[]},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And add the repository parameter to the TodoController initializer. We are using the memory implementation of the "},{"type":"codeVoice","code":"TodoRepository"},{"text":" we have already implemented above.","type":"text"}]}],"type":"step","code":"todos-api-08.swift","runtimePreview":null,"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return to TodoController.swift. We can now start adding our endpoints."}]}],"type":"step","caption":[],"media":null,"code":"todos-api-07.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Our first endpoint is to return a Todo given an id in the URI. We extract the id from the URI, attempt to convert it to a UUID and then call the repository method "},{"code":"get","type":"codeVoice"},{"text":" and return the result. The result is then converted to a response using the response encoder (JSONEncoder by default) attached to the context.","type":"text"}]}],"type":"step","code":"todos-api-09.swift","runtimePreview":null,"caption":[],"media":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the endpoint returns nil because it could not find a todo this will automatically return a 204 (No Content) HTTP response to the client."}]}],"type":"step","code":"todos-api-09.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This endpoint has a few other features. If it fails to convert the id to a UUID then it throws an "},{"code":"HTTPError","type":"codeVoice"},{"type":"text","text":". This is an error that can be converted by the server to a valid HTTP response. If the server receives an error it cannot convert to an HTTP response it will return a 500 (Internal Server Error) HTTP error to the client."}]}],"runtimePreview":null},{"media":null,"type":"step","caption":[],"code":"todos-api-10.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Our second endpoint is to create a Todo. We have added a struct to decode from the request. In a similar way the get endpoint response uses JSONEncoder to generate its response, this uses the JSONDecoder attached to the context. We then call the repository ","type":"text"},{"code":"create","type":"codeVoice"},{"type":"text","text":" method and return the result."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning an object and not a raw Response, in general sets the response status to 200 (OK). In this situation we want to return a 201 (Created) status. We can do this by returning an "},{"code":"EditedResponse","type":"codeVoice"},{"text":" which can be used to edit the status code and headers of a generated response.","type":"text"}]}],"code":"todos-api-11.swift","caption":[],"runtimePreview":null,"media":null,"type":"step"},{"caption":[],"media":null,"code":"todos-api-12.sh","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We now have an API we can test. Lets use curl to create a Todo. If we include the command line parameter ","type":"text"},{"code":"-i","type":"codeVoice"},{"type":"text","text":" we get the full HTTP response and can see that the status code is 201 (Created)."}]}],"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Then use curl to access the URL that was in the returned json from the previous curl call.","type":"text"}]}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"Cool it works!","type":"text"}],"type":"paragraph"}],"code":"todos-api-13.sh","media":null},{"content":[{"inlineContent":[{"text":"Continuing with adding our API endpoints","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"todos-api-11.swift","runtimePreview":null,"type":"step"},{"code":"todos-api-14.swift","runtimePreview":null,"caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"This is the endpoint that lists all of the todos that have been created. Because ","type":"text"},{"code":"Todo","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Array<Todo>"},{"text":" automatically conforms to ","type":"text"},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":" as well."}]}]},{"runtimePreview":null,"code":"todos-api-15.swift","content":[{"type":"paragraph","inlineContent":[{"text":"This is the endpoint that updates a todo. It extracts the todo id from the URI, decodes the UpdateRequest from the request and then calls the repository ","type":"text"},{"type":"codeVoice","code":"update"},{"text":" function.","type":"text"}]}],"type":"step","media":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that deletes a todo. It extracts the todo id from the URI and calls the repository "},{"type":"codeVoice","code":"delete"},{"text":" function.","type":"text"}]}],"caption":[],"media":null,"code":"todos-api-16.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"The final endpoint is the one that deletes all todos. It simply calls the repository ","type":"text"},{"type":"codeVoice","code":"deleteAll"},{"type":"text","text":" function, as it doesn’t need to extract any information from the request."}]}],"media":null,"caption":[],"code":"todos-api-17.swift","runtimePreview":null,"type":"step"}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Create a controller type that will hold the Todos API"}],"type":"paragraph"}],"media":"hummingbird.png","mediaPosition":"trailing"}],"anchor":"Todo-Controller-and-Repository"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Use curl to ensure your API is working as expected.","type":"text"}],"type":"paragraph"}],"media":"hummingbird.png"}],"title":"Testing your application with curl","stepsSection":[{"media":null,"code":"todos-api-18.sh","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Lets test the full API. First we are going to create two todos"}],"type":"paragraph"}],"caption":[],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When we query the URL returned by the first curl request we should get the first Todo added."}]}],"type":"step","media":null,"caption":[],"code":"todos-api-19.sh","runtimePreview":null},{"caption":[],"media":null,"type":"step","code":"todos-api-20.sh","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we update the second Todo and set it to completed …"}]}],"runtimePreview":null},{"caption":[],"type":"step","code":"todos-api-21.sh","content":[{"type":"paragraph","inlineContent":[{"text":"when we list all the tests you will see it is now flagged as completed","type":"text"}]}],"media":null,"runtimePreview":null},{"media":null,"code":"todos-api-22.sh","content":[{"type":"paragraph","inlineContent":[{"text":"If we delete a Todo …","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[]},{"media":null,"type":"step","caption":[],"code":"todos-api-23.sh","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"when we try to get it again a 204 (No Content) response is returned, as it no longer exists."}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we delete all of the Todos …"}]}],"caption":[],"media":null,"code":"todos-api-24.sh","runtimePreview":null},{"code":"todos-api-25.sh","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when we list the Todos, the list is empty."}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"This is not exactly a thorough way to test your application. It is error prone and cumbersome. Move onto the next chapter to discover how you can make this process more streamlined.","type":"text"}]}]}],"anchor":"Testing-your-application-with-curl"}],"kind":"tasks"},{"abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","isActive":true},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Testing your application"}],"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","kind":"task"}]}]}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"]],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"metadata":{"category":"Todo backend","categoryPathComponent":"Todos","role":"project","title":"Add your application API"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-2-api"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"kind":"project","references":{"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"title":"Project testing setup","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup"},"todos-template-06.swift":{"fileType":"swift","highlights":[],"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    return router","}"],"identifier":"todos-template-06.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Application+build.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","role":"pseudoSymbol","type":"section","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"title":"Testing your application with curl","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"},"todos-api-25.sh":{"type":"file","fileName":"Test delete","syntax":"","fileType":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:52:19 GMT","","> curl -i http:\/\/localhost:8080\/todos\/                                              ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 2","Date: Mon, 9 Sep 2024 11:52:24 GMT","","[]"],"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"identifier":"todos-api-25.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","role":"pseudoSymbol","type":"section","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"title":"Test your application","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"},"todos-api-14.swift":{"fileType":"swift","highlights":[{"line":12},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"identifier":"todos-api-14.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"title":"Testing your application","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","abstract":[],"type":"topic","url":"\/tutorials\/todos\/testing-your-application"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"title":"Setup a Postgres repository","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"title":"Setup your Postgres database","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},"todos-api-22.sh":{"type":"file","fileName":"Test delete","syntax":"","fileType":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT"],"highlights":[],"identifier":"todos-api-22.sh"},"todos-api-07.swift":{"fileType":"swift","highlights":[],"content":["import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","    }","}"],"identifier":"todos-api-07.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"url":"\/tutorials\/hummingbird\/todos-2-api","role":"project","estimatedTime":"20min","type":"topic","abstract":[{"type":"text","text":"Add some functionality to your application."}],"title":"Add your application API","kind":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"title":"Create a Hummingbird application.","kind":"project","role":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"estimatedTime":"5min","type":"topic","url":"\/tutorials\/hummingbird\/todos-1-template"},"todos-api-02.swift":{"type":"file","fileName":"Sources\/App\/Application+build.swift","syntax":"swift","fileType":"swift","content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    router.addRoutes(TodoController().endpoints, atPath: \"\/todos\")","    return router","}"],"highlights":[],"identifier":"todos-api-02.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"title":"Use PostgresNIO to store your Todos in a Postgres database","kind":"project","role":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"estimatedTime":"15min","type":"topic","url":"\/tutorials\/hummingbird\/todos-4-postgres"},"todos-api-12.sh":{"fileType":"","highlights":[],"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Read chapter on testing applications\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 187","Date: Mon, 9 Sep 2024 10:02:08 GMT","","{\"completed\":false,\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"title\":\"Read chapter on testing applications\"}"],"identifier":"todos-api-12.sh","type":"file","syntax":"","fileName":"Test create"},"todos-api-19.sh":{"type":"file","fileName":"Test create and get","syntax":"","fileType":"","content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Mon, 9 Sep 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:43 GMT","","{\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"completed\":false}"],"highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"identifier":"todos-api-19.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"url":"\/tutorials\/todos\/store-todos-in-a-database","role":"article","type":"topic","abstract":[],"title":"Store Todos in a database","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"},"todos-api-04.swift":{"fileType":"swift","highlights":[{"line":2},{"line":16},{"line":17}],"content":["import Foundation","import Hummingbird","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}","","extension Todo: ResponseEncodable, Decodable, Equatable {}"],"identifier":"todos-api-04.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Repositories\/Todo.swift"},"todos-api-05.swift":{"type":"file","fileName":"Sources\/App\/Repositories\/TodoRepository.swift","syntax":"swift","fileType":"swift","content":["import Foundation","","\/\/\/ Interface for storing and editing todos","protocol TodoRepository: Sendable {","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo?","    \/\/\/ List all todos","    func list() async throws -> [Todo]","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo?","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool","    \/\/\/ Delete all todos","    func deleteAll() async throws","}"],"highlights":[],"identifier":"todos-api-05.swift"},"todos-api-09.swift":{"fileType":"swift","highlights":[],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","}"],"identifier":"todos-api-09.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"title":"Application Setup","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","abstract":[],"type":"topic","url":"\/tutorials\/todos\/application-setup"},"todos-api-11.swift":{"type":"file","fileName":"Sources\/App\/Controllers\/TodoController.swift","syntax":"swift","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"highlights":[],"identifier":"todos-api-11.swift"},"todos-api-24.sh":{"fileType":"","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:52:19 GMT"],"identifier":"todos-api-24.sh","type":"file","syntax":"","fileName":"Test delete"},"todos-api-23.sh":{"type":"file","fileName":"Test delete","syntax":"","fileType":"","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"identifier":"todos-api-23.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"title":"Create your project","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"title":"API Setup","kind":"article","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","abstract":[],"type":"topic","url":"\/tutorials\/todos\/api-setup"},"todos-api-01.swift":{"fileType":"swift","highlights":[],"content":["import Hummingbird","","struct TodoController {","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","    }","}"],"identifier":"todos-api-01.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"todos-api-03.swift":{"type":"file","fileName":"Sources\/App\/Repositories\/Todo.swift","syntax":"swift","fileType":"swift","content":["import Foundation","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}"],"highlights":[],"identifier":"todos-api-03.swift"},"todos-api-21.sh":{"fileType":"","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Mon, 9 Sep 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 330","Date: Mon, 9 Sep 2024 11:50:26 GMT","","[{\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\"},{\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}]",""],"identifier":"todos-api-21.sh","type":"file","syntax":"","fileName":"Test update"},"todos-api-13.sh":{"type":"file","fileName":"Test get","syntax":"","fileType":"","content":["> curl http:\/\/localhost:8080\/todos\/284DC153-4FE9-458D-8A93-6CB60990B2F3","{\"completed\":false,\"title\":\"Read chapter on testing applications\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\"}"],"highlights":[],"identifier":"todos-api-13.sh"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"url":"\/tutorials\/todos","role":"overview","type":"topic","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"title":"Build a Todos application.","kind":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"https://www.geeksforgeeks.org/repository-design-pattern/":{"identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","type":"link","url":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","titleInlineContent":[{"type":"text","text":"repository design pattern"}],"title":"repository design pattern"},"todos-api-18.sh":{"type":"file","fileName":"Test create and get","syntax":"","fileType":"","content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Mon, 9 Sep 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"highlights":[],"identifier":"todos-api-18.sh"},"todos-api-20.sh":{"fileType":"","highlights":[],"content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Mon, 9 Sep 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"identifier":"todos-api-20.sh","type":"file","syntax":"","fileName":"Test update"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"title":"Testing your application","kind":"project","role":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"estimatedTime":"15min","type":"topic","url":"\/tutorials\/hummingbird\/todos-3-testing"},"todos-api-15.swift":{"type":"file","fileName":"Sources\/App\/Controllers\/TodoController.swift","syntax":"swift","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"highlights":[{"line":14},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"identifier":"todos-api-15.swift"},"todos-api-08.swift":{"fileType":"swift","highlights":[{"line":13}],"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add health endpoint","    router.get(\"\/health\") { _, _ -> HTTPResponse.Status in","        return .ok","    }","    router.addRoutes(TodoController(repository: TodoMemoryRepository()).endpoints, atPath: \"\/todos\")","    return router","}"],"identifier":"todos-api-08.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Application+build.swift"},"todos-api-17.swift":{"type":"file","fileName":"Sources\/App\/Controllers\/TodoController.swift","syntax":"swift","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","            .delete(use: deleteAll)","    }","","    \/\/\/ Delete all todos endpoint","    @Sendable func deleteAll(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        try await self.repository.deleteAll()","        return .ok","    }","","    \/\/\/ Delete todo endpoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"highlights":[{"line":16},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"identifier":"todos-api-17.swift"},"hummingbird.png":{"identifier":"hummingbird.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}],"alt":"Hummingbird logo"},"todos-api-10.swift":{"type":"file","fileName":"Sources\/App\/Controllers\/TodoController.swift","syntax":"swift","fileType":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> Todo {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        return try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","    }","}"],"highlights":[{"line":12},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"identifier":"todos-api-10.swift"},"todos-api-16.swift":{"fileType":"swift","highlights":[{"line":15},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","    }","","    \/\/\/ Delete todo endpoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"identifier":"todos-api-16.swift","type":"file","syntax":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"todos-api-06.swift":{"type":"file","fileName":"Sources\/App\/Repositories\/TodoMemoryRepository.swift","syntax":"swift","fileType":"swift","content":["import Foundation","","\/\/\/ Concrete implementation of `TodoRepository` that stores everything in memory","actor TodoMemoryRepository: TodoRepository {","    var todos: [UUID: Todo]","","    init() {","        self.todos = [:]","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        let todo = Todo(id: id, title: title, order: order, url: url, completed: false)","        self.todos[id] = todo","        return todo","    }","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo? {","        return self.todos[id]","    }","    \/\/\/ List all todos","    func list() async throws -> [Todo] {","        return self.todos.values.map { $0 }","    }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        if var todo = self.todos[id] {","            if let title {","                todo.title = title","            }","            if let order {","                todo.order = order","            }","            if let completed {","                todo.completed = completed","            }","            self.todos[id] = todo","            return todo","        }","        return nil","    }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        if self.todos[id] != nil {","            self.todos[id] = nil","            return true","        }","        return false","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        self.todos = [:]","    }","","}"],"highlights":[],"identifier":"todos-api-06.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Add some functionality to your application."}],"title":"Todo Controller and Repository","kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"}}}