{"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/ServiceLifecycleProvider"],"title":"Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncCallbackResponder"],"title":"Router"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBURL","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponse"],"title":"Request\/Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable"],"title":"Encoding\/Decoding"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware"],"title":"Middleware"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensible","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensions"],"title":"Extending the Application"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPool","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionSource","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnectionSource","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolError"],"title":"Connection Pool"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError"],"title":"Storage"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FlatDictionary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParser"],"title":"Miscellaneous"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"collection","roleHeading":"Framework","symbolKind":"module","modules":[{"name":"Hummingbird"}],"title":"Hummingbird","externalID":"Hummingbird"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"reference","isActive":true},{"text":" is a lightweight, flexible server framework designed to require the minimum number of dependencies.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It provides a router for directing different endpoints to their handlers, middleware for processing requests before they reach your handlers and processing the responses returned, support for adding channel handlers to extend the HTTP server, extending the core "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","isActive":true},{"type":"text","text":" types and providing custom encoding\/decoding of "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" objects."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The interface is fairly standard. Anyone who has had experience of Vapor, Express.js etc will recognise most of the APIs. Simple setup is as follows"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Hummingbird","","let app = HBApplication(configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080)))","app.router.get(\"hello\") { request -> String in","    return \"Hello\"","}","try app.start()","app.wait()"]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/hummingbird"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT"],"title":"Related Documentation"}],"hierarchy":{"paths":[[]]},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation":{"title":"HummingbirdFoundation","url":"\/documentation\/hummingbirdfoundation","kind":"symbol","abstract":[{"text":"Hummingbird features that require Foundation.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseCodable":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseCodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseCodable"}],"title":"HBResponseCodable","kind":"symbol","abstract":[{"type":"text","text":"Protocol for codable object that can generate a response"}],"url":"\/documentation\/hummingbirdlambda\/hbresponsecodable","navigatorTitle":[{"kind":"identifier","text":"HBResponseCodable"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExtendingHummingbird":{"role":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExtendingHummingbird","title":"Extending Hummingbird","kind":"article","abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"url":"\/documentation\/hummingbird\/extendinghummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionSource":{"type":"topic","abstract":[{"type":"text","text":"Source of "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection","type":"reference","isActive":true}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionsource","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionSource","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionSource"}],"title":"HBConnectionSource","navigatorTitle":[{"kind":"identifier","text":"HBConnectionSource"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseGenerator":{"title":"HBResponseGenerator","url":"\/documentation\/hummingbirdlambda\/hbresponsegenerator","kind":"symbol","abstract":[{"type":"text","text":"Object that can generate a "},{"code":"Response","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseGenerator","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"HBResponseGenerator","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncCallbackResponder":{"title":"HBAsyncCallbackResponder","url":"\/documentation\/hummingbirdlambda\/hbasynccallbackresponder","kind":"symbol","abstract":[{"text":"Responder that calls supplied closure","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncCallbackResponder","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncCallbackResponder","kind":"identifier"}],"navigatorTitle":[{"text":"HBAsyncCallbackResponder","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdXCT":{"role":"collection","kind":"symbol","abstract":[{"text":"Test framework for Hummingbird","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdXCT","title":"HummingbirdXCT","url":"\/documentation\/hummingbirdxct"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"collectionGroup","title":"Logging, Metrics and Tracing","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistError":{"url":"\/documentation\/hummingbirdlambda\/hbpersisterror","abstract":[{"type":"text","text":"Errors return by persist framework"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistError"}],"title":"HBPersistError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistError","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBExtensible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensible","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensible","title":"HBExtensible","url":"\/documentation\/hummingbirdlambda\/hbextensible","abstract":[{"text":"Protocol for extensible classes","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"HBExtensible","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","type":"topic","url":"\/documentation\/hummingbirdauth","kind":"symbol","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncodable":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncodable"}],"title":"HBResponseEncodable","kind":"symbol","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"type":"codeVoice","code":"HBApplication.encoder"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbirdlambda\/hbresponseencodable","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncodable"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBURL":{"type":"topic","navigatorTitle":[{"text":"HBURL","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBURL","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBURL","kind":"identifier"}],"abstract":[{"text":"Simple URL parser","type":"text"}],"title":"HBURL","url":"\/documentation\/hummingbirdlambda\/hburl"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterGroup":{"title":"HBRouterGroup","url":"\/documentation\/hummingbirdlambda\/hbroutergroup","kind":"symbol","abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterGroup","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterGroup","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouterGroup","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouteHandler":{"title":"HBRouteHandler","url":"\/documentation\/hummingbirdlambda\/hbroutehandler","kind":"symbol","abstract":[{"type":"text","text":"Object for handling requests."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouteHandler","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncConnection":{"type":"topic","abstract":[{"text":"Connection that supports async close","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/hbasyncconnection","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBAsyncConnection"}],"title":"HBAsyncConnection","navigatorTitle":[{"kind":"identifier","text":"HBAsyncConnection"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecoder":{"url":"\/documentation\/hummingbirdlambda\/hbrequestdecoder","type":"topic","kind":"symbol","title":"HBRequestDecoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecoder","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCORSMiddleware":{"abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBCORSMiddleware"}],"url":"\/documentation\/hummingbirdlambda\/hbcorsmiddleware","title":"HBCORSMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCORSMiddleware","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCORSMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBCallbackResponder":{"title":"HBCallbackResponder","url":"\/documentation\/hummingbirdlambda\/hbcallbackresponder","kind":"symbol","abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBCallbackResponder","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestDecodable":{"title":"HBRequestDecodable","url":"\/documentation\/hummingbirdlambda\/hbrequestdecodable","kind":"symbol","abstract":[{"code":"HBRouteHandler","type":"codeVoice"},{"text":" which uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to initialize it","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestDecodable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecodable","kind":"identifier"}],"navigatorTitle":[{"text":"HBRequestDecodable","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","kind":"symbol","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddlewareGroup":{"role":"symbol","navigatorTitle":[{"text":"HBMiddlewareGroup","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMiddlewareGroup","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddlewareGroup","title":"HBMiddlewareGroup","url":"\/documentation\/hummingbirdlambda\/hbmiddlewaregroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParameters":{"url":"\/documentation\/hummingbirdlambda\/hbparameters","abstract":[{"text":"Store for parameters key, value pairs extracted from URI","type":"text"}],"type":"topic","navigatorTitle":[{"text":"HBParameters","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParameters","kind":"identifier"}],"title":"HBParameters","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParameters","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPool":{"type":"topic","abstract":[{"type":"text","text":"Connection Pool"}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionpool","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPool","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionPool"}],"title":"HBConnectionPool","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPool"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequest":{"role":"symbol","navigatorTitle":[{"text":"HBRequest","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequest","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequest","title":"HBRequest","url":"\/documentation\/hummingbirdlambda\/hbrequest"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBEnvironment":{"title":"HBEnvironment","url":"\/documentation\/hummingbirdlambda\/hbenvironment","kind":"symbol","abstract":[{"text":"Access environment variables","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBEnvironment","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBEnvironment","kind":"identifier"}],"navigatorTitle":[{"text":"HBEnvironment","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncRouteHandler":{"title":"HBAsyncRouteHandler","url":"\/documentation\/hummingbirdlambda\/hbasyncroutehandler","kind":"symbol","abstract":[{"type":"text","text":"Route Handler using async\/await methods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncRouteHandler","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncRouteHandler"}],"navigatorTitle":[{"kind":"identifier","text":"HBAsyncRouteHandler"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBApplication":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBApplication","abstract":[{"text":"Application class. Brings together all the components of Hummingbird together","type":"text"}],"navigatorTitle":[{"text":"HBApplication","kind":"identifier"}],"title":"HBApplication","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBApplication","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdlambda\/hbapplication","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMediaType":{"type":"topic","abstract":[{"text":"Define media type of file","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/hbmediatype","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMediaType","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMediaType","kind":"identifier"}],"title":"HBMediaType","navigatorTitle":[{"text":"HBMediaType","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda"}],"url":"\/documentation\/hummingbirdlambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponse":{"url":"\/documentation\/hummingbirdlambda\/hbresponse","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponse"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponse"}],"title":"HBResponse","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponse","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMiddleware":{"abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMiddleware","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbmiddleware","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBMiddleware","kind":"identifier"}],"title":"HBMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","title":"HummingbirdJobs","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/FlatDictionary":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FlatDictionary"}],"kind":"symbol","abstract":[{"type":"text","text":"Provides Dictionary like indexing, but uses a flat array of key"},{"type":"text","text":" "},{"type":"text","text":"value pairs, plus an array of hash keys for lookup for storage."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlatDictionary"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FlatDictionary","title":"FlatDictionary","url":"\/documentation\/hummingbirdlambda\/flatdictionary"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis","kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","abstract":[{"text":"Integration with Vapor Fluent ORM framework.","type":"text"}],"url":"\/documentation\/hummingbirdfluent"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRequestContext":{"role":"symbol","navigatorTitle":[{"text":"HBRequestContext","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Context that created HBRequest."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRequestContext","title":"HBRequestContext","url":"\/documentation\/hummingbirdlambda\/hbrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponder":{"title":"HBResponder","url":"\/documentation\/hummingbirdlambda\/hbresponder","kind":"symbol","abstract":[{"text":"Protocol for object that produces a response given a request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponder","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponder","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBResponseEncoder":{"type":"topic","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBResponseEncoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseEncoder","kind":"identifier"}],"abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"title":"HBResponseEncoder","url":"\/documentation\/hummingbirdlambda\/hbresponseencoder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterBuilder":{"title":"HBRouterBuilder","url":"\/documentation\/hummingbirdlambda\/hbrouterbuilder","kind":"symbol","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"HBResponder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterBuilder","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouterBuilder"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBDateCache":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBDateCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBDateCache"}],"title":"HBDateCache","kind":"symbol","abstract":[{"type":"text","text":"Current date cache."}],"url":"\/documentation\/hummingbirdlambda\/hbdatecache","navigatorTitle":[{"kind":"identifier","text":"HBDateCache"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPoolError":{"type":"topic","abstract":[{"type":"text","text":"Errors generated by Connection Pool"}],"url":"\/documentation\/hummingbirdlambda\/hbconnectionpoolerror","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolError","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionPoolError"}],"title":"HBConnectionPoolError","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPoolError"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/ServiceLifecycleProvider":{"role":"symbol","type":"topic","url":"\/documentation\/hummingbirdlambda\/servicelifecycleprovider","abstract":[{"text":"Define where we get the ServiceLifecycle from.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"ServiceLifecycleProvider","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/ServiceLifecycleProvider","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServiceLifecycleProvider","kind":"identifier"}],"title":"ServiceLifecycleProvider"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethodOptions":{"title":"HBRouterMethodOptions","url":"\/documentation\/hummingbirdlambda\/hbroutermethodoptions","kind":"symbol","abstract":[{"text":"Options available to routes","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethodOptions","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRouterMethodOptions","kind":"identifier"}],"navigatorTitle":[{"text":"HBRouterMethodOptions","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBMetricsMiddleware":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMetricsMiddleware"}],"url":"\/documentation\/hummingbirdlambda\/hbmetricsmiddleware","kind":"symbol","abstract":[{"text":"Middleware recording metrics for each request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBMetricsMiddleware","navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}],"title":"HBMetricsMiddleware","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBRouterMethods":{"title":"HBRouterMethods","url":"\/documentation\/hummingbirdlambda\/hbroutermethods","kind":"symbol","abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBRouterMethods","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"type":"topic","kind":"article","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriverFactory":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"title":"HBPersistDriverFactory","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbpersistdriverfactory","kind":"symbol","abstract":[{"type":"text","text":"Factory class for persist drivers"}],"navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriverFactory","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HTTPHeadersPatch":{"type":"topic","abstract":[{"type":"text","text":"Used to Patch HTTPHeaders. Remembers if a header was added in with "},{"code":"add","type":"codeVoice"},{"type":"text","text":" or "},{"code":"replaceOrAdd","type":"codeVoice"}],"url":"\/documentation\/hummingbirdlambda\/httpheaderspatch","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HTTPHeadersPatch","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPHeadersPatch"}],"title":"HTTPHeadersPatch","navigatorTitle":[{"kind":"identifier","text":"HTTPHeadersPatch"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBLogRequestsMiddleware":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBLogRequestsMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"title":"HBLogRequestsMiddleware","kind":"symbol","abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"url":"\/documentation\/hummingbirdlambda\/hblogrequestsmiddleware","navigatorTitle":[{"kind":"identifier","text":"HBLogRequestsMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBParser":{"url":"\/documentation\/hummingbirdlambda\/hbparser","abstract":[{"text":"Reader object for parsing String buffers","type":"text"}],"type":"topic","navigatorTitle":[{"text":"HBParser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBParser","kind":"identifier"}],"title":"HBParser","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBParser","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnection":{"title":"HBConnection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBConnection","kind":"identifier"}],"navigatorTitle":[{"text":"HBConnection","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol describing a single connection"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbconnection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncConnectionSource":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBAsyncConnectionSource"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncConnectionSource"}],"title":"HBAsyncConnectionSource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnectionSource","url":"\/documentation\/hummingbirdlambda\/hbasyncconnectionsource","abstract":[{"type":"text","text":"Source of "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncConnection","type":"reference","isActive":true}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBConnectionPoolGroup":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBConnectionPoolGroup"}],"type":"topic","url":"\/documentation\/hummingbirdlambda\/hbconnectionpoolgroup","title":"HBConnectionPoolGroup","navigatorTitle":[{"kind":"identifier","text":"HBConnectionPoolGroup"}],"abstract":[{"type":"text","text":"Array of connection pools associated with an EventLoopGroup."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBConnectionPoolGroup","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBPersistDriver":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriver","kind":"identifier"}],"abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"url":"\/documentation\/hummingbirdlambda\/hbpersistdriver","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBPersistDriver","role":"symbol","title":"HBPersistDriver","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"role":"collection","kind":"symbol","abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","title":"HummingbirdCompression","url":"\/documentation\/hummingbirdcompression"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBAsyncMiddleware":{"abstract":[{"text":"Middleware using async\/await","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBAsyncMiddleware","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/hbasyncmiddleware","type":"topic","role":"symbol","navigatorTitle":[{"text":"HBAsyncMiddleware","kind":"identifier"}],"title":"HBAsyncMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","kind":"symbol","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","url":"\/documentation\/hummingbird\/router","kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"topic","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","title":"HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/HBExtensions":{"title":"HBExtensions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"navigatorTitle":[{"text":"HBExtensions","kind":"identifier"}],"abstract":[{"text":"Extend objects with additional member variables","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/hbextensions","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/HBExtensions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","title":"Encoding and Decoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"role":"collectionGroup","type":"topic","url":"\/documentation\/hummingbird\/encodinganddecoding","kind":"article"}}}