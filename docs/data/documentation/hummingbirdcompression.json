{"abstract":[{"type":"text","text":"Adds request decompression and response compression to Hummingbird"}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"symbolKind":"module","role":"collection","modules":[{"name":"HummingbirdCompression"}],"roleHeading":"Framework","externalID":"HummingbirdCompression","title":"HummingbirdCompression"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"],"title":"Structures"}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Add support for compressing HTTP response data. Adding response compression means when a request comes in with header ","type":"text"},{"type":"codeVoice","code":"accept-encoding"},{"text":" set to ","type":"text"},{"type":"codeVoice","code":"gzip"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"deflate"},{"text":" the server will compression the response body.","type":"text"}]},{"syntax":"swift","code":["let app = HBApplication()","\/\/ run response compression on application thread pool when buffer is ","\/\/ larger than 32768 bytes otherwise run it on the eventloop","app.addResponseCompression(execute: .onThreadPool(threshold: 32768))"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Add support for decompressing HTTP request data. Adding request decompression means when a request comes in with header ","type":"text"},{"code":"content-encoding","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"gzip","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"deflate","type":"codeVoice"},{"text":" the server will attempt to decompress the request body.","type":"text"}]},{"syntax":"swift","code":["\/\/ run request decompression on eventloop with no limit to the size","\/\/ of data that can be decompressed","app.addRequestDecompression(execute: .onEventLoop, limit: .none)"],"type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"variants":[{"paths":["\/documentation\/hummingbirdcompression"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"text":"Adds request decompression and response compression to Hummingbird","type":"text"}],"title":"HummingbirdCompression","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcompression","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/HTTPDecompressionLimit":{"abstract":[{"text":"Limits for when decompressing HTTP request data","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HTTPDecompressionLimit","kind":"identifier"}],"title":"HTTPDecompressionLimit","role":"symbol","navigatorTitle":[{"text":"HTTPDecompressionLimit","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcompression\/httpdecompressionlimit","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/HTTPDecompressionLimit"}}}