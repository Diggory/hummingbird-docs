{"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","interfaceLanguage":"swift"},"kind":"symbol","topicSections":[{"title":"Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBindAddress"]},{"title":"Request","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerOutput"]},{"title":"Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback"]},{"title":"Errors","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPResponseError"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable"]}],"metadata":{"role":"collection","externalID":"HummingbirdCore","title":"HummingbirdCore","symbolKind":"module","modules":[{"name":"HummingbirdCore"}],"roleHeading":"Framework"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"HummingbirdCore contains a Swift NIO based HTTP server. When starting the server you provide it with a struct that conforms to "},{"type":"codeVoice","code":"HBHTTPResponder"},{"type":"text","text":" to define how the server should respond to requests. For example the following is a responder that always returns a response containing the word “Hello” in the body."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct HelloResponder: HBHTTPResponder {","    func respond(to request: HBHTTPRequest, context: ChannelHandlerContext, onComplete: @escaping (Result<HBHTTPResponse, Error>) -> Void) {","        let responseHead = HTTPResponseHead(version: .init(major: 1, minor: 1), status: .ok)","        let responseBody = context.channel.allocator.buffer(string: \"Hello\")","        let response = HBHTTPResponse(head: responseHead, body: .byteBuffer(responseBody))","        onComplete(.success(response))","    }","}"]},{"inlineContent":[{"type":"text","text":"You then initialise a "},{"type":"codeVoice","code":"HBHTTPServer"},{"type":"text","text":", call "},{"type":"codeVoice","code":"start"},{"type":"text","text":" on it and then "},{"type":"codeVoice","code":"wait"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)","let server = HBHTTPServer(","    group: eventLoopGroup, ","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try server.start(responder: HelloResponder()).wait()","\/\/ Wait until server closes which never happens as server channel is never closed","try server.wait()"]},{"type":"heading","text":"Swift service lifecycle","level":2,"anchor":"Swift-service-lifecycle"},{"inlineContent":[{"type":"text","text":"If you are using HummingbirdCore outside of Hummingbird ideally you would use it along with the swift-server library "},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true,"type":"reference"},{"type":"text","text":". This gives you a framework for clean initialization and shutdown of your server. The following sets up a Lifecycle that initializes the HTTP server and stops it when the application shuts down."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Lifecycle","import LifecycleNIOCompat","","let lifecycle = ServiceLifecycle()","lifecycle.register(","    label: \"HTTP Server\",","    start: .eventLoopFuture { self.server.start(responder: MyResponder()) },","    shutdown: .eventLoopFuture(self.server.stop)",")","lifecycle.start { error in","    if let error = error {","        print(\"ERROR: \\(error)\")","    }","}","lifecycle.wait()"]}]}],"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcore"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1ChannelInitializer":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","title":"HTTP1ChannelInitializer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTP1ChannelInitializer","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/http1channelinitializer","abstract":[{"text":"Setup child channel for HTTP1","type":"text"}],"navigatorTitle":[{"text":"HTTP1ChannelInitializer","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBByteBufferStreamer":{"abstract":[{"type":"text","text":"Request body streamer. "},{"type":"codeVoice","code":"HBHTTPDecodeHandler"},{"type":"text","text":" feeds this with ByteBuffers while the Router consumes them"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBByteBufferStreamer"}],"type":"topic","title":"HBByteBufferStreamer","navigatorTitle":[{"text":"HBByteBufferStreamer","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/hbbytebufferstreamer"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBStreamerProtocol":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerProtocol","abstract":[{"type":"text","text":"Protocol for objects providing a stream of ByteBuffers"}],"navigatorTitle":[{"kind":"identifier","text":"HBStreamerProtocol"}],"type":"topic","title":"HBStreamerProtocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBStreamerProtocol"}],"url":"\/documentation\/hummingbird\/hbstreamerprotocol"},"https://github.com/swift-server/swift-service-lifecycle":{"type":"link","titleInlineContent":[{"text":"swift-service-lifecycle","type":"text"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponder"}],"url":"\/documentation\/hummingbirdcore\/hbhttpresponder","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponder"}],"abstract":[{"type":"text","text":"Protocol for objects generating a "},{"code":"HBHTTPResponse","type":"codeVoice"},{"type":"text","text":" from a "},{"code":"HBHTTPRequest","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","title":"HBHTTPResponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseBody":{"role":"symbol","abstract":[{"type":"text","text":"Response body. Can be a single ByteBuffer, a stream of ByteBuffers or empty"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbresponsebody","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponseBody"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBody","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseBody"}],"title":"HBResponseBody"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBHTTPError":{"abstract":[{"type":"text","text":"Default HTTP error. Provides an HTTP status and a message is so desired"}],"role":"symbol","title":"HBHTTPError","navigatorTitle":[{"text":"HBHTTPError","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbhttperror","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPError"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPError"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBChannelInitializer":{"url":"\/documentation\/hummingbirdcore\/hbchannelinitializer","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBChannelInitializer","kind":"identifier"}],"navigatorTitle":[{"text":"HBChannelInitializer","kind":"identifier"}],"type":"topic","title":"HBChannelInitializer","role":"symbol","abstract":[{"type":"text","text":"HTTPServer child channel initializer protocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestBody":{"title":"HBRequestBody","type":"topic","abstract":[{"text":"Request Body. Either a ByteBuffer or a ByteBuffer streamer","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody","url":"\/documentation\/hummingbird\/hbrequestbody","navigatorTitle":[{"kind":"identifier","text":"HBRequestBody"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestBody"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","role":"collection","abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server"}],"title":"HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamCallback":{"url":"\/documentation\/hummingbirdcore\/hbstreamcallback","title":"HBStreamCallback","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBStreamCallback"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback","abstract":[{"type":"text","text":"Function returning streamed byte buffer output"}],"navigatorTitle":[{"kind":"identifier","text":"HBStreamCallback"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBStreamerOutput":{"title":"HBStreamerOutput","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerOutput","url":"\/documentation\/hummingbird\/hbstreameroutput","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Values returned when we consume the contents of the streamer"}],"navigatorTitle":[{"kind":"identifier","text":"HBStreamerOutput"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBStreamerOutput"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBindAddress":{"url":"\/documentation\/hummingbird\/hbbindaddress","kind":"symbol","type":"topic","role":"symbol","title":"HBBindAddress","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBBindAddress","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBindAddress","abstract":[{"text":"Address to bind server to","type":"text"}],"navigatorTitle":[{"text":"HBBindAddress","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPRequest":{"navigatorTitle":[{"kind":"identifier","text":"HBHTTPRequest"}],"abstract":[{"text":"HTTP request","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPRequest"}],"title":"HBHTTPRequest","url":"\/documentation\/hummingbirdcore\/hbhttprequest"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseBodyStreamer":{"title":"HBResponseBodyStreamer","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyStreamer","url":"\/documentation\/hummingbird\/hbresponsebodystreamer","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Object supplying ByteBuffers for a response body"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseBodyStreamer"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseBodyStreamer"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBSendable":{"type":"topic","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"HBSendable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable","title":"HBSendable","url":"\/documentation\/hummingbirdcore\/hbsendable","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBSendable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","role":"collection","abstract":[{"type":"text","text":"Add TLS support to Hummingbird server"}],"title":"HummingbirdTLS","url":"\/documentation\/hummingbirdtls","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponse":{"abstract":[{"text":"HTTP response","type":"text"}],"role":"symbol","title":"HBHTTPResponse","navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponse"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttpresponse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponse"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","type":"topic","role":"collection","url":"\/documentation\/hummingbirdcore","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPServer":{"navigatorTitle":[{"text":"HBHTTPServer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPServer","kind":"identifier"}],"role":"symbol","abstract":[{"text":"HTTP server class","type":"text"}],"title":"HBHTTPServer","url":"\/documentation\/hummingbirdcore\/hbhttpserver","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBodyStreamerSequence":{"navigatorTitle":[{"kind":"identifier","text":"HBRequestBodyStreamerSequence"}],"abstract":[{"text":"AsyncSequence providing ByteBuffers from a request body stream","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestBodyStreamerSequence"}],"title":"HBRequestBodyStreamerSequence","url":"\/documentation\/hummingbirdcore\/hbrequestbodystreamersequence"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBHTTPResponseError":{"title":"HBHTTPResponseError","url":"\/documentation\/hummingbird\/hbhttpresponseerror","abstract":[{"text":"An error that is capable of generating an HTTP response","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponseError"}],"navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponseError"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPResponseError","kind":"symbol","type":"topic","role":"symbol"}}}