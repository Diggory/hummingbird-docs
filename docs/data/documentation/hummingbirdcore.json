{"metadata":{"role":"collection","symbolKind":"module","roleHeading":"Framework","title":"HummingbirdCore","modules":[{"name":"HummingbirdCore"}],"externalID":"HummingbirdCore"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"]}],"sections":[],"variants":[{"paths":["\/documentation\/hummingbirdcore"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBindAddress"]},{"title":"Request","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerOutput"]},{"title":"Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyStreamer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback"]},{"title":"Errors","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPError","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPResponseError"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdCore contains a Swift NIO based HTTP server. When starting the server you provide it with a struct that conforms to ","type":"text"},{"code":"HBHTTPResponder","type":"codeVoice"},{"type":"text","text":" to define how the server should respond to requests. For example the following is a responder that always returns a response containing the word “Hello” in the body."}]},{"code":["struct HelloResponder: HBHTTPResponder {","    func respond(to request: HBHTTPRequest, context: ChannelHandlerContext, onComplete: @escaping (Result<HBHTTPResponse, Error>) -> Void) {","        let responseHead = HTTPResponseHead(version: .init(major: 1, minor: 1), status: .ok)","        let responseBody = context.channel.allocator.buffer(string: \"Hello\")","        let response = HBHTTPResponse(head: responseHead, body: .byteBuffer(responseBody))","        onComplete(.success(response))","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You then initialise a "},{"type":"codeVoice","code":"HBHTTPServer"},{"type":"text","text":", call "},{"type":"codeVoice","code":"start"},{"type":"text","text":" on it and then "},{"type":"codeVoice","code":"wait"},{"type":"text","text":"."}]},{"code":["let eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)","let server = HBHTTPServer(","    group: eventLoopGroup, ","    configuration: .init(address: .hostname(\"127.0.0.1\", port: 8080))",")","try server.start(responder: HelloResponder()).wait()","\/\/ Wait until server closes which never happens as server channel is never closed","try server.wait()"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Swift-service-lifecycle","type":"heading","text":"Swift service lifecycle"},{"type":"paragraph","inlineContent":[{"text":"If you are using HummingbirdCore outside of Hummingbird ideally you would use it along with the swift-server library ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference"},{"text":". This gives you a framework for clean initialization and shutdown of your server. The following sets up a Lifecycle that initializes the HTTP server and stops it when the application shuts down.","type":"text"}]},{"code":["import Lifecycle","import LifecycleNIOCompat","","let lifecycle = ServiceLifecycle()","lifecycle.register(","    label: \"HTTP Server\",","    start: .eventLoopFuture { self.server.start(responder: MyResponder()) },","    shutdown: .eventLoopFuture(self.server.stop)",")","lifecycle.start { error in","    if let error = error {","        print(\"ERROR: \\(error)\")","    }","}","lifecycle.wait()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBStreamerOutput":{"abstract":[{"type":"text","text":"Values returned when we consume the contents of the streamer"}],"title":"HBStreamerOutput","navigatorTitle":[{"text":"HBStreamerOutput","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/hbstreameroutput","kind":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBStreamerOutput","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerOutput"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBBindAddress":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBBindAddress","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"HBBindAddress","kind":"identifier"}],"navigatorTitle":[{"text":"HBBindAddress","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","title":"HBBindAddress","abstract":[{"text":"Address to bind server to","type":"text"}],"url":"\/documentation\/hummingbird\/hbbindaddress"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBRequestBodyStreamerSequence":{"abstract":[{"type":"text","text":"AsyncSequence providing ByteBuffers from a request body stream"}],"navigatorTitle":[{"kind":"identifier","text":"HBRequestBodyStreamerSequence"}],"type":"topic","kind":"symbol","title":"HBRequestBodyStreamerSequence","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBRequestBodyStreamerSequence"}],"url":"\/documentation\/hummingbirdcore\/hbrequestbodystreamersequence","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBRequestBodyStreamerSequence"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBStreamerProtocol":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBStreamerProtocol"}],"url":"\/documentation\/hummingbird\/hbstreamerprotocol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBStreamerProtocol","title":"HBStreamerProtocol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBStreamerProtocol"}],"abstract":[{"type":"text","text":"Protocol for objects providing a stream of ByteBuffers"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBStreamCallback":{"navigatorTitle":[{"text":"HBStreamCallback","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/hbstreamcallback","abstract":[{"text":"Function returning streamed byte buffer output","type":"text"}],"role":"symbol","title":"HBStreamCallback","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBStreamCallback","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBStreamCallback"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPRequest":{"abstract":[{"type":"text","text":"HTTP request"}],"title":"HBHTTPRequest","navigatorTitle":[{"text":"HBHTTPRequest","kind":"identifier"}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/hbhttprequest","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBHTTPRequest","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPRequest"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestBody":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestBody","url":"\/documentation\/hummingbird\/hbrequestbody","abstract":[{"type":"text","text":"Request Body. Either a ByteBuffer or a ByteBuffer streamer"}],"navigatorTitle":[{"kind":"identifier","text":"HBRequestBody"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestBody"}],"title":"HBRequestBody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponse":{"navigatorTitle":[{"kind":"identifier","text":"HBHTTPResponse"}],"title":"HBHTTPResponse","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponse","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPResponse"}],"url":"\/documentation\/hummingbirdcore\/hbhttpresponse","abstract":[{"text":"HTTP response","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBByteBufferStreamer":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBByteBufferStreamer","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBByteBufferStreamer","kind":"identifier"}],"navigatorTitle":[{"text":"HBByteBufferStreamer","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","title":"HBByteBufferStreamer","abstract":[{"type":"text","text":"Request body streamer. "},{"code":"HBHTTPDecodeHandler","type":"codeVoice"},{"type":"text","text":" feeds this with ByteBuffers while the Router consumes them"}],"url":"\/documentation\/hummingbirdcore\/hbbytebufferstreamer"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1ChannelInitializer":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1ChannelInitializer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP1ChannelInitializer"}],"navigatorTitle":[{"kind":"identifier","text":"HTTP1ChannelInitializer"}],"type":"topic","role":"symbol","kind":"symbol","title":"HTTP1ChannelInitializer","abstract":[{"type":"text","text":"Setup child channel for HTTP1"}],"url":"\/documentation\/hummingbirdcore\/http1channelinitializer"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseBodyStreamer":{"type":"topic","title":"HBResponseBodyStreamer","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBodyStreamer","navigatorTitle":[{"kind":"identifier","text":"HBResponseBodyStreamer"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbresponsebodystreamer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseBodyStreamer"}],"role":"symbol","abstract":[{"type":"text","text":"Object supplying ByteBuffers for a response body"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"role":"collection","url":"\/documentation\/hummingbirdtls","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","title":"HummingbirdTLS","kind":"symbol","abstract":[{"text":"Add TLS support to Hummingbird server","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPResponder":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponder","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/hbhttpresponder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPResponder","title":"HBHTTPResponder","kind":"symbol","navigatorTitle":[{"text":"HBHTTPResponder","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for objects generating a "},{"type":"codeVoice","code":"HBHTTPResponse"},{"type":"text","text":" from a "},{"code":"HBHTTPRequest","type":"codeVoice"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBChannelInitializer":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBChannelInitializer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBChannelInitializer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"HBChannelInitializer"}],"type":"topic","role":"symbol","kind":"symbol","title":"HBChannelInitializer","abstract":[{"type":"text","text":"HTTPServer child channel initializer protocol"}],"url":"\/documentation\/hummingbirdcore\/hbchannelinitializer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"title":"HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","role":"collection","abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server"}]},"https://github.com/swift-server/swift-service-lifecycle":{"titleInlineContent":[{"type":"text","text":"swift-service-lifecycle"}],"type":"link","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"swift-service-lifecycle","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBHTTPResponseError":{"title":"HBHTTPResponseError","role":"symbol","abstract":[{"text":"An error that is capable of generating an HTTP response","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPResponseError","url":"\/documentation\/hummingbird\/hbhttpresponseerror","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPResponseError","kind":"identifier"}],"navigatorTitle":[{"text":"HBHTTPResponseError","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBSendable":{"url":"\/documentation\/hummingbirdcore\/hbsendable","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBSendable","kind":"identifier"}],"type":"topic","kind":"symbol","title":"HBSendable","abstract":[],"navigatorTitle":[{"text":"HBSendable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBSendable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseBody":{"type":"topic","title":"HBResponseBody","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseBody","navigatorTitle":[{"text":"HBResponseBody","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/hbresponsebody","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseBody","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Response body. Can be a single ByteBuffer, a stream of ByteBuffers or empty"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBHTTPError":{"url":"\/documentation\/hummingbird\/hbhttperror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBHTTPError","kind":"identifier"}],"abstract":[{"text":"Default HTTP error. Provides an HTTP status and a message is so desired","type":"text"}],"kind":"symbol","title":"HBHTTPError","navigatorTitle":[{"text":"HBHTTPError","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBHTTPError","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HBHTTPServer":{"url":"\/documentation\/hummingbirdcore\/hbhttpserver","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBHTTPServer"}],"type":"topic","kind":"symbol","title":"HBHTTPServer","abstract":[{"type":"text","text":"HTTP server class"}],"navigatorTitle":[{"kind":"identifier","text":"HBHTTPServer"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HBHTTPServer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"type":"topic","title":"HummingbirdCore","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","kind":"symbol","url":"\/documentation\/hummingbirdcore","role":"collection","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]}}}