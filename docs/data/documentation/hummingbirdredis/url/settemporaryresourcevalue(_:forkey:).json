{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL"]]},"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL\/setTemporaryResourceValue(_:forKey:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setTemporaryResourceValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":", ","kind":"text"},{"text":"forKey","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"key","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation14URLResourceKeyV","text":"URLResourceKey","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Temporary resource values are for client use. Temporary resource values exist only in memory and are never written to the resourceâ€™s backing store. Once set, a temporary resource value can be copied from the URL object with "},{"type":"codeVoice","code":"func resourceValues(forKeys:)"},{"type":"text","text":". The values are stored in the loosely-typed "},{"type":"codeVoice","code":"allValues"},{"type":"text","text":" dictionary property."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To remove a temporary resource value from the URL object, use "},{"type":"codeVoice","code":"func removeCachedResourceValue(forKey:)"},{"type":"text","text":". Care should be taken to ensure the key that identifies a temporary resource value is unique and does not conflict with system defined keys (using reverse domain name notation in your temporary resource value keys is recommended). This method is currently applicable only to URLs for file system resources."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/hummingbirdredis\/url\/settemporaryresourcevalue(_:forkey:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"externalID":"s:10Foundation3URLV25setTemporaryResourceValue_6forKeyyyp_AA011URLResourceH0VtF","title":"setTemporaryResourceValue(_:forKey:)","roleHeading":"Instance Method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setTemporaryResourceValue"},{"kind":"text","text":"("},{"kind":"keyword","text":"Any"},{"kind":"text","text":", "},{"kind":"externalParam","text":"forKey"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10Foundation14URLResourceKeyV","kind":"typeIdentifier","text":"URLResourceKey"},{"kind":"text","text":")"}],"modules":[{"name":"HummingbirdRedis"}],"symbolKind":"method"},"abstract":[{"text":"Sets a temporary resource value on the URL object.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"type":"topic","title":"HummingbirdRedis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","url":"\/documentation\/hummingbirdredis","role":"collection","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/URL/setTemporaryResourceValue(_:forKey:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL\/setTemporaryResourceValue(_:forKey:)","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdredis\/url\/settemporaryresourcevalue(_:forkey:)","type":"topic","abstract":[{"text":"Sets a temporary resource value on the URL object.","type":"text"}],"title":"setTemporaryResourceValue(_:forKey:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setTemporaryResourceValue"},{"kind":"text","text":"("},{"kind":"keyword","text":"Any"},{"kind":"text","text":", "},{"kind":"externalParam","text":"forKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"URLResourceKey","preciseIdentifier":"s:10Foundation14URLResourceKeyV"},{"kind":"text","text":")"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/URL":{"type":"topic","title":"URL","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL","navigatorTitle":[{"text":"URL","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdredis\/url","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URL","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A URL is a type that can potentially contain the location of a resource on a remote server, the path of a local file on disk, or even an arbitrary piece of encoded data."}]}}}