{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"startAccessingSecurityScopedResource"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/hummingbirdredis\/url\/startaccessingsecurityscopedresource()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL\/startAccessingSecurityScopedResource()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Given an NSURL created by resolving a bookmark data created with security scope, make the resource referenced by the url accessible to the process. When access to this resource is no longer needed the client must call stopAccessingSecurityScopedResource. Each call to startAccessingSecurityScopedResource must be balanced with a call to stopAccessingSecurityScopedResource (Note: this is not reference counted)."}],"kind":"symbol","metadata":{"role":"symbol","title":"startAccessingSecurityScopedResource()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"startAccessingSecurityScopedResource"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:10Foundation3URLV36startAccessingSecurityScopedResourceSbyF","modules":[{"name":"HummingbirdRedis"}],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"8.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"10.7","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/URL/startAccessingSecurityScopedResource()":{"role":"symbol","title":"startAccessingSecurityScopedResource()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"startAccessingSecurityScopedResource"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Given an NSURL created by resolving a bookmark data created with security scope, make the resource referenced by the url accessible to the process. When access to this resource is no longer needed the client must call stopAccessingSecurityScopedResource. Each call to startAccessingSecurityScopedResource must be balanced with a call to stopAccessingSecurityScopedResource (Note: this is not reference counted)."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL\/startAccessingSecurityScopedResource()","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdredis\/url\/startaccessingsecurityscopedresource()"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/URL":{"role":"symbol","title":"URL","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URL"}],"abstract":[{"type":"text","text":"A URL is a type that can potentially contain the location of a resource on a remote server, the path of a local file on disk, or even an arbitrary piece of encoded data."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/URL","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"URL"}],"url":"\/documentation\/hummingbirdredis\/url"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","title":"HummingbirdRedis","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdredis"}}}