{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation "},{"type":"codeVoice","code":"HummingbirdJobsRedis"},{"type":"text","text":" that comes with the hummingbird-redis package that stores jobs in a Redis database."}]},{"anchor":"Setting-up-Jobs","level":3,"type":"heading","text":"Setting up Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to add a jobs driver to the "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first."}]},{"type":"codeListing","syntax":"swift","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example I called "},{"type":"codeVoice","code":"addJob"},{"type":"text","text":" with "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" set to the number of threads you want to process the jobs on the queue."}]},{"anchor":"Creating-a-Job","level":3,"type":"heading","text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"type":"codeVoice","code":"HBJob"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"type":"codeVoice","code":"name"},{"type":"text","text":" and a function "},{"type":"codeVoice","code":"func execute(on:logger)"},{"type":"text","text":". The "},{"type":"codeVoice","code":"name"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" function does the work of the job and returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"type":"codeVoice","code":"sendEmail()"},{"type":"text","text":" function."}]},{"type":"codeListing","syntax":"swift","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"type":"codeListing","syntax":"swift","code":["SendEmailJob.register()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":". You can access the job queue via "},{"type":"codeVoice","code":"HBApplication.jobs.queue"},{"type":"text","text":". There is a helper object attached to "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" that reduces this to "},{"type":"codeVoice","code":"HBRequest.jobs.enqueue"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that will be fulfilled once the job has been added to the queue."}]},{"anchor":"Multiple-Queues","level":3,"type":"heading","text":"Multiple Queues"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id."}]},{"type":"codeListing","syntax":"swift","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have the new queue id you can register your new queue with this id"}]},{"type":"codeListing","syntax":"swift","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when adding jobs you add the queue id to the "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" function"}]},{"type":"codeListing","syntax":"swift","code":["request.jobs.enqueue(job: job, queue: .newQueue)"]}]}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"HummingbirdJobs","title":"HummingbirdJobs","symbolKind":"module","role":"collection","modules":[{"name":"HummingbirdJobs"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"role":"symbol","title":"HBJobContainer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobContainer"}],"abstract":[{"type":"text","text":"Holder for all data related to a job"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobContainer"}],"url":"\/documentation\/hummingbirdjobs\/hbjobcontainer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"role":"symbol","title":"HBMemoryJobQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryJobQueue"}],"abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"role":"symbol","title":"HBJobQueueId","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueId"}],"abstract":[{"type":"text","text":"Job queue id"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueueid"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"role":"symbol","title":"JobQueueError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueError"}],"abstract":[{"type":"text","text":"Job Queue Error type"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"url":"\/documentation\/hummingbirdjobs\/jobqueueerror"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"role":"symbol","title":"HBAsyncJob","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncJob"}],"abstract":[{"type":"text","text":"Job with asynchronous handler"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncJob"}],"url":"\/documentation\/hummingbirdjobs\/hbasyncjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"role":"symbol","title":"HBJobQueue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"abstract":[{"type":"text","text":"Job queue protocol."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"role":"symbol","title":"HBJob","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}],"abstract":[{"type":"text","text":"Protocol for job description"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"url":"\/documentation\/hummingbirdjobs\/hbjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"role":"symbol","title":"HBQueuedJob","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}],"abstract":[{"type":"text","text":"Queued job. Includes job, plus the id for the job"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"role":"collection","title":"HummingbirdJobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"role":"symbol","title":"HBJobQueueFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueFactory"}],"abstract":[{"type":"text","text":"Factory class for Job Queue drivers"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"role":"symbol","title":"JobIdentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"abstract":[{"type":"text","text":"Identifier for Job"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"url":"\/documentation\/hummingbirdjobs\/jobidentifier"}}}