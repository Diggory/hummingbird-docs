{"metadata":{"externalID":"HummingbirdJobs","role":"collection","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}],"title":"HummingbirdJobs","roleHeading":"Framework"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"code":"HummingbirdJobsRedis","type":"codeVoice"},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}]},{"text":"Setting up Jobs","type":"heading","anchor":"Setting-up-Jobs","level":3},{"type":"paragraph","inlineContent":[{"text":"Before you can start adding or processing jobs you need to add a jobs driver to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example I called "},{"type":"codeVoice","code":"addJob"},{"type":"text","text":" with "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" set to the number of threads you want to process the jobs on the queue."}]},{"text":"Creating a Job","type":"heading","anchor":"Creating-a-Job","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"type":"codeVoice","code":"HBJob"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"type":"codeVoice","code":"name"},{"type":"text","text":" and a function "},{"type":"codeVoice","code":"func execute(on:logger)"},{"type":"text","text":". The "},{"type":"codeVoice","code":"name"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" function does the work of the job and returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"type":"codeVoice","code":"sendEmail()"},{"type":"text","text":" function."}]},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"syntax":"swift","type":"codeListing","code":["SendEmailJob.register()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" on "},{"code":"HBJobQueue","type":"codeVoice"},{"type":"text","text":". You can access the job queue via "},{"code":"HBApplication.jobs.queue","type":"codeVoice"},{"type":"text","text":". There is a helper object attached to "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" that reduces this to "},{"code":"HBRequest.jobs.enqueue","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"enqueue"},{"text":" returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that will be fulfilled once the job has been added to the queue.","type":"text"}]},{"text":"Multiple Queues","type":"heading","anchor":"Multiple-Queues","level":3},{"type":"paragraph","inlineContent":[{"text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have the new queue id you can register your new queue with this id"}]},{"syntax":"swift","type":"codeListing","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"]},{"type":"paragraph","inlineContent":[{"text":"Then when adding jobs you add the queue id to the ","type":"text"},{"type":"codeVoice","code":"enqueue"},{"text":" function","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["request.jobs.enqueue(job: job, queue: .newQueue)"]}]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"],"title":"Jobs"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"],"title":"Queues"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"],"title":"Error"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/Logger"],"title":"Structures"}],"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdjobs"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"abstract":[{"type":"text","text":"Queued job. Includes job, plus the id for the job"}],"title":"HBQueuedJob","navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}],"role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBQueuedJob"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"type":"topic","title":"HBJobContainer","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","navigatorTitle":[{"text":"HBJobContainer","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobContainer","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Holder for all data related to a job"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","abstract":[{"type":"text","text":"Job queue protocol."}],"navigatorTitle":[{"kind":"identifier","text":"HBJobQueue"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueue"}],"title":"HBJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"HummingbirdJobs","role":"collection","url":"\/documentation\/hummingbirdjobs","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"title":"HBMemoryJobQueue","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBMemoryJobQueue"}],"url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","role":"symbol","abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/Logger":{"kind":"symbol","navigatorTitle":[{"text":"Logger","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Logger","kind":"identifier"}],"title":"Logger","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/Logger","url":"\/documentation\/hummingbirdredis\/logger","type":"topic","abstract":[{"type":"text","text":"A "},{"code":"Logger","type":"codeVoice"},{"text":" is the central type in ","type":"text"},{"code":"SwiftLog","type":"codeVoice"},{"text":". Its central function is to emit log messages using one of the methods","type":"text"},{"text":" ","type":"text"},{"text":"corresponding to a log level.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/jobidentifier","abstract":[{"type":"text","text":"Identifier for Job"}],"role":"symbol","title":"JobIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"url":"\/documentation\/hummingbirdjobs\/hbjob","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}],"type":"topic","kind":"symbol","title":"HBJob","abstract":[{"type":"text","text":"Protocol for job description"}],"navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"abstract":[{"text":"Job Queue Error type","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueueError","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","title":"JobQueueError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"title":"HBJobQueueFactory","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJobQueueFactory"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","role":"symbol","abstract":[{"type":"text","text":"Factory class for Job Queue drivers"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"abstract":[{"type":"text","text":"Job queue id"}],"title":"HBJobQueueId","kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueueid","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueId"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"title":"HBAsyncJob","navigatorTitle":[{"kind":"identifier","text":"HBAsyncJob"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HBAsyncJob","kind":"identifier"}],"url":"\/documentation\/hummingbirdjobs\/hbasyncjob","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","role":"symbol","abstract":[{"type":"text","text":"Job with asynchronous handler"}]}}}