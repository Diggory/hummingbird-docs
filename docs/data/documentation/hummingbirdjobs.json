{"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation "},{"type":"codeVoice","code":"HummingbirdJobsRedis"},{"type":"text","text":" that comes with the hummingbird-redis package that stores jobs in a Redis database."}]},{"type":"heading","level":3,"text":"Setting up Jobs","anchor":"Setting-up-Jobs"},{"type":"paragraph","inlineContent":[{"text":"Before you can start adding or processing jobs you need to add a jobs driver to the ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first.","type":"text"}]},{"type":"codeListing","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this example I called ","type":"text"},{"code":"addJob","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"numWorkers","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the ","type":"text"},{"code":"numWorkers","type":"codeVoice"},{"text":" set to the number of threads you want to process the jobs on the queue.","type":"text"}]},{"type":"heading","level":3,"text":"Creating a Job","anchor":"Creating-a-Job"},{"type":"paragraph","inlineContent":[{"text":"First you must define your job. Create an object that inherits from ","type":"text"},{"type":"codeVoice","code":"HBJob"},{"text":". This protocol requires you to implement a static variable ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" and a function ","type":"text"},{"type":"codeVoice","code":"func execute(on:logger)"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" variable should be unique to this job definition. It is used in the serialisation of the job. The ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" function does the work of the job and returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a ","type":"text"},{"type":"codeVoice","code":"sendEmail()"},{"text":" function.","type":"text"}]},{"type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Before you can use this job you have to register it.","type":"text"}]},{"type":"codeListing","code":["SendEmailJob.register()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" on "},{"code":"HBJobQueue","type":"codeVoice"},{"type":"text","text":". You can access the job queue via "},{"code":"HBApplication.jobs.queue","type":"codeVoice"},{"type":"text","text":". There is a helper object attached to "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" that reduces this to "},{"code":"HBRequest.jobs.enqueue","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"enqueue"},{"text":" returns an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that will be fulfilled once the job has been added to the queue.","type":"text"}]},{"type":"heading","level":3,"text":"Multiple Queues","anchor":"Multiple-Queues"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id."}]},{"type":"codeListing","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have the new queue id you can register your new queue with this id"}]},{"type":"codeListing","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when adding jobs you add the queue id to the "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" function"}]},{"type":"codeListing","code":["request.jobs.enqueue(job: job, queue: .newQueue)"],"syntax":"swift"}],"kind":"content"}],"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]},{"title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/Logger"]}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"symbol","metadata":{"role":"collection","title":"HummingbirdJobs","externalID":"HummingbirdJobs","roleHeading":"Framework","symbolKind":"module","modules":[{"name":"HummingbirdJobs"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdjobs"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueFactory"}],"abstract":[{"text":"Factory class for Job Queue drivers","type":"text"}],"type":"topic","title":"HBJobQueueFactory","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"title":"HBMemoryJobQueue","role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/Logger":{"navigatorTitle":[{"text":"Logger","kind":"identifier"}],"role":"symbol","title":"Logger","abstract":[{"text":"A ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" is the central type in ","type":"text"},{"code":"SwiftLog","type":"codeVoice"},{"text":". Its central function is to emit log messages using one of the methods","type":"text"},{"text":" ","type":"text"},{"text":"corresponding to a log level.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Logger","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/Logger","url":"\/documentation\/hummingbirdjobs\/logger","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","kind":"symbol","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"role":"collection","type":"topic","title":"HummingbirdJobs","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"type":"topic","url":"\/documentation\/hummingbirdjobs\/hbasyncjob","role":"symbol","title":"HBAsyncJob","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncJob","kind":"identifier"}],"navigatorTitle":[{"text":"HBAsyncJob","kind":"identifier"}],"abstract":[{"type":"text","text":"Job with asynchronous handler"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueId"}],"abstract":[{"type":"text","text":"Job queue id"}],"type":"topic","title":"HBJobQueueId","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","url":"\/documentation\/hummingbirdjobs\/hbjobqueueid","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBQueuedJob"}],"abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"type":"topic","title":"HBQueuedJob","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","navigatorTitle":[{"kind":"identifier","text":"HBQueuedJob"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"abstract":[{"type":"text","text":"Protocol for job description"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","navigatorTitle":[{"text":"HBJob","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJob","kind":"identifier"}],"title":"HBJob","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"url":"\/documentation\/hummingbirdjobs\/jobqueueerror","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueError"}],"title":"JobQueueError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Job Queue Error type"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobContainer"}],"navigatorTitle":[{"kind":"identifier","text":"HBJobContainer"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","abstract":[{"type":"text","text":"Holder for all data related to a job"}],"url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","role":"symbol","title":"HBJobContainer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","kind":"symbol","abstract":[{"text":"Job queue protocol.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"HBJobQueue","kind":"identifier"}],"type":"topic","title":"HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","kind":"symbol","abstract":[{"text":"Identifier for Job","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"type":"topic","title":"JobIdentifier","url":"\/documentation\/hummingbirdjobs\/jobidentifier"}}}