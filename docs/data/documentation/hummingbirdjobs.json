{"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation ","type":"text"},{"type":"codeVoice","code":"HummingbirdJobsRedis"},{"text":" that comes with the hummingbird-redis package that stores jobs in a Redis database.","type":"text"}],"type":"paragraph"},{"text":"Setting up Jobs","level":3,"type":"heading","anchor":"Setting-up-Jobs"},{"type":"paragraph","inlineContent":[{"text":"Before you can start adding or processing jobs you need to add a jobs driver to the ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example I called "},{"code":"addJob","type":"codeVoice"},{"type":"text","text":" with "},{"code":"numWorkers","type":"codeVoice"},{"type":"text","text":" set to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the "},{"code":"numWorkers","type":"codeVoice"},{"type":"text","text":" set to the number of threads you want to process the jobs on the queue."}]},{"text":"Creating a Job","level":3,"type":"heading","anchor":"Creating-a-Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"code":"HBJob","type":"codeVoice"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"code":"name","type":"codeVoice"},{"type":"text","text":" and a function "},{"code":"func execute(on:logger)","type":"codeVoice"},{"type":"text","text":". The "},{"code":"name","type":"codeVoice"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" function does the work of the job and returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"code":"sendEmail()","type":"codeVoice"},{"type":"text","text":" function."}]},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use this job you have to register it."}]},{"syntax":"swift","type":"codeListing","code":["SendEmailJob.register()"]},{"type":"paragraph","inlineContent":[{"text":"Now you job is ready to create. Jobs can be queued up using the function ","type":"text"},{"type":"codeVoice","code":"enqueue"},{"text":" on ","type":"text"},{"type":"codeVoice","code":"HBJobQueue"},{"text":". You can access the job queue via ","type":"text"},{"type":"codeVoice","code":"HBApplication.jobs.queue"},{"text":". There is a helper object attached to ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" that reduces this to ","type":"text"},{"type":"codeVoice","code":"HBRequest.jobs.enqueue"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"]},{"type":"paragraph","inlineContent":[{"code":"enqueue","type":"codeVoice"},{"type":"text","text":" returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that will be fulfilled once the job has been added to the queue."}]},{"text":"Multiple Job Queues","level":3,"type":"heading","anchor":"Multiple-Job-Queues"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"]},{"type":"paragraph","inlineContent":[{"text":"Once you have the new queue id you can register your new queue with this id","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"]},{"type":"paragraph","inlineContent":[{"text":"Then when adding jobs you add the queue id to the ","type":"text"},{"type":"codeVoice","code":"enqueue"},{"text":" function","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["request.jobs.enqueue(job: job, queue: .newQueue)"]},{"text":"Managing Job Queues outside HBApplication","level":3,"type":"heading","anchor":"Managing-Job-Queues-outside-HBApplication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you prefer you can create your job queue separate from "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":". Both the "},{"code":"HBMemoryJobsDriver","type":"codeVoice"},{"type":"text","text":" and "},{"code":"HBRedisJobsDriver","type":"codeVoice"},{"type":"text","text":" are available. You could set this up as follows."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ setup Redis connection and job queue. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let jobQueue = HBRedisJobQueue(redisConnectionPoolGroup: redisConnectionPoolGroup)","let jobQueueHandler = HBJobQueueHandler(","    queue: jobQueue, ","    numWorkers: 4, ","    eventLoopGroup: app.eventLoopGroup, ","    logger: app.logger",")","jobQueueHandler.start()","","\/\/ add routes to application","app.put(\"email\") { request -> HTTPResponseStatus in","    let job = SendEmailJob(","        to: \"joe@email.com\",","        subject: \"Testing Jobs\",","        message: \"...\"","    )","    try await jobQueue.enqueue(job: job)","    return .ok","}"]},{"type":"paragraph","inlineContent":[{"text":"If you do setup a job queue as above. You will need to manage the job queue lifecycle and call ","type":"text"},{"type":"codeVoice","code":"jobQueueHandler.shutdown"},{"text":", to shutdown the job queue and its workers, when you shutdown your application.","type":"text"}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"hierarchy":{"paths":[[]]},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"name":"HummingbirdJobs"}],"symbolKind":"module","externalID":"HummingbirdJobs","role":"collection","roleHeading":"Framework","title":"HummingbirdJobs"},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"],"title":"Jobs"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"],"title":"Queues"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"],"title":"Error"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler"],"title":"Classes"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/Logger"],"title":"Structures"}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation"}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueId"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueId"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","abstract":[{"type":"text","text":"Job queue id"}],"title":"HBJobQueueId","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueueid"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryJobQueue"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","abstract":[{"type":"text","text":"In memory implementation of job queue driver. Stores jobs in a circular buffer"}],"title":"HBMemoryJobQueue","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"abstract":[{"text":"Holder for all data related to a job","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJobContainer"}],"title":"HBJobContainer","navigatorTitle":[{"kind":"identifier","text":"HBJobContainer"}],"url":"\/documentation\/hummingbirdjobs\/hbjobcontainer"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/Logger":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Logger","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/Logger","kind":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" is the central type in "},{"type":"codeVoice","code":"SwiftLog"},{"type":"text","text":". Its central function is to emit log messages using one of the methods"},{"type":"text","text":" "},{"type":"text","text":"corresponding to a log level."}],"type":"topic","url":"\/documentation\/hummingbirdredis\/logger","role":"symbol","navigatorTitle":[{"text":"Logger","kind":"identifier"}],"title":"Logger"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"HummingbirdJobs","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"abstract":[{"type":"text","text":"Job Queue Error type"}],"navigatorTitle":[{"text":"JobQueueError","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdjobs\/jobqueueerror","kind":"symbol","role":"symbol","title":"JobQueueError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueueError","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueHandler":{"abstract":[{"text":"Object handling a single job queue","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJobQueueHandler"}],"title":"HBJobQueueHandler","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueHandler"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueuehandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"navigatorTitle":[{"text":"HBJobQueue","kind":"identifier"}],"title":"HBJobQueue","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","role":"symbol","abstract":[{"text":"Job queue protocol.","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/hbjobqueue","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueFactory"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","abstract":[{"type":"text","text":"Factory class for Job Queue drivers"}],"title":"HBJobQueueFactory","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"JobIdentifier","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"JobIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","abstract":[{"type":"text","text":"Identifier for Job"}],"title":"JobIdentifier","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdjobs\/jobidentifier"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"navigatorTitle":[{"text":"HBQueuedJob","kind":"identifier"}],"title":"HBQueuedJob","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","role":"symbol","abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBQueuedJob","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"abstract":[{"text":"Protocol for job description","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBJob"}],"title":"HBJob","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"url":"\/documentation\/hummingbirdjobs\/hbjob"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"abstract":[{"type":"text","text":"Job with asynchronous handler"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncJob"}],"title":"HBAsyncJob","navigatorTitle":[{"kind":"identifier","text":"HBAsyncJob"}],"url":"\/documentation\/hummingbirdjobs\/hbasyncjob"}}}