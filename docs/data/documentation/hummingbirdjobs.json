{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs"},"sections":[],"metadata":{"modules":[{"name":"HummingbirdJobs"}],"title":"HummingbirdJobs","symbolKind":"module","roleHeading":"Framework","role":"collection","externalID":"HummingbirdJobs"},"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job consists of some metadata and an execute method to run the job. You can setup HummingbirdJobs to use different drivers for storing job metadata. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there is also an implementation "},{"type":"codeVoice","code":"HummingbirdJobsRedis"},{"type":"text","text":" that comes with the hummingbird-redis package that stores jobs in a Redis database."}]},{"type":"heading","level":3,"text":"Setting up Jobs","anchor":"Setting-up-Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to add a jobs driver to the "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":". The code below adds a redis driver for jobs. To use a Redis driver you will need to setup Redis first."}]},{"type":"codeListing","code":["        let app = HBApplication()","        try app.addRedis(","            configuration: .init(","                hostname: Self.redisHostname,","                port: 6379","            )","        )","        app.addJobs(","            using: .redis(configuration: .init(queueKey: \"_myJobsQueue\")),","            numWorkers: 0","        )"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this example I called ","type":"text"},{"type":"codeVoice","code":"addJob"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" set to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This means I can add jobs but they will not be processed. To get another server to process these jobs, I should run a separate version of the app which connects to the same Redis queue but with the ","type":"text"},{"type":"codeVoice","code":"numWorkers"},{"text":" set to the number of threads you want to process the jobs on the queue.","type":"text"}]},{"type":"heading","level":3,"text":"Creating a Job","anchor":"Creating-a-Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First you must define your job. Create an object that inherits from "},{"code":"HBJob","type":"codeVoice"},{"type":"text","text":". This protocol requires you to implement a static variable "},{"code":"name","type":"codeVoice"},{"type":"text","text":" and a function "},{"code":"func execute(on:logger)","type":"codeVoice"},{"type":"text","text":". The "},{"code":"name","type":"codeVoice"},{"type":"text","text":" variable should be unique to this job definition. It is used in the serialisation of the job. The "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" function does the work of the job and returns an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" that should be fulfilled when the job is complete. Below is an example of a job that calls a "},{"code":"sendEmail()","type":"codeVoice"},{"type":"text","text":" function."}]},{"type":"codeListing","code":["struct SendEmailJob: HBJob {","    static let name = \"SendEmail\"","    let to: String","    let subject: String","    let message: String","    ","    \/\/\/ do the work","    func execute(on eventLoop: EventLoop, logger: Logger) -> EventLoopFuture<Void> {","        return sendEmail(to: self.to, subject: self.subject, message: self.message)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Before you can use this job you have to register it.","type":"text"}]},{"type":"codeListing","code":["SendEmailJob.register()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you job is ready to create. Jobs can be queued up using the function "},{"type":"codeVoice","code":"enqueue"},{"type":"text","text":" on "},{"type":"codeVoice","code":"HBJobQueue"},{"type":"text","text":". You can access the job queue via "},{"type":"codeVoice","code":"HBApplication.jobs.queue"},{"type":"text","text":". There is a helper object attached to "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" that reduces this to "},{"type":"codeVoice","code":"HBRequest.jobs.enqueue"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let job = SendEmailJob(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","request.jobs.enqueue(job: job)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"enqueue","type":"codeVoice"},{"text":" returns an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that will be fulfilled once the job has been added to the queue.","type":"text"}]},{"type":"heading","level":3,"text":"Multiple Queues","anchor":"Multiple-Queues"},{"type":"paragraph","inlineContent":[{"text":"HummingbirdJobs allows for the creation of multiple job queues. To create a new queue you need a new queue id.","type":"text"}]},{"type":"codeListing","code":["extension HBJobQueueId {","    static var newQueue: HBJobQueueId { \"newQueue\" }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Once you have the new queue id you can register your new queue with this id","type":"text"}]},{"type":"codeListing","code":["app.jobs.registerQueue(.newQueue, queue: .redis(configuration: .init(queueKey: \"_myNewJobsQueue\")))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then when adding jobs you add the queue id to the ","type":"text"},{"type":"codeVoice","code":"enqueue"},{"text":" function","type":"text"}]},{"type":"codeListing","code":["request.jobs.enqueue(job: job, queue: .newQueue)"],"syntax":"swift"}]}],"topicSections":[{"title":"Jobs","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer"]},{"title":"Queues","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue"]},{"title":"Error","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError"]}],"variants":[{"paths":["\/documentation\/hummingbirdjobs"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobIdentifier":{"url":"\/documentation\/hummingbirdjobs\/jobidentifier","kind":"symbol","type":"topic","title":"JobIdentifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobIdentifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobIdentifier","abstract":[{"text":"Identifier for Job","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"JobIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBQueuedJob":{"title":"HBQueuedJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBQueuedJob","url":"\/documentation\/hummingbirdjobs\/hbqueuedjob","role":"symbol","kind":"symbol","abstract":[{"text":"Queued job. Includes job, plus the id for the job","type":"text"}],"navigatorTitle":[{"text":"HBQueuedJob","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HBQueuedJob","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJob":{"title":"HBJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJob","navigatorTitle":[{"kind":"identifier","text":"HBJob"}],"type":"topic","abstract":[{"text":"Protocol for job description","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjob","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJob"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueId":{"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBJobQueueId","kind":"identifier"}],"navigatorTitle":[{"text":"HBJobQueueId","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueId","type":"topic","url":"\/documentation\/hummingbirdjobs\/hbjobqueueid","abstract":[{"type":"text","text":"Job queue id"}],"title":"HBJobQueueId"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBAsyncJob":{"title":"HBAsyncJob","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBAsyncJob","navigatorTitle":[{"kind":"identifier","text":"HBAsyncJob"}],"type":"topic","abstract":[{"text":"Job with asynchronous handler","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbasyncjob","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncJob"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBMemoryJobQueue":{"title":"HBMemoryJobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBMemoryJobQueue","navigatorTitle":[{"kind":"identifier","text":"HBMemoryJobQueue"}],"type":"topic","abstract":[{"text":"In memory implementation of job queue driver. Stores jobs in a circular buffer","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbmemoryjobqueue","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueueFactory":{"title":"HBJobQueueFactory","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueueFactory","navigatorTitle":[{"kind":"identifier","text":"HBJobQueueFactory"}],"type":"topic","abstract":[{"text":"Factory class for Job Queue drivers","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobqueuefactory","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobQueueFactory"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs":{"url":"\/documentation\/hummingbirdjobs","kind":"symbol","type":"topic","title":"HummingbirdJobs","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobContainer":{"title":"HBJobContainer","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobContainer","navigatorTitle":[{"kind":"identifier","text":"HBJobContainer"}],"type":"topic","abstract":[{"text":"Holder for all data related to a job","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/hbjobcontainer","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBJobContainer"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/JobQueueError":{"title":"JobQueueError","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/JobQueueError","navigatorTitle":[{"kind":"identifier","text":"JobQueueError"}],"type":"topic","abstract":[{"text":"Job Queue Error type","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdjobs\/jobqueueerror","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueError"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdJobs/HBJobQueue":{"title":"HBJobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdJobs\/HBJobQueue","url":"\/documentation\/hummingbirdjobs\/hbjobqueue","role":"symbol","kind":"symbol","abstract":[{"text":"Job queue protocol.","type":"text"}],"navigatorTitle":[{"text":"HBJobQueue","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HBJobQueue","kind":"identifier"}]}}}