{"seeAlsoSections":[{"title":"Router","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncCallbackResponder"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"title":"HBRouteHandler","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:11Hummingbird14HBRouteHandlerP","modules":[{"name":"HummingbirdFoundation"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}]},"abstract":[{"type":"text","text":"Object for handling requests."}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable"],"kind":"relationships","title":"Inherited By","type":"inheritedBy"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(request:)"]}],"variants":[{"paths":["\/documentation\/hummingbird\/hbroutehandler"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing a closure to the router you can provide an object it should try and"},{"type":"text","text":" "},{"type":"text","text":"create before handling the request. This allows you to separate the extraction of data"},{"type":"text","text":" "},{"type":"text","text":"from the request and the processing of the request. For example"}]},{"type":"codeListing","syntax":null,"code":["struct UpdateReminder: HBRouteHandler {","    struct Request: Codable {","        let description: String","        let date: Date","    }","    let update: Request","    let id: String","","    init(from request: HBRequest) throws {","        self.update = try request.decode(as: Request.self)","        self.id = try request.parameters.require(\"id\")","    }","    func handle(request: HBRequest) -> EventLoopFuture<HTTPResponseStatus> {","        let reminder = Reminder(id: id, update: update)","        return reminder.update(on: request.db)","            .map { _ in .ok }","    }","}"]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"role":"symbol","title":"HBResponder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponder"}],"abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"url":"\/documentation\/hummingbird\/hbresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncCallbackResponder":{"role":"symbol","title":"HBAsyncCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncCallbackResponder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"url":"\/documentation\/hummingbird\/hbasynccallbackresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecodable":{"role":"symbol","title":"HBRequestDecodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecodable"}],"abstract":[{"type":"codeVoice","code":"HBRouteHandler"},{"type":"text","text":" which uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to initialize it"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecodable"}],"url":"\/documentation\/hummingbird\/hbrequestdecodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"role":"symbol","title":"HBRouterMethodOptions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"abstract":[{"type":"text","text":"Options available to routes"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"url":"\/documentation\/hummingbird\/hbroutermethodoptions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/handle(request:)":{"defaultImplementations":2,"role":"symbol","title":"handle(request:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBRequest","preciseIdentifier":"s:11Hummingbird9HBRequestV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"_Output"}],"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/handle(request:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/hummingbird\/hbroutehandler\/handle(request:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"role":"symbol","title":"HBRouter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}],"abstract":[{"type":"text","text":"Directs Requests to handlers based on the request uri."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouter"}],"url":"\/documentation\/hummingbird\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler/init(from:)":{"defaultImplementations":2,"role":"symbol","title":"init(from:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBRequest","preciseIdentifier":"s:11Hummingbird9HBRequestV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler\/init(from:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/hummingbird\/hbroutehandler\/init(from:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"role":"symbol","title":"HBRouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"abstract":[{"type":"text","text":"Object for handling requests."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"url":"\/documentation\/hummingbird\/hbroutehandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"role":"symbol","title":"HBRouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post â€¦) methods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbird\/hbroutermethods"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncRouteHandler":{"role":"symbol","title":"HBAsyncRouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncRouteHandler"}],"abstract":[{"type":"text","text":"Route Handler using async\/await methods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncRouteHandler"}],"url":"\/documentation\/hummingbird\/hbasyncroutehandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"role":"symbol","title":"HBRouterGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"url":"\/documentation\/hummingbird\/hbroutergroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"role":"symbol","title":"HBCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"url":"\/documentation\/hummingbird\/hbcallbackresponder"}}}