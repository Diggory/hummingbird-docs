{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponsePatch"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow you to patch the response generated by your route handler via the "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" supplied. If your handler is only"},{"type":"text","text":" "},{"type":"text","text":"returning the payload you can edit the status and headers via "},{"type":"codeVoice","code":"request.response"},{"type":"text","text":" eg."}]},{"type":"codeListing","syntax":null,"code":["func myHandler(_ request: HBRequest) -> String {","    request.response.status = .accepted","    return \"hello\"","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/hummingbird\/hbrequest\/responsepatch"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest\/ResponsePatch","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Patches Response via "},{"type":"codeVoice","code":"HBResponse.apply(patch:)"}],"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"ResponsePatch"}],"role":"symbol","title":"HBRequest.ResponsePatch","roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponsePatch"}],"symbolKind":"class","externalID":"s:11Hummingbird9HBRequestV13ResponsePatchC","extendedModule":"Hummingbird","modules":[{"name":"Hummingbird"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest\/ResponsePatch\/headers","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest\/ResponsePatch\/status"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequest\/ResponsePatch\/setCookie(_:)"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest":{"role":"symbol","title":"HBRequest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequest"}],"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRequest"}],"url":"\/documentation\/hummingbird\/hbrequest"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest/ResponsePatch/status":{"role":"symbol","title":"status","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"status"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPResponseStatus","preciseIdentifier":"s:8NIOHTTP118HTTPResponseStatusO"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"patch status of reponse"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest\/ResponsePatch\/status","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbrequest\/responsepatch\/status"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest/ResponsePatch/headers":{"role":"symbol","title":"headers","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"headers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPHeadersPatch","preciseIdentifier":"s:11Hummingbird16HTTPHeadersPatchV"}],"abstract":[{"type":"text","text":"headers to add to response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest\/ResponsePatch\/headers","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/hbrequest\/responsepatch\/headers"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequest/ResponsePatch":{"role":"symbol","title":"HBRequest.ResponsePatch","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponsePatch"}],"abstract":[{"type":"text","text":"Patches Response via "},{"type":"codeVoice","code":"HBResponse.apply(patch:)"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequest\/ResponsePatch","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ResponsePatch"}],"url":"\/documentation\/hummingbird\/hbrequest\/responsepatch"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBRequest/ResponsePatch/setCookie(_:)":{"role":"symbol","title":"setCookie(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setCookie"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"HBCookie","preciseIdentifier":"s:21HummingbirdFoundation8HBCookieV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Set cookie on reponse patch"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBRequest\/ResponsePatch\/setCookie(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdfoundation\/hbrequest\/responsepatch\/setcookie(_:)"}}}