{"kind":"article","metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Persistent data"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"If you are looking to store data between requests to your server then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"text":"This returns an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which will succeed once the value has been saved. If there is an entry for the key already then the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will fail with the error ","type":"text"},{"code":"HBPersistError.duplicate","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"text":"Both ","type":"text"},{"type":"codeVoice","code":"create"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"set"},{"text":" have an ","type":"text"},{"type":"codeVoice","code":"expires"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing"},{"inlineContent":[{"text":"To access values in the ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" key\/value store you use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which will succeed with the value associated with key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let future request.persist.remove(key: \"mykey\")"],"type":"codeListing"},{"text":"Drivers","anchor":"Drivers","level":2,"type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" comes with a memory based driver which will store these values in the memory of your server.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["app.addPersist(using: .memory)"],"type":"codeListing"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down.","type":"text"}],"type":"paragraph"},{"text":"Redis","anchor":"Redis","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with the "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"syntax":"swift","code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"],"type":"codeListing"},{"text":"Fluent","anchor":"Fluent","level":2,"type":"heading"},{"inlineContent":[{"code":"HummingbirdFluent","type":"codeVoice"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after the ","type":"text"},{"code":"addPersist","type":"codeVoice"},{"text":" call has been made.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"],"type":"codeListing"}]}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"],"title":"Reference"}],"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","role":"article","title":"Error Handling","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/error-handling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistError","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBPersistError","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbpersisterror","kind":"symbol","role":"symbol","title":"HBPersistError","abstract":[{"text":"Errors return by persist framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"kind":"article","url":"\/documentation\/index","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriverFactory":{"abstract":[{"type":"text","text":"Factory class for persist drivers"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbird\/hbpersistdriverfactory","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"title":"HBPersistDriverFactory","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriver"}],"url":"\/documentation\/hummingbird\/hbpersistdriver","title":"HBPersistDriver","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBPersistDriver"}],"role":"symbol","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Extending-Hummingbird":{"abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","role":"article","title":"Extending Hummingbird","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/extending-hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Encoding-and-Decoding":{"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","role":"collectionGroup","title":"Encoding and Decoding","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encoding-and-decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","url":"\/documentation\/hummingbird\/router","kind":"article","role":"collectionGroup","title":"Router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]}}}