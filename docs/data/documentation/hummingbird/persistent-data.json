{"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"If you are looking to store data between requests to your server then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"code":["let future = request.persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which will succeed once the value has been saved. If there is an entry for the key already then the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will fail with the error "},{"type":"codeVoice","code":"HBPersistError.duplicate"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}],"type":"paragraph"},{"code":["let future = request.persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"create"},{"type":"text","text":" and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" have an "},{"type":"codeVoice","code":"expires"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}],"type":"paragraph"},{"code":["let future = request.persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To access values in the "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"code":["let future = request.persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This returns an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which will succeed with the value associated with key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist or is not of the type requested."}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"code":["let future request.persist.remove(key: \"mykey\")"],"type":"codeListing","syntax":"swift"},{"anchor":"Drivers","text":"Drivers","type":"heading","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. When configuring your application if you want to use ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" you have to add it to the application and indicate what driver you are going to use. ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" comes with a memory based driver which will store these values in the memory of your server.","type":"text"}],"type":"paragraph"},{"code":["app.addPersist(using: .memory)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down.","type":"text"}],"type":"paragraph"},{"anchor":"Redis","text":"Redis","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"code":"persists","type":"codeVoice"},{"type":"text","text":" key\/value pairs with the "},{"code":"HummingbirdRedis","type":"codeVoice"},{"type":"text","text":" library. You would setup "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" to use Redis as follows. To use the Redis driver you need to have setup Redis with Hummingbird as well."}],"type":"paragraph"},{"code":["app.addRedis(configuration: .init(hostname: redisHostname, port: 6379))","app.addPersist(using: .redis)"],"type":"codeListing","syntax":"swift"},{"anchor":"Fluent","text":"Fluent","type":"heading","level":2},{"inlineContent":[{"code":"HummingbirdFluent","type":"codeVoice"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after the ","type":"text"},{"code":"addPersist","type":"codeVoice"},{"text":" call has been made.","type":"text"}],"type":"paragraph"},{"code":["app.addFluent()","app.fluent.databases.use(...)","app.addPersist(using: .fluent(databaseID))","if Self.migrate {","    app.fluent.migrate()","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Running-persist-outside-HBApplication","text":"Running persist outside HBApplication","type":"heading","level":2},{"inlineContent":[{"text":"If you prefer, the persist system can also be accessed separately from ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":". You need to create your own instance of your persist driver: ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver"},{"text":", ","type":"text"},{"code":"HBRedisPersistDriver","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"HBFluentPersistDriver","type":"codeVoice"},{"text":". Then call the ","type":"text"},{"code":"create","type":"codeVoice"},{"text":", ","type":"text"},{"code":"set","type":"codeVoice"},{"text":", ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"remove","type":"codeVoice"},{"text":" functions directly from the driver. Below is an example using the Redis driver.","type":"text"}],"type":"paragraph"},{"code":["\/\/ setup Redis connection and persist drive. This should be the","\/\/ redis connection pool group you use for all your other Redis","\/\/ connections unless you are using a different database","let redisConnectionPoolGroup = try RedisConnectionPoolGroup(","    configuration: .init(hostname: Self.redisHostname, port: 6379),","    eventLoopGroup: app.eventLoopGroup,","    logger: app.logger",")","let persist = HBRedisPersistDriver(redisConnectionPoolGroup: redisConnectionPoolGroup)","","\/\/ add routes to application","app.put(\"key\") { request -> HTTPResponseStatus in","    let value = try request.uri.queryParameters.require(\"value\")","    try await persist.set(","        key: \"mykey\", ","        value: value, ","        expires: .minutes(30), ","        request: request","    )","    return .ok","}","","app.get(\"key\") { request -> String? in","    try await persist.get(","        key: \"mykey\", ","        request: request","    )","    return .ok","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you do setup a persist driver as above. You will need to manage its lifecycle and call ","type":"text"},{"code":"HBPersistDriver.shutdown","type":"codeVoice"},{"text":" when you shutdown your application.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Logging,-Metrics-and-Tracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles"}],"metadata":{"role":"collectionGroup","modules":[{"name":"Hummingbird"}],"title":"Persistent data"},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError"],"title":"Reference"}],"sections":[],"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Extending-Hummingbird":{"role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","title":"Extending Hummingbird","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/extending-hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"title":"Error Handling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","role":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"url":"\/documentation\/hummingbird\/error-handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriver":{"abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriver","kind":"symbol","type":"topic","navigatorTitle":[{"text":"HBPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbird\/hbpersistdriver","title":"HBPersistDriver","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistDriverFactory":{"role":"symbol","url":"\/documentation\/hummingbird\/hbpersistdriverfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistDriverFactory"}],"navigatorTitle":[{"kind":"identifier","text":"HBPersistDriverFactory"}],"title":"HBPersistDriverFactory","abstract":[{"text":"Factory class for persist drivers","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistDriverFactory","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBPersistError":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBPersistError"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBPersistError","type":"topic","url":"\/documentation\/hummingbird\/hbpersisterror","navigatorTitle":[{"kind":"identifier","text":"HBPersistError"}],"title":"HBPersistError","abstract":[{"type":"text","text":"Errors return by persist framework"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Encoding-and-Decoding":{"kind":"article","title":"Encoding and Decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"type":"topic","url":"\/documentation\/hummingbird\/encoding-and-decoding","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMemoryPersistDriver":{"kind":"symbol","title":"HBMemoryPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMemoryPersistDriver","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"kind":"identifier","text":"HBMemoryPersistDriver"}],"type":"topic","url":"\/documentation\/hummingbird\/hbmemorypersistdriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMemoryPersistDriver"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Logging,-Metrics-and-Tracing":{"title":"Logging, Metrics and Tracing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Logging,-Metrics-and-Tracing","role":"collectionGroup","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"url":"\/documentation\/hummingbird\/logging,-metrics-and-tracing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","role":"collectionGroup","type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article"}}}