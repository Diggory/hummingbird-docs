{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/One-Time-Passwords"],"title":"Articles"}],"metadata":{"modules":[{"name":"HummingbirdAuth"}],"title":"Authenticators","roleHeading":"Article","role":"article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"abstract":[{"type":"text","text":"Request authentication middleware"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then augment the request with the authentication data. Authenticators should conform to protocol ","type":"text"},{"type":"codeVoice","code":"HBAuthenticator"},{"text":". This requires you implement the function ","type":"text"},{"code":"authenticate(request: HBRequest) -> EventLoopFuture<Value?>","type":"codeVoice"},{"text":" where ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" is the authentication data and conforms to the protocol ","type":"text"},{"code":"HBAuthenticatable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"text":"Usage","type":"heading","anchor":"Usage"},{"inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct, otherwise it returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate(request: HBRequest) -> EventLoopFuture<User?> {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.auth.basic","        guard let basic = request.authBasic else { return request.success(nil) }","","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        return database.getUserWithUsername(basic.username, on: request.eventLoop).flatMap { user in","            \/\/ did we find a user","            guard let user = user else { return request.success(nil) }","            \/\/ verify password against password hash stored in database. If valid","            \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt. ","            return Bcrypt.verify(basic.password, hash: user.passwordHash, for: request).map { success in","                guard success else { return nil }","                return user","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"An authenticator is middleware so can be added to your application like any other middleware","type":"text"}],"type":"paragraph"},{"code":["app.middleware.add(BasicAuthenticator())"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"request.authGet"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = request.authGet(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},{"type":"text","text":" after your authentication middleware"}],"type":"paragraph"},{"code":["app.middleware.add(BasicAuthenticator())","app.middleware.add(IsAuthenticatedMiddleware<User>())"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Or you can use ","type":"text"},{"type":"codeVoice","code":"request.requireAuth"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/One-Time-Passwords":{"abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/One-Time-Passwords","title":"One Time Passwords","url":"\/documentation\/hummingbird\/one-time-passwords","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAsyncAuthenticator":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncAuthenticator"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncAuthenticator"}],"url":"\/documentation\/hummingbirdauth\/hbasyncauthenticator","kind":"symbol","role":"symbol","title":"HBAsyncAuthenticator","abstract":[{"type":"text","text":"Async version of Middleware to check if a request is authenticated and then augment the request with"},{"type":"text","text":" "},{"type":"text","text":"authentication data."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"abstract":[{"text":"Session based authentication","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","title":"Sessions","url":"\/documentation\/hummingbird\/sessions","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"abstract":[{"type":"text","text":"Protocol for objects that can be returned by an "},{"code":"HBAuthenticator","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdauth\/hbauthenticatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","navigatorTitle":[{"text":"HBAuthenticatable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthenticatable","kind":"identifier"}],"title":"HBAuthenticatable","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"url":"\/documentation\/hummingbirdauth","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","kind":"symbol","role":"symbol","title":"IsAuthenticatedMiddleware","abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAuthenticator","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"HBAuthenticator","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticator","kind":"symbol","role":"symbol","title":"HBAuthenticator","abstract":[{"text":"Middleware to check if a request is authenticated and then augment the request with","type":"text"},{"text":" ","type":"text"},{"text":"authentication data.","type":"text"}]}}}