{"metadata":{"modules":[{"name":"HummingbirdAuth"}],"role":"article","roleHeading":"Article","title":"Authenticators"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then augment the request with the authentication data. Authenticators should conform to protocol ","type":"text"},{"code":"HBAuthenticator","type":"codeVoice"},{"text":". This requires you implement the function ","type":"text"},{"code":"authenticate(request: HBRequest) -> EventLoopFuture<Value?>","type":"codeVoice"},{"text":" where ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" is the authentication data and conforms to the protocol ","type":"text"},{"type":"codeVoice","code":"HBAuthenticatable"},{"type":"text","text":"."}]},{"anchor":"Usage","level":2,"text":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct, otherwise it returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["struct BasicAuthenticator: HBAuthenticator {","    func authenticate(request: HBRequest) -> EventLoopFuture<User?> {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.auth.basic","        guard let basic = request.authBasic else { return request.success(nil) }","","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        return database.getUserWithUsername(basic.username, on: request.eventLoop).flatMap { user in","            \/\/ did we find a user","            guard let user = user else { return request.success(nil) }","            \/\/ verify password against password hash stored in database. If valid","            \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt. ","            return Bcrypt.verify(basic.password, hash: user.passwordHash, for: request).map { success in","                guard success else { return nil }","                return user","            }","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"syntax":"swift","code":["app.middleware.add(BasicAuthenticator())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"request.authGet"},{"text":".","type":"text"}]},{"syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: HBRequest) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    guard let user = request.authGet(User.self) else { throw HBHTTPError(.unauthorized) }","    return user","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by either adding the middleware "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"reference","isActive":true},{"type":"text","text":" after your authentication middleware"}]},{"syntax":"swift","code":["app.middleware.add(BasicAuthenticator())","app.middleware.add(IsAuthenticatedMiddleware<User>())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or you can use ","type":"text"},{"type":"codeVoice","code":"request.requireAuth"},{"text":" to access the authentication data. In both of these cases if data is not available a unauthorised error is thrown and a 404 response is returned by the server.","type":"text"}]}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/One-Time-Passwords"],"title":"Articles"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Authenticators"},"sections":[],"kind":"article","abstract":[{"type":"text","text":"Request authentication middleware"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/One-Time-Passwords":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/One-Time-Passwords","type":"topic","role":"article","kind":"article","title":"One Time Passwords","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"url":"\/documentation\/hummingbird\/one-time-passwords"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"kind":"symbol","title":"IsAuthenticatedMiddleware","navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticatable":{"type":"topic","title":"HBAuthenticatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticatable","navigatorTitle":[{"kind":"identifier","text":"HBAuthenticatable"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/hbauthenticatable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticatable"}],"role":"symbol","abstract":[{"type":"text","text":"Protocol for objects that can be returned by an "},{"code":"HBAuthenticator","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"navigatorTitle":[{"kind":"identifier","text":"HBAuthenticator"}],"title":"HBAuthenticator","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticator"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticator","abstract":[{"type":"text","text":"Middleware to check if a request is authenticated and then augment the request with"},{"type":"text","text":" "},{"type":"text","text":"authentication data."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"kind":"symbol","title":"HummingbirdAuth","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","url":"\/documentation\/hummingbirdauth","type":"topic","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAsyncAuthenticator":{"type":"topic","title":"HBAsyncAuthenticator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","navigatorTitle":[{"text":"HBAsyncAuthenticator","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/hbasyncauthenticator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBAsyncAuthenticator","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Async version of Middleware to check if a request is authenticated and then augment the request with","type":"text"},{"text":" ","type":"text"},{"text":"authentication data.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"title":"Sessions","url":"\/documentation\/hummingbird\/sessions","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","role":"article","abstract":[{"text":"Session based authentication","type":"text"}]}}}