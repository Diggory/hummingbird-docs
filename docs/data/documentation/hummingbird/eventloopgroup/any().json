{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"symbolKind":"method","modules":[{"name":"Hummingbird"}],"required":true,"roleHeading":"Instance Method","title":"any()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"}],"externalID":"s:7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","role":"symbol"},"abstract":[{"type":"text","text":"Returns any "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" from the "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":", a common choice is the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/hummingbird\/eventloopgroup\/any()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"style":"warning","content":[{"inlineContent":[{"type":"text","text":"You cannot rely on the returned "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" being the current one, not all "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"s support"},{"type":"text","text":" "},{"type":"text","text":"choosing the current one. Use this method only if you are truly happy with "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" instance."}],"type":"paragraph"}],"name":"Warning","type":"aside"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"You will only receive the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" here iff the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" belongs to the"},{"type":"text","text":" "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":" you call "},{"code":"any()","type":"codeVoice"},{"type":"text","text":" on."}],"type":"paragraph"}],"name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"This method is useful having access to an ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":" without the knowledge of which ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" would be","type":"text"},{"text":" ","type":"text"},{"text":"the best one to select to create a new ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". This commonly happens in libraries where the user","type":"text"},{"text":" ","type":"text"},{"text":"cannot indicate what ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" they would like their futures on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Typically, it is faster to kick off a new operation on the ","type":"text"},{"inlineContent":[{"type":"text","text":"current"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" because that minimised thread","type":"text"},{"text":" ","type":"text"},{"text":"switches. Hence, if situations where you don’t need precise knowledge of what ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" some code is running","type":"text"},{"text":" ","type":"text"},{"text":"on, use ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":" to indicate this.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The rule of thumb is: If you are trying to do ","type":"text"},{"inlineContent":[{"text":"load balancing","type":"text"}],"type":"emphasis"},{"text":", use ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":". If you just want to create a new","type":"text"},{"text":" ","type":"text"},{"text":"future or kick off some operation, use ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":".","type":"text"}]}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup\/any()"},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","kind":"symbol","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","title":"EventLoop","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"url":"\/documentation\/hummingbird\/eventloopgroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","title":"EventLoopGroup","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup/any()":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":", a common choice is the current "},{"type":"codeVoice","code":"EventLoop"},{"text":".","type":"text"}],"title":"any()","url":"\/documentation\/hummingbird\/eventloopgroup\/any()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup\/any()","required":true}}}