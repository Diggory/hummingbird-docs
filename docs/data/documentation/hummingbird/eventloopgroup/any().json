{"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup\/any()","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup"]]},"variants":[{"paths":["\/documentation\/hummingbird\/eventloopgroup\/any()"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"}],"title":"any()","modules":[{"name":"Hummingbird"}],"externalID":"s:7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","symbolKind":"method","role":"symbol","required":true,"roleHeading":"Instance Method"},"kind":"symbol","abstract":[{"type":"text","text":"Returns any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":", a common choice is the current "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot rely on the returned "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" being the current one, not all "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"s support"},{"type":"text","text":" "},{"type":"text","text":"choosing the current one. Use this method only if you are truly happy with "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" instance."}]}],"name":"Warning","type":"aside"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You will only receive the current "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" here iff the current "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" belongs to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" you call "},{"type":"codeVoice","code":"any()"},{"type":"text","text":" on."}]}],"name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"This method is useful having access to an "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" without the knowledge of which "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" would be"},{"type":"text","text":" "},{"type":"text","text":"the best one to select to create a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". This commonly happens in libraries where the user"},{"type":"text","text":" "},{"type":"text","text":"cannot indicate what "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" they would like their futures on."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Typically, it is faster to kick off a new operation on the "},{"inlineContent":[{"text":"current","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" because that minimised thread"},{"type":"text","text":" "},{"type":"text","text":"switches. Hence, if situations where you don’t need precise knowledge of what "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" some code is running"},{"type":"text","text":" "},{"type":"text","text":"on, use "},{"code":"any()","type":"codeVoice"},{"type":"text","text":" to indicate this."}],"type":"paragraph"},{"inlineContent":[{"text":"The rule of thumb is: If you are trying to do ","type":"text"},{"inlineContent":[{"type":"text","text":"load balancing"}],"type":"emphasis"},{"text":", use ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":". If you just want to create a new","type":"text"},{"text":" ","type":"text"},{"text":"future or kick off some operation, use ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"title":"EventLoopGroup","url":"\/documentation\/hummingbird\/eventloopgroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","type":"topic","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup/any()":{"url":"\/documentation\/hummingbird\/eventloopgroup\/any()","title":"any()","required":true,"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"}],"abstract":[{"text":"Returns any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":", a common choice is the current ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup\/any()","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoop"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"title":"EventLoop","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/eventloop"}}}