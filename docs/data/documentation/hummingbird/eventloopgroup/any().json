{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup\/any()","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/hummingbird\/eventloopgroup\/any()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"You cannot rely on the returned "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" being the current one, not all "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"s support"},{"type":"text","text":" "},{"type":"text","text":"choosing the current one. Use this method only if you are truly happy with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" instance."}],"type":"paragraph"}],"name":"Warning","style":"warning"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"You will only receive the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" here iff the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" belongs to the"},{"type":"text","text":" "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":" you call "},{"code":"any()","type":"codeVoice"},{"type":"text","text":" on."}],"type":"paragraph"}],"name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"This method is useful having access to an ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" without the knowledge of which ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" would be","type":"text"},{"text":" ","type":"text"},{"text":"the best one to select to create a new ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". This commonly happens in libraries where the user","type":"text"},{"text":" ","type":"text"},{"text":"cannot indicate what ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" they would like their futures on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically, it is faster to kick off a new operation on the "},{"type":"emphasis","inlineContent":[{"text":"current","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" because that minimised thread"},{"type":"text","text":" "},{"type":"text","text":"switches. Hence, if situations where you don’t need precise knowledge of what "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" some code is running"},{"type":"text","text":" "},{"type":"text","text":"on, use "},{"type":"codeVoice","code":"any()"},{"type":"text","text":" to indicate this."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rule of thumb is: If you are trying to do "},{"inlineContent":[{"type":"text","text":"load balancing"}],"type":"emphasis"},{"type":"text","text":", use "},{"type":"codeVoice","code":"next()"},{"type":"text","text":". If you just want to create a new"},{"type":"text","text":" "},{"type":"text","text":"future or kick off some operation, use "},{"type":"codeVoice","code":"any()"},{"type":"text","text":"."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup"]]},"sections":[],"abstract":[{"type":"text","text":"Returns any "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" from the "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":", a common choice is the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"."}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"}],"title":"any()","externalID":"s:7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","role":"symbol","roleHeading":"Instance Method","required":true,"symbolKind":"method","modules":[{"name":"Hummingbird"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"url":"\/documentation\/hummingbird\/eventloopgroup","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol","title":"EventLoopGroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup/any()":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup\/any()","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"}],"title":"any()","role":"symbol","abstract":[{"text":"Returns any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":", a common choice is the current ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"required":true,"url":"\/documentation\/hummingbird\/eventloopgroup\/any()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"kind":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","url":"\/documentation\/hummingbird\/eventloop","type":"topic","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}]}}}