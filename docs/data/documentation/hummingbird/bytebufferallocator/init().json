{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator\/init()"},"abstract":[{"type":"text","text":"Create a fresh "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":". In the future the allocator might use for example allocation pools and"},{"type":"text","text":" "},{"type":"text","text":"therefore it’s recommended to reuse "},{"code":"ByteBufferAllocators","type":"codeVoice"},{"type":"text","text":" where possible instead of creating fresh ones in"},{"type":"text","text":" "},{"type":"text","text":"many places."}],"variants":[{"paths":["\/documentation\/hummingbird\/bytebufferallocator\/init()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"()"}],"languages":["swift"]}],"kind":"declarations"}],"metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"modules":[{"name":"Hummingbird"}],"roleHeading":"Initializer","externalID":"s:7NIOCore19ByteBufferAllocatorVACycfc","symbolKind":"init","role":"symbol","title":"init()"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator"]]},"sections":[],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferAllocator","kind":"identifier"}],"navigatorTitle":[{"text":"ByteBufferAllocator","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","title":"ByteBufferAllocator","abstract":[{"type":"text","text":"The preferred allocator for "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbird\/bytebufferallocator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator/init()":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"init()","url":"\/documentation\/hummingbird\/bytebufferallocator\/init()","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Create a fresh "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":". In the future the allocator might use for example allocation pools and"},{"type":"text","text":" "},{"type":"text","text":"therefore it’s recommended to reuse "},{"type":"codeVoice","code":"ByteBufferAllocators"},{"text":" where possible instead of creating fresh ones in","type":"text"},{"text":" ","type":"text"},{"text":"many places.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]}}}