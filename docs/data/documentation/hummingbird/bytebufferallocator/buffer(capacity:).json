{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"buffer","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The initial capacity of the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"capacity"}],"kind":"parameters"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"content":[{"inlineContent":[{"type":"text","text":"The passed "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" is the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s initial capacity, it will grow automatically if necessary."}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"capacity","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", this function will not allocate. If you want to trigger an allocation immediately,","type":"text"},{"text":" ","type":"text"},{"text":"also call ","type":"text"},{"code":".clear()","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"aside","name":"Note","style":"note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/hummingbird\/bytebufferallocator\/buffer(capacity:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","abstract":[{"text":"Request a freshly allocated ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" of size ","type":"text"},{"code":"capacity","type":"codeVoice"},{"type":"text","text":" or larger."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator"]]},"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator\/buffer(capacity:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Hummingbird"}],"externalID":"s:7NIOCore19ByteBufferAllocatorV6buffer8capacityAA0bC0VSi_tF","symbolKind":"method","title":"buffer(capacity:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"buffer","kind":"identifier"},{"text":"(","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator/buffer(capacity:)":{"title":"buffer(capacity:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator\/buffer(capacity:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"buffer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/hummingbird\/bytebufferallocator\/buffer(capacity:)","abstract":[{"type":"text","text":"Request a freshly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" of size "},{"type":"codeVoice","code":"capacity"},{"text":" or larger.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/hummingbird\/bytebufferallocator","title":"ByteBufferAllocator","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","kind":"symbol","type":"topic"}}}