{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPHeadersPatch"]]},"sections":[],"abstract":[{"text":"Add a sequence of header name\/value pairs to the block.","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"other","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:ST","text":"Sequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == (","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"contentsOf","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequence of header name\/value pairs. For maximum compatibility"},{"type":"text","text":" "},{"type":"text","text":"the header should be an ASCII string. For future-proofing with HTTP\/2 lowercase header"},{"type":"text","text":" "},{"type":"text","text":"names are strongly recommended."}]}]}]},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is strictly additive: if there are other entries with the same header"},{"type":"text","text":" "},{"type":"text","text":"name already in the block, this will add new entries."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/httpheaderspatch\/add(contentsof:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPHeadersPatch\/add(contentsOf:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","modules":[{"name":"HummingbirdLambda"}],"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"add(contentsOf:)","roleHeading":"Instance Method","externalID":"s:11Hummingbird16HTTPHeadersPatchV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPHeadersPatch":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPHeadersPatch"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPHeadersPatch","kind":"symbol","abstract":[{"text":"Used to Patch HTTPHeaders. Remembers if a header was added in with ","type":"text"},{"code":"add","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"replaceOrAdd","type":"codeVoice"}],"type":"topic","url":"\/documentation\/hummingbird\/httpheaderspatch","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPHeadersPatch"}],"title":"HTTPHeadersPatch"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPHeadersPatch/add(contentsOf:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbird\/httpheaderspatch\/add(contentsof:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPHeadersPatch\/add(contentsOf:)","abstract":[{"type":"text","text":"Add a sequence of header name\/value pairs to the block."}],"title":"add(contentsOf:)","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"}}}