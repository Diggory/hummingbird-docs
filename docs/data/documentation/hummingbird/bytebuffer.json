{"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/s23CustomStringConvertibleP","doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/SH","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"]}],"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/capacity","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readableBytes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readerIndex","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/storageCapacity","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writableBytes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writerIndex"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/discardReadBytes()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/HBResponseGenerator-Implementations"]}],"sections":[],"metadata":{"title":"ByteBuffer","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"modules":[{"name":"Hummingbird"}],"externalID":"s:7NIOCore10ByteBufferV","role":"symbol","roleHeading":"Structure"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":3,"anchor":"Allocation","type":"heading","text":"Allocation"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"type":"text","text":" to allocate a new "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"Supported-types","type":"heading","text":"Supported types"},{"inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". Using Swift’s "},{"type":"codeVoice","code":"extension"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"type":"text","text":"create "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" support for your own data types. Out of the box, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" supports for example the following"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"StaticString"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Foundation","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Data","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":" and generally any "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" of "},{"code":"UInt8","type":"codeVoice"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Random-Access","type":"heading","text":"Random Access"},{"inlineContent":[{"type":"text","text":"For every supported type "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" usually contains two methods for random access:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"text":" where ","type":"text"},{"type":"codeVoice","code":"<type>"},{"text":" is for example ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Bytes"},{"text":" (for ","type":"text"},{"type":"codeVoice","code":"[UInt8]"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}]}]}]},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"]},{"inlineContent":[{"type":"text","text":"If needed, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"type":"codeVoice","code":"set"},{"type":"text","text":" request."}],"type":"paragraph"},{"level":3,"anchor":"Sequential-Access","type":"heading","text":"Sequential Access"},{"inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"readerIndex","type":"codeVoice"},{"text":", the index of the next readable byte","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}]}]}]},{"inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for sequential access:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"read<Type>(length: Int)","type":"codeVoice"},{"text":" to read ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes from the current ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" (and then advance the reader","type":"text"},{"text":" ","type":"text"},{"text":"index by ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"type":"text","text":" to write, advancing the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" by the appropriate amount"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"]},{"level":3,"anchor":"Layout","type":"heading","text":"Layout"},{"type":"codeListing","syntax":null,"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"]},{"inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"type":"codeVoice","code":"read<Type>"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"write<Type>"},{"type":"text","text":"). Getting "},{"type":"codeVoice","code":"writableBytes"},{"type":"text","text":" (bytes beyond the writer index) is undefined"},{"type":"text","text":" "},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"type":"text","text":" initialised)."}],"type":"paragraph"},{"level":3,"anchor":"Slicing","type":"heading","text":"Slicing"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports slicing a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" without copying the underlying storage.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]},{"level":3,"anchor":"Notes","type":"heading","text":"Notes"},{"inlineContent":[{"text":"All ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the ‘readable bytes’.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/bytebuffer"]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"seeAlsoSections":[{"generated":true,"title":"NIOCore Symbols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-7qskn":{"abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"title":"clear(minimumCapacity:)","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/discardReadBytes()":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/discardReadBytes()","role":"symbol","title":"discardReadBytes()","type":"topic","abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" after the call returns."}],"url":"\/documentation\/hummingbird\/bytebuffer\/discardreadbytes()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardReadBytes","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"type":"topic","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"text":" ","type":"text"},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","role":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/capacity":{"title":"capacity","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"capacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/capacity","url":"\/documentation\/hummingbird\/bytebuffer\/capacity","abstract":[{"text":"The current capacity of the storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", this is not constant and does ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" signify the number","type":"text"},{"text":" ","type":"text"},{"text":"of bytes that have been written to this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"url":"\/documentation\/hummingbird\/eventloopfuture","role":"symbol"},"doc://com.opticalaberration.hummingbird/SQ":{"type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ","title":"Swift.Equatable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/getSlice(at:length:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/getslice(at:length:)","abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"type":"codeVoice","code":"index"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"0"},{"type":"text","text":", the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}],"type":"topic","title":"getSlice(at:length:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","title":"Swift.Sendable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"title":"ByteBufferAllocator","url":"\/documentation\/hummingbird\/bytebufferallocator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"title":"ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","url":"\/documentation\/hummingbird\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear()":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()","role":"symbol","title":"clear()","type":"topic","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"url":"\/documentation\/hummingbird\/bytebuffer\/clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writableBytes":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writableBytes","title":"writableBytes","abstract":[{"type":"text","text":"The number of bytes writable until "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"type":"text","text":" "},{"type":"text","text":"trigger a copy of the bytes."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/writablebytes"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"abstract":[],"url":"\/documentation\/hummingbird\/bytebuffer\/writewithunsafemutablebytes(_:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"deprecated":true,"type":"topic","title":"writeWithUnsafeMutableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/readableBytes":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"readableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"title":"readableBytes","url":"\/documentation\/hummingbird\/bytebuffer\/readablebytes","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readableBytes","abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"type":"text","text":" = "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/HBResponseGenerator-Implementations":{"abstract":[],"role":"collectionGroup","kind":"article","title":"HBResponseGenerator Implementations","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/HBResponseGenerator-Implementations","url":"\/documentation\/hummingbird\/bytebuffer\/hbresponsegenerator-implementations"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(_:)","title":"reserveCapacity(_:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeBytes(_:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytes(_:)","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","title":"withVeryUnsafeBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafebytes(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount","abstract":[{"text":"Represents a time ","type":"text"},{"inlineContent":[{"type":"text","text":"interval"}],"type":"emphasis"},{"text":".","type":"text"}],"role":"symbol","title":"TimeAmount","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeAmount","kind":"identifier"}],"url":"\/documentation\/hummingbird\/timeamount"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytes(_:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebytes(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytes(_:)","title":"withUnsafeReadableBytes(_:)","kind":"symbol","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}]},"doc://com.opticalaberration.hummingbird/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SH"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"url":"\/documentation\/hummingbird\/socketaddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}],"navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}],"title":"SocketAddress","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","role":"symbol","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic","abstract":[{"type":"text","text":"This vends a pointer of the "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" at the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" after ensuring that the buffer has at least "},{"code":"minimumWritableBytes","type":"codeVoice"},{"type":"text","text":" of writable bytes available."}],"url":"\/documentation\/hummingbird\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","title":"reserveCapacity(minimumWritableBytes:)","abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(minimumwritablebytes:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseGenerator":{"navigatorTitle":[{"kind":"identifier","text":"HBResponseGenerator"}],"url":"\/documentation\/hummingbird\/hbresponsegenerator","title":"HBResponseGenerator","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Object that can generate a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseGenerator"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"type":"topic","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablereadablebytes(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"kind":"symbol","title":"withUnsafeMutableReadableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/readerIndex":{"url":"\/documentation\/hummingbird\/bytebuffer\/readerindex","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerIndex"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readerIndex","title":"readerIndex","kind":"symbol","abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablewritablebytes(_:)","title":"withUnsafeMutableWritableBytes(_:)","role":"symbol","type":"topic","abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"code":"capacity","type":"codeVoice"},{"text":" - ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":"). Before reading those bytes you must first","type":"text"},{"text":" ","type":"text"},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-12w71":{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear(minimumCapacity:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-12w71","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-12w71"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","role":"symbol","title":"withVeryUnsafeBytesWithStorageManagement(_:)","type":"topic","abstract":[{"type":"text","text":"See "},{"code":"withUnsafeReadableBytesWithStorageManagement","type":"codeVoice"},{"type":"text","text":" and "},{"code":"withVeryUnsafeBytes","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/storageCapacity":{"role":"symbol","kind":"symbol","abstract":[{"text":"The current capacity of the underlying storage of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/storageCapacity","title":"storageCapacity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"storageCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"type":"topic","url":"\/documentation\/hummingbird\/bytebuffer\/storagecapacity"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","kind":"symbol","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","title":"EventLoop","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","title":"withVeryUnsafeMutableBytes(_:)","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"text":"very unsafe","type":"text"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeMutableWritableBytes"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeMutableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafemutablebytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writerIndex":{"url":"\/documentation\/hummingbird\/bytebuffer\/writerindex","role":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writerIndex","title":"writerIndex","kind":"symbol","abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"url":"\/documentation\/hummingbird\/eventloopgroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","title":"EventLoopGroup","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol"}}}