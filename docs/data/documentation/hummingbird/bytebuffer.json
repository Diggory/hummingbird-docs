{"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/capacity","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readableBytes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readerIndex","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/storageCapacity","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writableBytes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writerIndex"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/discardReadBytes()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/HBResponseGenerator-Implementations"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/bytebuffer"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"},"seeAlsoSections":[{"title":"NIOCore Symbols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"],"generated":true}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/s23CustomStringConvertibleP","doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/SH","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"],"kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"kind":"symbol","sections":[],"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}]}],"kind":"declarations"},{"content":[{"text":"Allocation","level":3,"type":"heading","anchor":"Allocation"},{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"text":" to allocate a new ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Supported types","level":3,"type":"heading","anchor":"Supported-types"},{"inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". Using Swift’s "},{"code":"extension","type":"codeVoice"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"type":"text","text":"create "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" support for your own data types. Out of the box, "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports for example the following"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"StaticString"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s various (unsigned) integer types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Foundation","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Data","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[UInt8]"},{"text":" and generally any ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"UInt8"}]}]}],"type":"unorderedList"},{"text":"Random Access","level":3,"type":"heading","anchor":"Random-Access"},{"inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"get<Type>(at: Int, length: Int)","type":"codeVoice"},{"type":"text","text":" where "},{"code":"<type>","type":"codeVoice"},{"type":"text","text":" is for example "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"code":"Data","type":"codeVoice"},{"type":"text","text":", "},{"code":"Bytes","type":"codeVoice"},{"type":"text","text":" (for "},{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing"},{"inlineContent":[{"text":"If needed, ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will automatically resize its storage to accommodate your ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" request.","type":"text"}],"type":"paragraph"},{"text":"Sequential Access","level":3,"type":"heading","anchor":"Sequential-Access"},{"inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"readerIndex","type":"codeVoice"},{"text":", the index of the next readable byte","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"text":", the index of the next byte to write","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for sequential access:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"text":" to read ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes from the current ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"text":" (and then advance the reader","type":"text"},{"text":" ","type":"text"},{"text":"index by ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"write<Type>(Type)","type":"codeVoice"},{"text":" to write, advancing the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" by the appropriate amount","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"type":"codeListing"},{"text":"Layout","level":3,"type":"heading","anchor":"Layout"},{"syntax":null,"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"code":"read<Type>","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"write<Type>","type":"codeVoice"},{"type":"text","text":"). Getting "},{"code":"writableBytes","type":"codeVoice"},{"type":"text","text":" (bytes beyond the writer index) is undefined"},{"type":"text","text":" "},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" "},{"code":"0","type":"codeVoice"},{"type":"text","text":" initialised)."}],"type":"paragraph"},{"text":"Slicing","level":3,"type":"heading","anchor":"Slicing"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports slicing a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" without copying the underlying storage.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"],"type":"codeListing"},{"text":"Notes","level":3,"type":"heading","anchor":"Notes"},{"inlineContent":[{"text":"All ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the ‘readable bytes’.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"roleHeading":"Structure","modules":[{"name":"Hummingbird"}],"title":"ByteBuffer","role":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"externalID":"s:7NIOCore10ByteBufferV","symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseGenerator":{"url":"\/documentation\/hummingbird\/hbresponsegenerator","abstract":[{"text":"Object that can generate a ","type":"text"},{"type":"codeVoice","code":"Response"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBResponseGenerator"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseGenerator"}],"title":"HBResponseGenerator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-7qskn":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"role":"symbol","title":"clear(minimumCapacity:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn","url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-7qskn","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"for a new use-case."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/readableBytes":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"readableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"role":"symbol","title":"readableBytes","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readableBytes","url":"\/documentation\/hummingbird\/bytebuffer\/readablebytes","abstract":[{"text":"The number of bytes readable (","type":"text"},{"code":"readableBytes","type":"codeVoice"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytes(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","title":"withUnsafeReadableBytes(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytes(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebytes(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"’s readable bytes.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV","text":"Unmanaged","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"‘s readable bytes. You may hold a pointer to those bytes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s23CustomStringConvertibleP"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","url":"\/documentation\/hummingbird\/bytebufferallocator","kind":"symbol","role":"symbol","title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"realloc"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"free"},{"text":".","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"role":"symbol","title":"reserveCapacity(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(_:)","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"title":"ByteBuffer","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"url":"\/documentation\/hummingbird\/bytebuffer","kind":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-12w71":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","title":"clear(minimumCapacity:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-12w71","url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-12w71","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"title":"EventLoop","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"role":"symbol","url":"\/documentation\/hummingbird\/eventloop","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","kind":"symbol","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoop"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/storageCapacity":{"abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}],"title":"storageCapacity","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/storagecapacity","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"storageCapacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/storageCapacity"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/discardReadBytes()":{"abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" after the call returns."}],"title":"discardReadBytes()","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/discardreadbytes()","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"discardReadBytes","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/discardReadBytes()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/HBResponseGenerator-Implementations":{"abstract":[],"title":"HBResponseGenerator Implementations","role":"collectionGroup","url":"\/documentation\/hummingbird\/bytebuffer\/hbresponsegenerator-implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/HBResponseGenerator-Implementations"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}],"title":"reserveCapacity(minimumWritableBytes:)","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(minimumwritablebytes:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeBytes(_:)":{"abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"type":"text","text":"."}],"title":"withVeryUnsafeBytes(_:)","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafebytes(_:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/readerIndex":{"abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"title":"readerIndex","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/readerindex","type":"topic","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readerIndex"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/getSlice(at:length:)":{"abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"type":"codeVoice","code":"index"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"code":"index","type":"codeVoice"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" in the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" of the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"0","type":"codeVoice"},{"type":"text","text":", the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"length","type":"codeVoice"},{"type":"text","text":"."}],"title":"getSlice(at:length:)","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/getslice(at:length:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear()":{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear()","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/clear()","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic","url":"\/documentation\/hummingbird\/eventloopgroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","title":"EventLoopGroup","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EventLoopGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}],"title":"SocketAddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketAddress","kind":"identifier"}],"url":"\/documentation\/hummingbird\/socketaddress","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"type":"codeVoice","code":"bytesWritable"},{"type":"text","text":" = "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" - "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"type":"text","text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged."}],"title":"withUnsafeMutableWritableBytes(_:)","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablewritablebytes(_:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/capacity":{"abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":", this is not constant and does "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"type":"text","text":"of bytes that have been written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"title":"capacity","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/capacity","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"capacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/capacity"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writerIndex":{"abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"title":"writerIndex","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/writerindex","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writerIndex"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"title":"withUnsafeMutableReadableBytes(_:)","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablereadablebytes(_:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writableBytes":{"title":"writableBytes","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writableBytes","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"url":"\/documentation\/hummingbird\/bytebuffer\/writablebytes","abstract":[{"type":"text","text":"The number of bytes writable until "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"type":"text","text":" "},{"type":"text","text":"trigger a copy of the bytes."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"kind":"symbol","title":"TimeAmount","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount","url":"\/documentation\/hummingbird\/timeamount","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Represents a time "},{"type":"emphasis","inlineContent":[{"type":"text","text":"interval"}]},{"type":"text","text":"."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeAmount","kind":"identifier"}],"navigatorTitle":[{"text":"TimeAmount","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"title":"withVeryUnsafeBytesWithStorageManagement(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withVeryUnsafeBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s9UnmanagedV","kind":"typeIdentifier","text":"Unmanaged"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier","text":"AnyObject"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","role":"symbol","abstract":[{"text":"See ","type":"text"},{"code":"withUnsafeReadableBytesWithStorageManagement","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"withVeryUnsafeBytes","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeMutableBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafemutablebytes(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","title":"withVeryUnsafeMutableBytes(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SH","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","abstract":[{"type":"text","text":"This vends a pointer of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" at the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" after ensuring that the buffer has at least "},{"type":"codeVoice","code":"minimumWritableBytes"},{"type":"text","text":" of writable bytes available."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"url":"\/documentation\/hummingbird\/eventloopfuture","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","title":"EventLoopFuture","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","type":"topic","deprecated":true,"url":"\/documentation\/hummingbird\/bytebuffer\/writewithunsafemutablebytes(_:)","title":"writeWithUnsafeMutableBytes(_:)","role":"symbol","kind":"symbol","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}]}}}