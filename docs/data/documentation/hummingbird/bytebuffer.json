{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/bytebuffer"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"},"sections":[],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","modules":[{"name":"Hummingbird"}],"roleHeading":"Structure","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"externalID":"s:7NIOCore10ByteBufferV","symbolKind":"struct"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Allocation","type":"heading","level":3,"anchor":"Allocation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"type":"text","text":" to allocate a new "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},{"text":"Basic usage","type":"heading","level":3,"anchor":"Basic-usage"},{"type":"paragraph","inlineContent":[{"text":"A variety of types can be read\/written from\/to a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". Using Swift’s ","type":"text"},{"code":"extension","type":"codeVoice"},{"text":" mechanism you can easily","type":"text"},{"text":" ","type":"text"},{"text":"create ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" support for your own data types. Out of the box, ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" supports for example the following","type":"text"},{"text":" ","type":"text"},{"text":"types (non-exhaustive list):","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"StaticString"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"Foundation","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Data","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[UInt8]"},{"type":"text","text":" and generally any "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" of "},{"type":"codeVoice","code":"UInt8"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The best and easiest way to read and convert ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"},{"text":" into a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":",  ","type":"text"},{"code":"Array<UInt8>","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" is by","type":"text"},{"text":" ","type":"text"},{"text":"passing the buffer to an initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"type":"codeListing","code":["let buf = ...","let myString = String(buffer: buf)"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides APIs for reading its contents either sequentially ("},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods) or randomly ("},{"type":"codeVoice","code":"get*"},{"type":"text","text":" "},{"type":"text","text":"methods). All "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable"},{"type":"text","text":" "},{"type":"text","text":"bytes of the buffer, i.e. "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If you need to loop over all the bytes in the buffer, you can use the ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" conformance with ","type":"text"},{"type":"codeVoice","code":"readableBytesView"},{"text":":","type":"text"}]},{"type":"codeListing","code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential ","type":"text"},{"code":"read*","type":"codeVoice"},{"text":" methods:","type":"text"}]},{"type":"codeListing","code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"syntax":null},{"text":"Random Access","type":"heading","level":3,"anchor":"Random-Access"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" usually contains two methods for random access:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"get<Type>(at: Int, length: Int)","type":"codeVoice"},{"text":" where ","type":"text"},{"code":"<type>","type":"codeVoice"},{"text":" is for example ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":" (for ","type":"text"},{"code":"[UInt8]","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"If needed, ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will automatically resize its storage to accommodate your ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" request.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"get*(at: index)","type":"codeVoice"},{"text":" methods, make sure that the","type":"text"},{"text":" ","type":"text"},{"code":"index","type":"codeVoice"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"text":" range, ","type":"text"},{"code":"get*","type":"codeVoice"},{"text":" methods will return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". For most applications, initializing","type":"text"},{"text":" ","type":"text"},{"text":"the desired type with the contents of the buffer, or using one of the ","type":"text"},{"code":"read*","type":"codeVoice"},{"text":" is a better approach.","type":"text"}]}],"type":"aside","style":"note"},{"text":"Sequential Access","type":"heading","level":3,"anchor":"Sequential-Access"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"text":", the index of the next readable byte","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":", the index of the next byte to write"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for sequential access:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"read<Type>(length: Int)","type":"codeVoice"},{"text":" to read ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes from the current ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" (and then advance the reader","type":"text"},{"text":" ","type":"text"},{"text":"index by ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"type":"text","text":" to write, advancing the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" by the appropriate amount"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"type":"codeListing","code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"syntax":null},{"text":"Layout","type":"heading","level":3,"anchor":"Layout"},{"type":"codeListing","code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"type":"codeVoice","code":"read<Type>"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"write<Type>"},{"type":"text","text":"). Getting "},{"type":"codeVoice","code":"writableBytes"},{"type":"text","text":" (bytes beyond the writer index) is undefined"},{"type":"text","text":" "},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"type":"text","text":" initialised)."}]},{"text":"Slicing","type":"heading","level":3,"anchor":"Slicing"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports slicing a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" without copying the underlying storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"],"syntax":null}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"],"title":"NIOCore Symbols"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","doc:\/\/com.opticalaberration.hummingbird\/s28CustomDebugStringConvertibleP","doc:\/\/com.opticalaberration.hummingbird\/s23CustomStringConvertibleP","doc:\/\/com.opticalaberration.hummingbird\/Se","doc:\/\/com.opticalaberration.hummingbird\/SE","doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/SH","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"],"title":"Conforms To","kind":"relationships"}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/capacity","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readableBytes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readerIndex","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/storageCapacity","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writableBytes","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writerIndex"],"title":"Instance Properties"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/discardReadBytes()","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/HBResponseGenerator-Implementations"],"title":"Default Implementations"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/capacity":{"title":"capacity","url":"\/documentation\/hummingbird\/bytebuffer\/capacity","type":"topic","abstract":[{"text":"The current capacity of the storage of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", this is not constant and does ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" signify the number","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of bytes that have been written to this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"capacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/capacity"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writerIndex":{"title":"writerIndex","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writerIndex","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/writerindex","abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/discardReadBytes()":{"title":"discardReadBytes()","url":"\/documentation\/hummingbird\/bytebuffer\/discardreadbytes()","type":"topic","abstract":[{"text":"Discard the bytes before the reader index. The byte at index ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" before calling this method will be","type":"text"},{"text":" ","type":"text"},{"text":"at index ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" after the call returns.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardReadBytes","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/discardReadBytes()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseGenerator":{"url":"\/documentation\/hummingbird\/hbresponsegenerator","role":"symbol","type":"topic","abstract":[{"text":"Object that can generate a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBResponseGenerator","kind":"identifier"}],"title":"HBResponseGenerator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseGenerator","kind":"symbol","navigatorTitle":[{"text":"HBResponseGenerator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/readableBytes":{"title":"readableBytes","url":"\/documentation\/hummingbird\/bytebuffer\/readablebytes","type":"topic","abstract":[{"text":"The number of bytes readable (","type":"text"},{"type":"codeVoice","code":"readableBytes"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"text":").","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readableBytes"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/readerIndex":{"title":"readerIndex","url":"\/documentation\/hummingbird\/bytebuffer\/readerindex","type":"topic","abstract":[{"text":"The reader index or the number of bytes previously read from this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/readerIndex"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear()":{"title":"clear()","url":"\/documentation\/hummingbird\/bytebuffer\/clear()","type":"topic","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/Se":{"title":"Swift.Decodable","type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/Se"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/hummingbird\/bytebufferallocator","title":"ByteBufferAllocator","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/getSlice(at:length:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/getslice(at:length:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)","role":"symbol","title":"getSlice(at:length:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","abstract":[{"text":"Returns a slice of size ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes, starting at ","type":"text"},{"type":"codeVoice","code":"index"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" this is invoked on and the","type":"text"},{"type":"text","text":" "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"code":"index","type":"codeVoice"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"will correspond to index ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" in the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" of the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will be ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" will be ","type":"text"},{"code":"length","type":"codeVoice"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}],"url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(minimumwritablebytes:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","title":"reserveCapacity(minimumWritableBytes:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(_:)":{"title":"reserveCapacity(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/storageCapacity":{"title":"storageCapacity","kind":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/storagecapacity","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storageCapacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/storageCapacity","abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}]},"doc://com.opticalaberration.hummingbird/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s23CustomStringConvertibleP","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"title":"withUnsafeMutableWritableBytes(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"capacity"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":"). Before reading those bytes you must first","type":"text"},{"text":" ","type":"text"},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablewritablebytes(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/writewithunsafemutablebytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"deprecated":true,"title":"writeWithUnsafeMutableBytes(_:)","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/SE":{"title":"Swift.Encodable","type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SE"},"doc://com.opticalaberration.hummingbird/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s28CustomDebugStringConvertibleP"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"title":"SocketAddress","navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"SocketAddress","kind":"identifier"}],"abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/socketaddress","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","title":"EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"url":"\/documentation\/hummingbird\/eventloopfuture"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","role":"symbol","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"type":"topic","abstract":[{"text":"This vends a pointer of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" at the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" after ensuring that the buffer has at least ","type":"text"},{"type":"codeVoice","code":"minimumWritableBytes"},{"text":" of writable bytes available.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/writableBytes":{"title":"writableBytes","url":"\/documentation\/hummingbird\/bytebuffer\/writablebytes","type":"topic","abstract":[{"text":"The number of bytes writable until ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will need to grow its underlying storage which will likely","type":"text"},{"text":" ","type":"text"},{"text":"trigger a copy of the bytes.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/writableBytes"},"doc://com.opticalaberration.hummingbird/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SH","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafemutablebytes(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","role":"symbol","title":"withVeryUnsafeMutableBytes(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". It’s marked as ","type":"text"},{"inlineContent":[{"text":"very unsafe","type":"text"}],"type":"emphasis"},{"text":" because it might contain","type":"text"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/HBResponseGenerator-Implementations":{"type":"topic","kind":"article","title":"HBResponseGenerator Implementations","url":"\/documentation\/hummingbird\/bytebuffer\/hbresponsegenerator-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/HBResponseGenerator-Implementations"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeBytes(_:)":{"title":"withVeryUnsafeBytes(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". It’s marked as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"text":" because it might contain","type":"text"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafebytes(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-12w71":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"clear(minimumCapacity:)","type":"topic","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-12w71","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-12w71","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-7qskn":{"url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn","role":"symbol","title":"clear(minimumCapacity:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"type":"topic","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","kind":"symbol","role":"symbol","type":"topic","title":"withVeryUnsafeBytesWithStorageManagement(_:)","abstract":[{"text":"See ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"text":".","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"title":"EventLoopGroup","url":"\/documentation\/hummingbird\/eventloopgroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","type":"topic","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}]},"doc://com.opticalaberration.hummingbird/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"title":"withUnsafeMutableReadableBytes(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablereadablebytes(_:)","type":"topic","abstract":[{"text":"Yields a mutable buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"’s readable bytes. You may modify those bytes.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoop"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"title":"EventLoop","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"title":"withUnsafeReadableBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"code":"Unmanaged","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytes(_:)":{"title":"withUnsafeReadableBytes(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"’s readable bytes."}],"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebytes(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"url":"\/documentation\/hummingbird\/timeamount","kind":"symbol","role":"symbol","title":"TimeAmount","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"type":"topic","abstract":[{"type":"text","text":"Represents a time "},{"inlineContent":[{"type":"text","text":"interval"}],"type":"emphasis"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"}}}