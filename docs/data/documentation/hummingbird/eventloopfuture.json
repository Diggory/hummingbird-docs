{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">","kind":"text"}]}]},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions that promise to do work asynchronously can return an "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The recipient of such an object can then observe it to be notified when the operation completes."}]},{"type":"paragraph","inlineContent":[{"text":"The provider of a ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" can create and return a placeholder object","type":"text"},{"text":" ","type":"text"},{"text":"before the actual result is available. For example:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["func getNetworkData(args) -> EventLoopFuture<NetworkResponse> {","    let promise = eventLoop.makePromise(of: NetworkResponse.self)","    queue.async {","        . . . do some work . . .","        promise.succeed(response)","        . . . if it fails, instead . . .","        promise.fail(error)","    }","    return promise.futureResult","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this function returns immediately; the promise object will be given a value"},{"type":"text","text":" "},{"type":"text","text":"later on. This behaviour is common to Future\/Promise implementations in many programming"},{"type":"text","text":" "},{"type":"text","text":"languages. If you are unfamiliar with this kind of object, the following resources may be"},{"type":"text","text":" "},{"type":"text","text":"helpful:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you receive a "},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"type":"text","text":" from another function, you have a number of options:"},{"type":"text","text":" "},{"type":"text","text":"The most common operation is to use "},{"code":"flatMap()","type":"codeVoice"},{"type":"text","text":" or "},{"code":"map()","type":"codeVoice"},{"type":"text","text":" to add a function that will be called"},{"type":"text","text":" "},{"type":"text","text":"with the eventual result.  Both methods returns a new "},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"type":"text","text":" immediately"},{"type":"text","text":" "},{"type":"text","text":"that will receive the return value from your function, but they behave differently. If you have"},{"type":"text","text":" "},{"type":"text","text":"a function that can return synchronously, the "},{"code":"map","type":"codeVoice"},{"type":"text","text":" function will transform the result of type"},{"type":"text","text":" "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" to a the new result of type "},{"code":"NewValue","type":"codeVoice"},{"type":"text","text":" and return an "},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":null,"type":"codeListing","code":["let networkData = getNetworkData(args)","","\/\/ When network data is received, convert it.","let processedResult: EventLoopFuture<Processed> = networkData.map { (n: NetworkResponse) -> Processed in","    ... parse network data ....","    return processedResult","}"]},{"type":"paragraph","inlineContent":[{"text":"If however you need to do more asynchronous processing, you can call ","type":"text"},{"code":"flatMap()","type":"codeVoice"},{"text":". The return value of the","type":"text"},{"text":" ","type":"text"},{"text":"function passed to ","type":"text"},{"code":"flatMap","type":"codeVoice"},{"text":" must be a new ","type":"text"},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"text":" object: the return value of ","type":"text"},{"code":"flatMap()","type":"codeVoice"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"text":"a new ","type":"text"},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"text":" that will contain the eventual result of both the original operation and","type":"text"},{"text":" ","type":"text"},{"text":"the subsequent one.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["\/\/ When converted network data is available, begin the database operation.","let databaseResult: EventLoopFuture<DBResult> = processedResult.flatMap { (p: Processed) -> EventLoopFuture<DBResult> in","    return someDatabaseOperation(p)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In essence, future chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" provide a form of data-driven asynchronous programming"},{"type":"text","text":" "},{"type":"text","text":"that allows you to dynamically declare data dependencies for your various operations."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" are sufficient for most purposes. All of the registered"},{"type":"text","text":" "},{"type":"text","text":"functions will eventually run in order. If one of those functions throws an error, that error will"},{"type":"text","text":" "},{"type":"text","text":"bypass the remaining functions. You can use "},{"type":"codeVoice","code":"flatMapError()"},{"type":"text","text":" to handle and optionally recover from"},{"type":"text","text":" "},{"type":"text","text":"errors in the middle of a chain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end of an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chain, you can use "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"whenFailure()"},{"type":"text","text":" to add an"},{"type":"text","text":" "},{"type":"text","text":"observer callback that will be invoked with the result or error at that point. (Note: If you ever"},{"type":"text","text":" "},{"type":"text","text":"find yourself invoking "},{"type":"codeVoice","code":"promise.succeed()"},{"type":"text","text":" from inside a "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" callback, you probably should"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"cascade(to:)"},{"type":"text","text":" instead.)"}]},{"type":"paragraph","inlineContent":[{"code":"EventLoopFuture","type":"codeVoice"},{"text":" objects are typically obtained by:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"code":".flatMap()","type":"codeVoice"},{"type":"text","text":" on an existing future to create a new future for the next step in a series of operations."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Initializing an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that already has a value or an error"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"anchor":"Threading-and-Futures","text":"Threading and Futures","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the major performance advantages of NIO over something like Node.js or Python’s asyncio is that NIO will"},{"type":"text","text":" "},{"type":"text","text":"by default run multiple event loops at once, on different threads. As most network protocols do not require"},{"type":"text","text":" "},{"type":"text","text":"blocking operation, at least in their low level implementations, this provides enormous speedups on machines"},{"type":"text","text":" "},{"type":"text","text":"with many cores such as most modern servers."}]},{"type":"paragraph","inlineContent":[{"text":"However, it can present a challenge at higher levels of abstraction when coordination between those threads","type":"text"},{"text":" ","type":"text"},{"text":"becomes necessary. This is usually the case whenever the events on one connection (that is, one ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":") depend","type":"text"},{"text":" ","type":"text"},{"text":"on events on another one. As these ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":"s may be scheduled on different event loops (and so different threads)","type":"text"},{"text":" ","type":"text"},{"text":"care needs to be taken to ensure that communication between the two loops is done in a thread-safe manner that","type":"text"},{"text":" ","type":"text"},{"text":"avoids concurrent mutation of shared state from multiple loops at once.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The main primitives NIO provides for this use are the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". As their names","type":"text"},{"text":" ","type":"text"},{"text":"suggest, these two objects are aware of event loops, and so can help manage the safety and correctness of your","type":"text"},{"text":" ","type":"text"},{"text":"programs. However, understanding the exact semantics of these objects is critical to ensuring the safety of your code.","type":"text"}]},{"level":4,"anchor":"Callbacks","text":"Callbacks","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The most important principle of the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" is this: all callbacks registered on","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will execute on the thread corresponding to the event loop that created the ","type":"text"},{"code":"Future","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"regardless"}],"type":"emphasis"},{"text":" of what thread succeeds or fails the corresponding ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that if ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"your code"}]},{"text":" created the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":", you can be extremely confident of what thread the","type":"text"},{"text":" ","type":"text"},{"text":"callback will execute on: after all, you held the event loop in hand when you created the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"However, if your code is handed an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":", and you want to register callbacks","type":"text"},{"text":" ","type":"text"},{"text":"on those objects, you cannot be confident that those callbacks will execute on the same ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" that your","type":"text"},{"text":" ","type":"text"},{"text":"code does.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This presents a problem: how do you ensure thread-safety when registering callbacks on an arbitrary","type":"text"},{"text":" ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":"? The short answer is that when you are holding an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":", you can always obtain a","type":"text"},{"text":" ","type":"text"},{"text":"new ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" whose callbacks will execute on your event loop. You do this by calling","type":"text"},{"text":" ","type":"text"},{"code":"EventLoopFuture.hop(to:)","type":"codeVoice"},{"text":". This function returns a new ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" whose callbacks are guaranteed","type":"text"},{"text":" ","type":"text"},{"text":"to fire on the provided event loop. As an added bonus, ","type":"text"},{"code":"hopTo","type":"codeVoice"},{"text":" will check whether the provided ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" ","type":"text"},{"text":"was already scheduled to dispatch on the event loop in question, and avoid doing any work if that was the case.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that for any ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that your code did not create itself (via","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise.futureResult"},{"text":"), use of ","type":"text"},{"type":"codeVoice","code":"hopTo"},{"text":" is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"strongly encouraged"}]},{"text":" to help guarantee thread-safety. It","type":"text"},{"text":" ","type":"text"},{"text":"should only be elided when thread-safety is provably not needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The “thread affinity” of ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":"s is critical to writing safe, performant concurrent code without","type":"text"},{"text":" ","type":"text"},{"text":"boilerplate. It allows you to avoid needing to write or use locks in your own code, instead using the natural","type":"text"},{"text":" ","type":"text"},{"text":"synchronization of the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" to manage your thread-safety. In general, if any of your ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":"s","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" callbacks need to invoke a lock (either directly or in the form of ","type":"text"},{"code":"DispatchQueue","type":"codeVoice"},{"text":") this","type":"text"},{"text":" ","type":"text"},{"text":"should be considered a code smell worth investigating: the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":"-based synchronization guarantees of","type":"text"},{"text":" ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" should be sufficient to guarantee thread-safety.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"],"kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop"]}],"sections":[],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"seeAlsoSections":[{"title":"NIOCore Symbols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"],"generated":true}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","interfaceLanguage":"swift"},"metadata":{"title":"EventLoopFuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"symbolKind":"class","modules":[{"name":"Hummingbird"}],"roleHeading":"Class","externalID":"s:7NIOCore15EventLoopFutureC"},"variants":[{"paths":["\/documentation\/hummingbird\/eventloopfuture"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture/eventLoop":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop","kind":"symbol","type":"topic","abstract":[{"text":"The ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" which is tied to the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" and is used to notify all registered callbacks.","type":"text"}],"title":"eventLoop","url":"\/documentation\/hummingbird\/eventloopfuture\/eventloop","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"}],"role":"symbol"},"http://docs.scala-lang.org/overviews/core/futures.html":{"titleInlineContent":[{"type":"text","text":"Scala"}],"type":"link","title":"Scala","url":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"type":"topic","title":"TimeAmount","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount","navigatorTitle":[{"text":"TimeAmount","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/timeamount","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeAmount","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Represents a time "},{"type":"emphasis","inlineContent":[{"text":"interval","type":"text"}]},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ"},"https://docs.google.com/document/d/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M/edit":{"titleInlineContent":[{"type":"text","text":"Python"}],"type":"link","title":"Python","url":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"kind":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","url":"\/documentation\/hummingbird\/eventloop","type":"topic","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","url":"\/documentation\/hummingbird\/bytebuffer","type":"topic","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}],"title":"SocketAddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}],"url":"\/documentation\/hummingbird\/socketaddress","abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises":{"titleInlineContent":[{"type":"text","text":"Javascript"}],"type":"link","title":"Javascript","url":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"url":"\/documentation\/hummingbird\/eventloopgroup","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol","title":"EventLoopGroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"type":"topic","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"role":"symbol","title":"EventLoopFuture","url":"\/documentation\/hummingbird\/eventloopfuture","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferAllocator","kind":"identifier"}],"navigatorTitle":[{"text":"ByteBufferAllocator","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","title":"ByteBufferAllocator","abstract":[{"type":"text","text":"The preferred allocator for "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbird\/bytebufferallocator"}}}