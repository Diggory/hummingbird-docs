{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"variants":[{"paths":["\/documentation\/hummingbird\/eventloopfuture"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}]}]},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"text":"Functions that promise to do work asynchronously can return an ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The recipient of such an object can then observe it to be notified when the operation completes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The provider of a "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" can create and return a placeholder object"},{"type":"text","text":" "},{"type":"text","text":"before the actual result is available. For example:"}],"type":"paragraph"},{"syntax":null,"code":["func getNetworkData(args) -> EventLoopFuture<NetworkResponse> {","    let promise = eventLoop.makePromise(of: NetworkResponse.self)","    queue.async {","        . . . do some work . . .","        promise.succeed(response)","        . . . if it fails, instead . . .","        promise.fail(error)","    }","    return promise.futureResult","}"],"type":"codeListing"},{"inlineContent":[{"text":"Note that this function returns immediately; the promise object will be given a value","type":"text"},{"text":" ","type":"text"},{"text":"later on. This behaviour is common to Future\/Promise implementations in many programming","type":"text"},{"text":" ","type":"text"},{"text":"languages. If you are unfamiliar with this kind of object, the following resources may be","type":"text"},{"text":" ","type":"text"},{"text":"helpful:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"If you receive a ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" from another function, you have a number of options:","type":"text"},{"text":" ","type":"text"},{"text":"The most common operation is to use ","type":"text"},{"code":"flatMap()","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"map()","type":"codeVoice"},{"text":" to add a function that will be called","type":"text"},{"text":" ","type":"text"},{"text":"with the eventual result.  Both methods returns a new ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" immediately","type":"text"},{"text":" ","type":"text"},{"text":"that will receive the return value from your function, but they behave differently. If you have","type":"text"},{"text":" ","type":"text"},{"text":"a function that can return synchronously, the ","type":"text"},{"code":"map","type":"codeVoice"},{"text":" function will transform the result of type","type":"text"},{"text":" ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" to a the new result of type ","type":"text"},{"code":"NewValue","type":"codeVoice"},{"text":" and return an ","type":"text"},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let networkData = getNetworkData(args)","","\/\/ When network data is received, convert it.","let processedResult: EventLoopFuture<Processed> = networkData.map { (n: NetworkResponse) -> Processed in","    ... parse network data ....","    return processedResult","}"],"type":"codeListing"},{"inlineContent":[{"text":"If however you need to do more asynchronous processing, you can call ","type":"text"},{"type":"codeVoice","code":"flatMap()"},{"text":". The return value of the","type":"text"},{"text":" ","type":"text"},{"text":"function passed to ","type":"text"},{"type":"codeVoice","code":"flatMap"},{"text":" must be a new ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"text":" object: the return value of ","type":"text"},{"type":"codeVoice","code":"flatMap()"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"text":"a new ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"text":" that will contain the eventual result of both the original operation and","type":"text"},{"text":" ","type":"text"},{"text":"the subsequent one.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["\/\/ When converted network data is available, begin the database operation.","let databaseResult: EventLoopFuture<DBResult> = processedResult.flatMap { (p: Processed) -> EventLoopFuture<DBResult> in","    return someDatabaseOperation(p)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In essence, future chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" provide a form of data-driven asynchronous programming"},{"type":"text","text":" "},{"type":"text","text":"that allows you to dynamically declare data dependencies for your various operations."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"text":" chains created via ","type":"text"},{"type":"codeVoice","code":"flatMap()"},{"text":" are sufficient for most purposes. All of the registered","type":"text"},{"text":" ","type":"text"},{"text":"functions will eventually run in order. If one of those functions throws an error, that error will","type":"text"},{"text":" ","type":"text"},{"text":"bypass the remaining functions. You can use ","type":"text"},{"type":"codeVoice","code":"flatMapError()"},{"text":" to handle and optionally recover from","type":"text"},{"text":" ","type":"text"},{"text":"errors in the middle of a chain.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"At the end of an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chain, you can use "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"whenFailure()"},{"type":"text","text":" to add an"},{"type":"text","text":" "},{"type":"text","text":"observer callback that will be invoked with the result or error at that point. (Note: If you ever"},{"type":"text","text":" "},{"type":"text","text":"find yourself invoking "},{"type":"codeVoice","code":"promise.succeed()"},{"type":"text","text":" from inside a "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" callback, you probably should"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"cascade(to:)"},{"type":"text","text":" instead.)"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" objects are typically obtained by:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":".flatMap()"},{"type":"text","text":" on an existing future to create a new future for the next step in a series of operations."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Initializing an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that already has a value or an error","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Threading-and-Futures","type":"heading","text":"Threading and Futures","level":3},{"inlineContent":[{"text":"One of the major performance advantages of NIO over something like Node.js or Python’s asyncio is that NIO will","type":"text"},{"text":" ","type":"text"},{"text":"by default run multiple event loops at once, on different threads. As most network protocols do not require","type":"text"},{"text":" ","type":"text"},{"text":"blocking operation, at least in their low level implementations, this provides enormous speedups on machines","type":"text"},{"text":" ","type":"text"},{"text":"with many cores such as most modern servers.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"However, it can present a challenge at higher levels of abstraction when coordination between those threads","type":"text"},{"text":" ","type":"text"},{"text":"becomes necessary. This is usually the case whenever the events on one connection (that is, one ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":") depend","type":"text"},{"text":" ","type":"text"},{"text":"on events on another one. As these ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":"s may be scheduled on different event loops (and so different threads)","type":"text"},{"text":" ","type":"text"},{"text":"care needs to be taken to ensure that communication between the two loops is done in a thread-safe manner that","type":"text"},{"text":" ","type":"text"},{"text":"avoids concurrent mutation of shared state from multiple loops at once.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The main primitives NIO provides for this use are the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". As their names","type":"text"},{"text":" ","type":"text"},{"text":"suggest, these two objects are aware of event loops, and so can help manage the safety and correctness of your","type":"text"},{"text":" ","type":"text"},{"text":"programs. However, understanding the exact semantics of these objects is critical to ensuring the safety of your code.","type":"text"}],"type":"paragraph"},{"anchor":"Callbacks","type":"heading","text":"Callbacks","level":4},{"inlineContent":[{"text":"The most important principle of the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" is this: all callbacks registered on","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will execute on the thread corresponding to the event loop that created the ","type":"text"},{"code":"Future","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"regardless","type":"text"}],"type":"emphasis"},{"text":" of what thread succeeds or fails the corresponding ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that if "},{"inlineContent":[{"type":"text","text":"your code"}],"type":"emphasis"},{"type":"text","text":" created the "},{"code":"EventLoopPromise","type":"codeVoice"},{"type":"text","text":", you can be extremely confident of what thread the"},{"type":"text","text":" "},{"type":"text","text":"callback will execute on: after all, you held the event loop in hand when you created the "},{"code":"EventLoopPromise","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, if your code is handed an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" or "},{"code":"EventLoopPromise","type":"codeVoice"},{"type":"text","text":", and you want to register callbacks"},{"type":"text","text":" "},{"type":"text","text":"on those objects, you cannot be confident that those callbacks will execute on the same "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" that your"},{"type":"text","text":" "},{"type":"text","text":"code does."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This presents a problem: how do you ensure thread-safety when registering callbacks on an arbitrary"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"? The short answer is that when you are holding an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":", you can always obtain a"},{"type":"text","text":" "},{"type":"text","text":"new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" whose callbacks will execute on your event loop. You do this by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture.hop(to:)"},{"type":"text","text":". This function returns a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" whose callbacks are guaranteed"},{"type":"text","text":" "},{"type":"text","text":"to fire on the provided event loop. As an added bonus, "},{"type":"codeVoice","code":"hopTo"},{"type":"text","text":" will check whether the provided "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" "},{"type":"text","text":"was already scheduled to dispatch on the event loop in question, and avoid doing any work if that was the case."}],"type":"paragraph"},{"inlineContent":[{"text":"This means that for any ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that your code did not create itself (via","type":"text"},{"text":" ","type":"text"},{"code":"EventLoopPromise.futureResult","type":"codeVoice"},{"text":"), use of ","type":"text"},{"code":"hopTo","type":"codeVoice"},{"text":" is ","type":"text"},{"inlineContent":[{"type":"text","text":"strongly encouraged"}],"type":"strong"},{"text":" to help guarantee thread-safety. It","type":"text"},{"text":" ","type":"text"},{"text":"should only be elided when thread-safety is provably not needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The “thread affinity” of "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"s is critical to writing safe, performant concurrent code without"},{"type":"text","text":" "},{"type":"text","text":"boilerplate. It allows you to avoid needing to write or use locks in your own code, instead using the natural"},{"type":"text","text":" "},{"type":"text","text":"synchronization of the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" to manage your thread-safety. In general, if any of your "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" callbacks need to invoke a lock (either directly or in the form of "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":") this"},{"type":"text","text":" "},{"type":"text","text":"should be considered a code smell worth investigating: the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"-based synchronization guarantees of"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" should be sufficient to guarantee thread-safety."}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop"],"title":"Instance Properties"}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"metadata":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"role":"symbol","symbolKind":"class","roleHeading":"Class","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"modules":[{"name":"Hummingbird"}],"title":"EventLoopFuture","externalID":"s:7NIOCore15EventLoopFutureC"},"relationshipsSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"],"generated":true,"title":"NIOCore Symbols"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture"},"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"title":"EventLoop","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"role":"symbol","url":"\/documentation\/hummingbird\/eventloop","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","kind":"symbol","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoop"}]},"https://docs.google.com/document/d/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M/edit":{"titleInlineContent":[{"text":"Python","type":"text"}],"identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","type":"link","url":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","title":"Python"},"doc://com.opticalaberration.hummingbird/s8SendableP":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"http://docs.scala-lang.org/overviews/core/futures.html":{"titleInlineContent":[{"text":"Scala","type":"text"}],"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","type":"link","url":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","title":"Scala"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture/eventLoop":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" which is tied to the ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" and is used to notify all registered callbacks.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop","type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/eventloopfuture\/eventloop","title":"eventLoop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"kind":"symbol","title":"TimeAmount","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount","url":"\/documentation\/hummingbird\/timeamount","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Represents a time "},{"type":"emphasis","inlineContent":[{"type":"text","text":"interval"}]},{"type":"text","text":"."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeAmount","kind":"identifier"}],"navigatorTitle":[{"text":"TimeAmount","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"url":"\/documentation\/hummingbird\/eventloopfuture","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","title":"EventLoopFuture","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","url":"\/documentation\/hummingbird\/bytebufferallocator","kind":"symbol","role":"symbol","title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"realloc"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"free"},{"text":".","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/SQ":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}],"title":"SocketAddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketAddress","kind":"identifier"}],"url":"\/documentation\/hummingbird\/socketaddress","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic","url":"\/documentation\/hummingbird\/eventloopgroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","title":"EventLoopGroup","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EventLoopGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"title":"ByteBuffer","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"url":"\/documentation\/hummingbird\/bytebuffer","kind":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}]},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises":{"titleInlineContent":[{"text":"Javascript","type":"text"}],"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","type":"link","url":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","title":"Javascript"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"}}}