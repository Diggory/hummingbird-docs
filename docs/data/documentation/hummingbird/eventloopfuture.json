{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture"},"variants":[{"paths":["\/documentation\/hummingbird\/eventloopfuture"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"kind":"symbol","seeAlsoSections":[{"title":"NIOCore Symbols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"],"generated":true}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"],"kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions that promise to do work asynchronously can return an "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The recipient of such an object can then observe it to be notified when the operation completes."}]},{"type":"paragraph","inlineContent":[{"text":"The provider of a ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"text":" can create and return a placeholder object","type":"text"},{"text":" ","type":"text"},{"text":"before the actual result is available. For example:","type":"text"}]},{"code":["func getNetworkData(args) -> EventLoopFuture<NetworkResponse> {","    let promise = eventLoop.makePromise(of: NetworkResponse.self)","    queue.async {","        . . . do some work . . .","        promise.succeed(response)","        . . . if it fails, instead . . .","        promise.fail(error)","    }","    return promise.futureResult","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this function returns immediately; the promise object will be given a value"},{"type":"text","text":" "},{"type":"text","text":"later on. This behaviour is common to Future\/Promise implementations in many programming"},{"type":"text","text":" "},{"type":"text","text":"languages. If you are unfamiliar with this kind of object, the following resources may be"},{"type":"text","text":" "},{"type":"text","text":"helpful:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","isActive":true}]}]}]},{"type":"paragraph","inlineContent":[{"text":"If you receive a ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" from another function, you have a number of options:","type":"text"},{"text":" ","type":"text"},{"text":"The most common operation is to use ","type":"text"},{"code":"flatMap()","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"map()","type":"codeVoice"},{"text":" to add a function that will be called","type":"text"},{"text":" ","type":"text"},{"text":"with the eventual result.  Both methods returns a new ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" immediately","type":"text"},{"text":" ","type":"text"},{"text":"that will receive the return value from your function, but they behave differently. If you have","type":"text"},{"text":" ","type":"text"},{"text":"a function that can return synchronously, the ","type":"text"},{"code":"map","type":"codeVoice"},{"text":" function will transform the result of type","type":"text"},{"text":" ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" to a the new result of type ","type":"text"},{"code":"NewValue","type":"codeVoice"},{"text":" and return an ","type":"text"},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["let networkData = getNetworkData(args)","","\/\/ When network data is received, convert it.","let processedResult: EventLoopFuture<Processed> = networkData.map { (n: NetworkResponse) -> Processed in","    ... parse network data ....","    return processedResult","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If however you need to do more asynchronous processing, you can call "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":". The return value of the"},{"type":"text","text":" "},{"type":"text","text":"function passed to "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":" must be a new "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":" object: the return value of "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":" that will contain the eventual result of both the original operation and"},{"type":"text","text":" "},{"type":"text","text":"the subsequent one."}]},{"code":["\/\/ When converted network data is available, begin the database operation.","let databaseResult: EventLoopFuture<DBResult> = processedResult.flatMap { (p: Processed) -> EventLoopFuture<DBResult> in","    return someDatabaseOperation(p)","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In essence, future chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" provide a form of data-driven asynchronous programming"},{"type":"text","text":" "},{"type":"text","text":"that allows you to dynamically declare data dependencies for your various operations."}]},{"type":"paragraph","inlineContent":[{"code":"EventLoopFuture","type":"codeVoice"},{"text":" chains created via ","type":"text"},{"code":"flatMap()","type":"codeVoice"},{"text":" are sufficient for most purposes. All of the registered","type":"text"},{"text":" ","type":"text"},{"text":"functions will eventually run in order. If one of those functions throws an error, that error will","type":"text"},{"text":" ","type":"text"},{"text":"bypass the remaining functions. You can use ","type":"text"},{"code":"flatMapError()","type":"codeVoice"},{"text":" to handle and optionally recover from","type":"text"},{"text":" ","type":"text"},{"text":"errors in the middle of a chain.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end of an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chain, you can use "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"whenFailure()"},{"type":"text","text":" to add an"},{"type":"text","text":" "},{"type":"text","text":"observer callback that will be invoked with the result or error at that point. (Note: If you ever"},{"type":"text","text":" "},{"type":"text","text":"find yourself invoking "},{"type":"codeVoice","code":"promise.succeed()"},{"type":"text","text":" from inside a "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" callback, you probably should"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"cascade(to:)"},{"type":"text","text":" instead.)"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" objects are typically obtained by:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"code":".flatMap()","type":"codeVoice"},{"text":" on an existing future to create a new future for the next step in a series of operations.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Initializing an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" that already has a value or an error","type":"text"}]}]}]},{"level":3,"text":"Threading and Futures","type":"heading","anchor":"Threading-and-Futures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the major performance advantages of NIO over something like Node.js or Python’s asyncio is that NIO will"},{"type":"text","text":" "},{"type":"text","text":"by default run multiple event loops at once, on different threads. As most network protocols do not require"},{"type":"text","text":" "},{"type":"text","text":"blocking operation, at least in their low level implementations, this provides enormous speedups on machines"},{"type":"text","text":" "},{"type":"text","text":"with many cores such as most modern servers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it can present a challenge at higher levels of abstraction when coordination between those threads"},{"type":"text","text":" "},{"type":"text","text":"becomes necessary. This is usually the case whenever the events on one connection (that is, one "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":") depend"},{"type":"text","text":" "},{"type":"text","text":"on events on another one. As these "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s may be scheduled on different event loops (and so different threads)"},{"type":"text","text":" "},{"type":"text","text":"care needs to be taken to ensure that communication between the two loops is done in a thread-safe manner that"},{"type":"text","text":" "},{"type":"text","text":"avoids concurrent mutation of shared state from multiple loops at once."}]},{"type":"paragraph","inlineContent":[{"text":"The main primitives NIO provides for this use are the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". As their names","type":"text"},{"text":" ","type":"text"},{"text":"suggest, these two objects are aware of event loops, and so can help manage the safety and correctness of your","type":"text"},{"text":" ","type":"text"},{"text":"programs. However, understanding the exact semantics of these objects is critical to ensuring the safety of your code.","type":"text"}]},{"level":4,"text":"Callbacks","type":"heading","anchor":"Callbacks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most important principle of the "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" and "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" is this: all callbacks registered on"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will execute on the thread corresponding to the event loop that created the "},{"type":"codeVoice","code":"Future"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"regardless","type":"text"}]},{"type":"text","text":" of what thread succeeds or fails the corresponding "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"This means that if ","type":"text"},{"inlineContent":[{"type":"text","text":"your code"}],"type":"emphasis"},{"text":" created the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":", you can be extremely confident of what thread the","type":"text"},{"text":" ","type":"text"},{"text":"callback will execute on: after all, you held the event loop in hand when you created the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"However, if your code is handed an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":", and you want to register callbacks","type":"text"},{"text":" ","type":"text"},{"text":"on those objects, you cannot be confident that those callbacks will execute on the same ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" that your","type":"text"},{"text":" ","type":"text"},{"text":"code does.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This presents a problem: how do you ensure thread-safety when registering callbacks on an arbitrary"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"? The short answer is that when you are holding an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":", you can always obtain a"},{"type":"text","text":" "},{"type":"text","text":"new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" whose callbacks will execute on your event loop. You do this by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture.hop(to:)"},{"type":"text","text":". This function returns a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" whose callbacks are guaranteed"},{"type":"text","text":" "},{"type":"text","text":"to fire on the provided event loop. As an added bonus, "},{"type":"codeVoice","code":"hopTo"},{"type":"text","text":" will check whether the provided "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" "},{"type":"text","text":"was already scheduled to dispatch on the event loop in question, and avoid doing any work if that was the case."}]},{"type":"paragraph","inlineContent":[{"text":"This means that for any ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that your code did not create itself (via","type":"text"},{"text":" ","type":"text"},{"code":"EventLoopPromise.futureResult","type":"codeVoice"},{"text":"), use of ","type":"text"},{"code":"hopTo","type":"codeVoice"},{"text":" is ","type":"text"},{"inlineContent":[{"type":"text","text":"strongly encouraged"}],"type":"strong"},{"text":" to help guarantee thread-safety. It","type":"text"},{"text":" ","type":"text"},{"text":"should only be elided when thread-safety is provably not needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The “thread affinity” of "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"s is critical to writing safe, performant concurrent code without"},{"type":"text","text":" "},{"type":"text","text":"boilerplate. It allows you to avoid needing to write or use locks in your own code, instead using the natural"},{"type":"text","text":" "},{"type":"text","text":"synchronization of the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" to manage your thread-safety. In general, if any of your "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" callbacks need to invoke a lock (either directly or in the form of "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":") this"},{"type":"text","text":" "},{"type":"text","text":"should be considered a code smell worth investigating: the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"-based synchronization guarantees of"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" should be sufficient to guarantee thread-safety."}]}],"kind":"content"}],"metadata":{"title":"EventLoopFuture","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"modules":[{"name":"Hummingbird"}],"externalID":"s:7NIOCore15EventLoopFutureC","roleHeading":"Class","symbolKind":"class"},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop"]}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount","abstract":[{"text":"Represents a time ","type":"text"},{"inlineContent":[{"type":"text","text":"interval"}],"type":"emphasis"},{"text":".","type":"text"}],"role":"symbol","title":"TimeAmount","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeAmount","kind":"identifier"}],"url":"\/documentation\/hummingbird\/timeamount"},"https://docs.google.com/document/d/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M/edit":{"identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","type":"link","titleInlineContent":[{"text":"Python","type":"text"}],"url":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","title":"Python"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"title":"ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","url":"\/documentation\/hummingbird\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture/eventLoop":{"kind":"symbol","url":"\/documentation\/hummingbird\/eventloopfuture\/eventloop","role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"}],"type":"topic","abstract":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" which is tied to the "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" and is used to notify all registered callbacks."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop","title":"eventLoop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"title":"ByteBufferAllocator","url":"\/documentation\/hummingbird\/bytebufferallocator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"url":"\/documentation\/hummingbird\/eventloopgroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","title":"EventLoopGroup","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","kind":"symbol","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","title":"EventLoop","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"url":"\/documentation\/hummingbird\/socketaddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}],"navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}],"title":"SocketAddress","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/s8SendableP":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises":{"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","type":"link","titleInlineContent":[{"text":"Javascript","type":"text"}],"url":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","title":"Javascript"},"http://docs.scala-lang.org/overviews/core/futures.html":{"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","type":"link","titleInlineContent":[{"text":"Scala","type":"text"}],"url":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","title":"Scala"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"url":"\/documentation\/hummingbird\/eventloopfuture","role":"symbol"},"doc://com.opticalaberration.hummingbird/SQ":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ","type":"unresolvable","title":"Swift.Equatable"}}}