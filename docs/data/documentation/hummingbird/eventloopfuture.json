{"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/SQ","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/eventloopfuture"]}],"metadata":{"role":"symbol","title":"EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"roleHeading":"Class","modules":[{"name":"Hummingbird"}],"externalID":"s:7NIOCore15EventLoopFutureC","symbolKind":"class"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"topicSections":[{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Functions that promise to do work asynchronously can return an ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The recipient of such an object can then observe it to be notified when the operation completes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The provider of a ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" can create and return a placeholder object","type":"text"},{"text":" ","type":"text"},{"text":"before the actual result is available. For example:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["func getNetworkData(args) -> EventLoopFuture<NetworkResponse> {","    let promise = eventLoop.makePromise(of: NetworkResponse.self)","    queue.async {","        . . . do some work . . .","        promise.succeed(response)","        . . . if it fails, instead . . .","        promise.fail(error)","    }","    return promise.futureResult","}"]},{"type":"paragraph","inlineContent":[{"text":"Note that this function returns immediately; the promise object will be given a value","type":"text"},{"text":" ","type":"text"},{"text":"later on. This behaviour is common to Future\/Promise implementations in many programming","type":"text"},{"text":" ","type":"text"},{"text":"languages. If you are unfamiliar with this kind of object, the following resources may be","type":"text"},{"text":" ","type":"text"},{"text":"helpful:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you receive a "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" from another function, you have a number of options:"},{"type":"text","text":" "},{"type":"text","text":"The most common operation is to use "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"map()"},{"type":"text","text":" to add a function that will be called"},{"type":"text","text":" "},{"type":"text","text":"with the eventual result.  Both methods returns a new "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" immediately"},{"type":"text","text":" "},{"type":"text","text":"that will receive the return value from your function, but they behave differently. If you have"},{"type":"text","text":" "},{"type":"text","text":"a function that can return synchronously, the "},{"type":"codeVoice","code":"map"},{"type":"text","text":" function will transform the result of type"},{"type":"text","text":" "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" to a the new result of type "},{"type":"codeVoice","code":"NewValue"},{"type":"text","text":" and return an "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["let networkData = getNetworkData(args)","","\/\/ When network data is received, convert it.","let processedResult: EventLoopFuture<Processed> = networkData.map { (n: NetworkResponse) -> Processed in","    ... parse network data ....","    return processedResult","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If however you need to do more asynchronous processing, you can call "},{"code":"flatMap()","type":"codeVoice"},{"type":"text","text":". The return value of the"},{"type":"text","text":" "},{"type":"text","text":"function passed to "},{"code":"flatMap","type":"codeVoice"},{"type":"text","text":" must be a new "},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"type":"text","text":" object: the return value of "},{"code":"flatMap()","type":"codeVoice"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"type":"text","text":" that will contain the eventual result of both the original operation and"},{"type":"text","text":" "},{"type":"text","text":"the subsequent one."}]},{"type":"codeListing","syntax":null,"code":["\/\/ When converted network data is available, begin the database operation.","let databaseResult: EventLoopFuture<DBResult> = processedResult.flatMap { (p: Processed) -> EventLoopFuture<DBResult> in","    return someDatabaseOperation(p)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In essence, future chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" provide a form of data-driven asynchronous programming"},{"type":"text","text":" "},{"type":"text","text":"that allows you to dynamically declare data dependencies for your various operations."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" are sufficient for most purposes. All of the registered"},{"type":"text","text":" "},{"type":"text","text":"functions will eventually run in order. If one of those functions throws an error, that error will"},{"type":"text","text":" "},{"type":"text","text":"bypass the remaining functions. You can use "},{"type":"codeVoice","code":"flatMapError()"},{"type":"text","text":" to handle and optionally recover from"},{"type":"text","text":" "},{"type":"text","text":"errors in the middle of a chain."}]},{"type":"paragraph","inlineContent":[{"text":"At the end of an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" chain, you can use ","type":"text"},{"type":"codeVoice","code":"whenSuccess()"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"whenFailure()"},{"text":" to add an","type":"text"},{"text":" ","type":"text"},{"text":"observer callback that will be invoked with the result or error at that point. (Note: If you ever","type":"text"},{"text":" ","type":"text"},{"text":"find yourself invoking ","type":"text"},{"type":"codeVoice","code":"promise.succeed()"},{"text":" from inside a ","type":"text"},{"type":"codeVoice","code":"whenSuccess()"},{"text":" callback, you probably should","type":"text"},{"text":" ","type":"text"},{"text":"use ","type":"text"},{"type":"codeVoice","code":"flatMap()"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"cascade(to:)"},{"text":" instead.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" objects are typically obtained by:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":".flatMap()"},{"type":"text","text":" on an existing future to create a new future for the next step in a series of operations."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Initializing an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that already has a value or an error","type":"text"}]}]}]},{"type":"heading","level":3,"anchor":"Threading-and-Futures","text":"Threading and Futures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the major performance advantages of NIO over something like Node.js or Python’s asyncio is that NIO will"},{"type":"text","text":" "},{"type":"text","text":"by default run multiple event loops at once, on different threads. As most network protocols do not require"},{"type":"text","text":" "},{"type":"text","text":"blocking operation, at least in their low level implementations, this provides enormous speedups on machines"},{"type":"text","text":" "},{"type":"text","text":"with many cores such as most modern servers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it can present a challenge at higher levels of abstraction when coordination between those threads"},{"type":"text","text":" "},{"type":"text","text":"becomes necessary. This is usually the case whenever the events on one connection (that is, one "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":") depend"},{"type":"text","text":" "},{"type":"text","text":"on events on another one. As these "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s may be scheduled on different event loops (and so different threads)"},{"type":"text","text":" "},{"type":"text","text":"care needs to be taken to ensure that communication between the two loops is done in a thread-safe manner that"},{"type":"text","text":" "},{"type":"text","text":"avoids concurrent mutation of shared state from multiple loops at once."}]},{"type":"paragraph","inlineContent":[{"text":"The main primitives NIO provides for this use are the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". As their names","type":"text"},{"text":" ","type":"text"},{"text":"suggest, these two objects are aware of event loops, and so can help manage the safety and correctness of your","type":"text"},{"text":" ","type":"text"},{"text":"programs. However, understanding the exact semantics of these objects is critical to ensuring the safety of your code.","type":"text"}]},{"type":"heading","level":4,"anchor":"Callbacks","text":"Callbacks"},{"type":"paragraph","inlineContent":[{"text":"The most important principle of the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" is this: all callbacks registered on","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" will execute on the thread corresponding to the event loop that created the ","type":"text"},{"type":"codeVoice","code":"Future"},{"text":",","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"regardless","type":"text"}],"type":"emphasis"},{"text":" of what thread succeeds or fails the corresponding ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that if ","type":"text"},{"inlineContent":[{"type":"text","text":"your code"}],"type":"emphasis"},{"text":" created the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":", you can be extremely confident of what thread the","type":"text"},{"text":" ","type":"text"},{"text":"callback will execute on: after all, you held the event loop in hand when you created the ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"However, if your code is handed an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"EventLoopPromise"},{"text":", and you want to register callbacks","type":"text"},{"text":" ","type":"text"},{"text":"on those objects, you cannot be confident that those callbacks will execute on the same ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" that your","type":"text"},{"text":" ","type":"text"},{"text":"code does.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This presents a problem: how do you ensure thread-safety when registering callbacks on an arbitrary","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":"? The short answer is that when you are holding an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":", you can always obtain a","type":"text"},{"text":" ","type":"text"},{"text":"new ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" whose callbacks will execute on your event loop. You do this by calling","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture.hop(to:)"},{"text":". This function returns a new ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" whose callbacks are guaranteed","type":"text"},{"text":" ","type":"text"},{"text":"to fire on the provided event loop. As an added bonus, ","type":"text"},{"type":"codeVoice","code":"hopTo"},{"text":" will check whether the provided ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" ","type":"text"},{"text":"was already scheduled to dispatch on the event loop in question, and avoid doing any work if that was the case.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that for any ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" that your code did not create itself (via","type":"text"},{"text":" ","type":"text"},{"code":"EventLoopPromise.futureResult","type":"codeVoice"},{"text":"), use of ","type":"text"},{"code":"hopTo","type":"codeVoice"},{"text":" is ","type":"text"},{"inlineContent":[{"text":"strongly encouraged","type":"text"}],"type":"strong"},{"text":" to help guarantee thread-safety. It","type":"text"},{"text":" ","type":"text"},{"text":"should only be elided when thread-safety is provably not needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The “thread affinity” of ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":"s is critical to writing safe, performant concurrent code without","type":"text"},{"text":" ","type":"text"},{"text":"boilerplate. It allows you to avoid needing to write or use locks in your own code, instead using the natural","type":"text"},{"text":" ","type":"text"},{"text":"synchronization of the ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" to manage your thread-safety. In general, if any of your ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" callbacks need to invoke a lock (either directly or in the form of ","type":"text"},{"type":"codeVoice","code":"DispatchQueue"},{"text":") this","type":"text"},{"text":" ","type":"text"},{"text":"should be considered a code smell worth investigating: the ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":"-based synchronization guarantees of","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" should be sufficient to guarantee thread-safety.","type":"text"}]}]}],"seeAlsoSections":[{"generated":true,"title":"NIOCore Symbols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"title":"SocketAddress","navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"SocketAddress","kind":"identifier"}],"abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/socketaddress","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TimeAmount":{"url":"\/documentation\/hummingbird\/timeamount","kind":"symbol","role":"symbol","title":"TimeAmount","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"type":"topic","abstract":[{"type":"text","text":"Represents a time "},{"inlineContent":[{"type":"text","text":"interval"}],"type":"emphasis"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TimeAmount"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopGroup":{"title":"EventLoopGroup","url":"\/documentation\/hummingbird\/eventloopgroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopGroup","type":"topic","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}]},"https://docs.google.com/document/d/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M/edit":{"type":"link","identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","title":"Python","url":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","titleInlineContent":[{"type":"text","text":"Python"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoop"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"title":"EventLoop","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBufferAllocator":{"abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBufferAllocator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/hummingbird\/bytebufferallocator","title":"ByteBufferAllocator","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","title":"EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"url":"\/documentation\/hummingbird\/eventloopfuture"},"doc://com.opticalaberration.hummingbird/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","title":"Swift.Sendable"},"doc://com.opticalaberration.hummingbird/SQ":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/SQ","type":"unresolvable","title":"Swift.Equatable"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises":{"type":"link","identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","title":"Javascript","url":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","titleInlineContent":[{"type":"text","text":"Javascript"}]},"http://docs.scala-lang.org/overviews/core/futures.html":{"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","titleInlineContent":[{"type":"text","text":"Scala"}],"type":"link","url":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","title":"Scala"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture/eventLoop":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture\/eventLoop","abstract":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" which is tied to the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" and is used to notify all registered callbacks."}],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"}],"title":"eventLoop","url":"\/documentation\/hummingbird\/eventloopfuture\/eventloop","kind":"symbol","role":"symbol"}}}