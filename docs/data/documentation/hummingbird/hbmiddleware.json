{"seeAlsoSections":[{"title":"Middleware","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddleware"}],"title":"HBMiddleware","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:11Hummingbird12HBMiddlewareP","modules":[{"name":"HummingbirdAuth"}],"navigatorTitle":[{"kind":"identifier","text":"HBMiddleware"}]},"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddleware","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncSessionAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBSessionAuthenticator"],"kind":"relationships","title":"Inherited By","type":"inheritedBy"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBFileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddleware\/apply(to:next:)"]}],"variants":[{"paths":["\/documentation\/hummingbird\/hbmiddleware"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddleware"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Middleware can be used to edit requests before they are forwared to the router, edit the responses returned by the route handlers or even shortcut the router and return their own responses. Middleware is added to the application as follows."}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.middleware.add(MyMiddlware())"]},{"anchor":"Groups","level":3,"type":"heading","text":"Groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Middleware can also be applied to a specific set of routes using groups. Below is a example of applying an authentication middleware "},{"type":"codeVoice","code":"BasicAuthenticatorMiddleware"},{"type":"text","text":" to routes that need protected."}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.router.put(\"\/user\", createUser)","app.router.group()","    .add(middleware: BasicAuthenticatorMiddleware())","    .post(\"\/user\", loginUser)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first route that calls "},{"type":"codeVoice","code":"createUser"},{"type":"text","text":" does not have the "},{"type":"codeVoice","code":"BasicAuthenticatorMiddleware"},{"type":"text","text":" applied to it. But the route calling "},{"type":"codeVoice","code":"loginUser"},{"type":"text","text":" which is inside the group does have the middleware applied."}]},{"anchor":"Writing-Middleware","level":3,"type":"heading","text":"Writing Middleware"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All middleware has to conform to the protocol "},{"type":"codeVoice","code":"HBMiddleware"},{"type":"text","text":". This requires one function "},{"type":"codeVoice","code":"apply(to:next)"},{"type":"text","text":" to be implemented. At some point in this function unless you want to shortcut the router and return your own response you are required to call "},{"type":"codeVoice","code":"next.respond(to: request)"},{"type":"text","text":" and return the result, or a result processed by your middleware. The following is a simple logging middleware that outputs every URI being sent to the server"}]},{"type":"codeListing","syntax":"swift","code":["public struct LogRequestsMiddleware: HBMiddleware {","    public func apply(to request: HBRequest, next: HBResponder) -> EventLoopFuture<HBResponse> {","        \/\/ log request URI","        request.logger.log(level: .debug, String(describing:request.uri.path))","        \/\/ pass request onto next middleware or the router","        return next.respond(to: request)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to process the response after it has been returned by the route handler you will need to use run a function on the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" returned by "},{"type":"codeVoice","code":"next.respond"},{"type":"text","text":". Swift NIO provide documentation "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/apple.github.io\/swift-nio\/docs\/current\/NIO\/Classes\/EventLoopFuture.html"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public struct ResponseProcessingMiddleware: HBMiddleware {","    public func apply(to request: HBRequest, next: HBResponder) -> EventLoopFuture<HBResponse> {","        return next.respond(to: request).map { response in","            \/\/ process responses from handler and middleware further down the chain","            return processResponse(response)","        }","        .flatMapError { error in","            \/\/ if an error is thrown by handler or middleware further down the ","            \/\/ chain process that","            return processError(error)","        }","    }","}"]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBLogRequestsMiddleware":{"role":"symbol","title":"HBLogRequestsMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"abstract":[{"type":"text","text":"Middleware outputting to log for every call to server"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBLogRequestsMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBLogRequestsMiddleware"}],"url":"\/documentation\/hummingbird\/hblogrequestsmiddleware"},"https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html":{"title":"here","titleInlineContent":[{"type":"text","text":"here"}],"type":"link","identifier":"https:\/\/apple.github.io\/swift-nio\/docs\/current\/NIO\/Classes\/EventLoopFuture.html","url":"https:\/\/apple.github.io\/swift-nio\/docs\/current\/NIO\/Classes\/EventLoopFuture.html"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddleware/apply(to:next:)":{"defaultImplementations":3,"role":"symbol","title":"apply(to:next:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBRequest","preciseIdentifier":"s:11Hummingbird9HBRequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"next"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBResponder","preciseIdentifier":"s:11Hummingbird11HBResponderP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"HBResponse","preciseIdentifier":"s:11Hummingbird10HBResponseV"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddleware\/apply(to:next:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/hummingbird\/hbmiddleware\/apply(to:next:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAsyncAuthenticator":{"role":"symbol","title":"HBAsyncAuthenticator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncAuthenticator"}],"abstract":[{"type":"text","text":"Async version of Middleware to check if a request is authenticated and then augment the request with"},{"type":"text","text":" "},{"type":"text","text":"authentication data."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncAuthenticator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncAuthenticator"}],"url":"\/documentation\/hummingbirdauth\/hbasyncauthenticator"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAuthenticator":{"role":"symbol","title":"HBAuthenticator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAuthenticator"}],"abstract":[{"type":"text","text":"Middleware to check if a request is authenticated and then augment the request with"},{"type":"text","text":" "},{"type":"text","text":"authentication data."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAuthenticator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAuthenticator"}],"url":"\/documentation\/hummingbirdauth\/hbauthenticator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMetricsMiddleware":{"role":"symbol","title":"HBMetricsMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMetricsMiddleware"}],"abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMetricsMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBMetricsMiddleware"}],"url":"\/documentation\/hummingbird\/hbmetricsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBAsyncSessionAuthenticator":{"role":"symbol","title":"HBAsyncSessionAuthenticator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncSessionAuthenticator"}],"abstract":[{"type":"text","text":"Async version of session authenticator."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBAsyncSessionAuthenticator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncSessionAuthenticator"}],"url":"\/documentation\/hummingbirdauth\/hbasyncsessionauthenticator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBTracingMiddleware":{"role":"symbol","title":"HBTracingMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBTracingMiddleware"}],"abstract":[{"type":"text","text":"Middleware creating Distributed Tracing spans for each request."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBTracingMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBTracingMiddleware"}],"url":"\/documentation\/hummingbird\/hbtracingmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCORSMiddleware":{"role":"symbol","title":"HBCORSMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCORSMiddleware"}],"abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCORSMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBCORSMiddleware"}],"url":"\/documentation\/hummingbird\/hbcorsmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncMiddleware":{"role":"symbol","title":"HBAsyncMiddleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncMiddleware"}],"abstract":[{"type":"text","text":"Middleware using async\/await"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncMiddleware"}],"url":"\/documentation\/hummingbird\/hbasyncmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddleware":{"role":"symbol","title":"HBMiddleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddleware"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBMiddleware"}],"url":"\/documentation\/hummingbird\/hbmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBSessionAuthenticator":{"role":"symbol","title":"HBSessionAuthenticator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBSessionAuthenticator"}],"abstract":[{"type":"text","text":"Session authenticator"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBSessionAuthenticator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBSessionAuthenticator"}],"url":"\/documentation\/hummingbirdauth\/hbsessionauthenticator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBMiddlewareGroup":{"role":"symbol","title":"HBMiddlewareGroup","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBMiddlewareGroup"}],"abstract":[{"type":"text","text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBMiddlewareGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBMiddlewareGroup"}],"url":"\/documentation\/hummingbird\/hbmiddlewaregroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFoundation/HBFileMiddleware":{"role":"symbol","title":"HBFileMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBFileMiddleware"}],"abstract":[{"type":"text","text":"Middleware for serving static files."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFoundation\/HBFileMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBFileMiddleware"}],"url":"\/documentation\/hummingbirdfoundation\/hbfilemiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"role":"symbol","title":"IsAuthenticatedMiddleware","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"abstract":[{"type":"text","text":"Middleware returning 404 for unauthenticated requests"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware"}}}