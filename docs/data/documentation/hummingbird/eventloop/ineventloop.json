{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/inEventLoop"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop"]]},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inEventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"This method is intended principally as an optimization point, allowing users to write code that can provide fast-paths when this","type":"text"},{"text":" ","type":"text"},{"text":"property is true. It is ","type":"text"},{"inlineContent":[{"type":"text","text":"not suitable"}],"type":"emphasis"},{"text":" as a correctness guard. Code must be correct if this value returns ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" ","type":"text"},{"inlineContent":[{"text":"even if","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"the event loop context is actually held. That’s because this property is allowed to produce false-negatives","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Implementers may implement this method in a way that may produce false-negatives: that is, this value may return ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"cases where the code in question actually is executing on the event loop. It may ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"never"}]},{"text":" produce false positives: this value","type":"text"},{"text":" ","type":"text"},{"text":"must never return ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" when event loop context is not actually held.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If it is necessary for correctness to confirm that you’re on an event loop, prefer "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/preconditionInEventLoop(file:line:)","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/eventloop\/ineventloop"]}],"abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the current "},{"type":"codeVoice","code":"NIOThread"},{"type":"text","text":" is the same as the "},{"type":"codeVoice","code":"NIOThread"},{"type":"text","text":" that is tied to this "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":". "},{"type":"codeVoice","code":"false"},{"type":"text","text":" otherwise."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"inEventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"externalID":"s:7NIOCore9EventLoopP02inbC0Sbvp","modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Property","required":true,"title":"inEventLoop","role":"symbol","symbolKind":"property"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop/preconditionInEventLoop(file:line:)":{"type":"topic","title":"preconditionInEventLoop(file:line:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/preconditionInEventLoop(file:line:)","kind":"symbol","url":"\/documentation\/hummingbird\/eventloop\/preconditionineventloop(file:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"preconditionInEventLoop","kind":"identifier"},{"text":"(","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"role":"symbol","abstract":[{"text":"Asserts that the current thread is the one tied to this ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Otherwise, the process will be abnormally terminated as per the semantics of ","type":"text"},{"code":"preconditionFailure(_:file:line:)","type":"codeVoice"},{"text":".","type":"text"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"kind":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","url":"\/documentation\/hummingbird\/eventloop","type":"topic","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop/inEventLoop":{"abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the current ","type":"text"},{"type":"codeVoice","code":"NIOThread"},{"text":" is the same as the ","type":"text"},{"type":"codeVoice","code":"NIOThread"},{"text":" that is tied to this ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":". ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" otherwise.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inEventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"required":true,"type":"topic","url":"\/documentation\/hummingbird\/eventloop\/ineventloop","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/inEventLoop","kind":"symbol","role":"symbol","title":"inEventLoop"}}}