{"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"inEventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is intended principally as an optimization point, allowing users to write code that can provide fast-paths when this"},{"type":"text","text":" "},{"type":"text","text":"property is true. It is "},{"inlineContent":[{"text":"not suitable","type":"text"}],"type":"emphasis"},{"type":"text","text":" as a correctness guard. Code must be correct if this value returns "},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"inlineContent":[{"text":"even if","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"the event loop context is actually held. That’s because this property is allowed to produce false-negatives"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implementers may implement this method in a way that may produce false-negatives: that is, this value may return "},{"type":"codeVoice","code":"false"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"cases where the code in question actually is executing on the event loop. It may "},{"type":"emphasis","inlineContent":[{"text":"never","type":"text"}]},{"type":"text","text":" produce false positives: this value"},{"type":"text","text":" "},{"type":"text","text":"must never return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when event loop context is not actually held."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If it is necessary for correctness to confirm that you’re on an event loop, prefer "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/preconditionInEventLoop(file:line:)","isActive":true},{"type":"text","text":"."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/inEventLoop","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Property","externalID":"s:7NIOCore9EventLoopP02inbC0Sbvp","role":"symbol","required":true,"symbolKind":"property","title":"inEventLoop","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inEventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"modules":[{"name":"Hummingbird"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","abstract":[{"text":"Returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the current ","type":"text"},{"code":"NIOThread","type":"codeVoice"},{"text":" is the same as the ","type":"text"},{"code":"NIOThread","type":"codeVoice"},{"text":" that is tied to this ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":". "},{"type":"codeVoice","code":"false"},{"type":"text","text":" otherwise."}],"variants":[{"paths":["\/documentation\/hummingbird\/eventloop\/ineventloop"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop/preconditionInEventLoop(file:line:)":{"title":"preconditionInEventLoop(file:line:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/preconditionInEventLoop(file:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"preconditionInEventLoop","kind":"identifier"},{"text":"(","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","required":true,"abstract":[{"text":"Asserts that the current thread is the one tied to this ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Otherwise, the process will be abnormally terminated as per the semantics of ","type":"text"},{"type":"codeVoice","code":"preconditionFailure(_:file:line:)"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/eventloop\/preconditionineventloop(file:line:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoop"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"title":"EventLoop","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop/inEventLoop":{"title":"inEventLoop","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/inEventLoop","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"inEventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol","required":true,"abstract":[{"text":"Returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the current ","type":"text"},{"type":"codeVoice","code":"NIOThread"},{"text":" is the same as the ","type":"text"},{"type":"codeVoice","code":"NIOThread"},{"text":" that is tied to this ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":". ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" otherwise.","type":"text"}],"type":"topic","url":"\/documentation\/hummingbird\/eventloop\/ineventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"}}}