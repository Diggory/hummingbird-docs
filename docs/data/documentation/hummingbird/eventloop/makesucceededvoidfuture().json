{"abstract":[{"text":"Return a succeeded ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" future.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeSucceededVoidFuture"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Semantically, this function is equivalent to calling "},{"code":"makeSucceededFuture(())","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Contrary to "},{"code":"makeSucceededFuture","type":"codeVoice"},{"type":"text","text":", "},{"code":"makeSucceededVoidFuture","type":"codeVoice"},{"type":"text","text":" is a customization point for "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s which"},{"type":"text","text":" "},{"type":"text","text":"allows "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to cache a pre-succeeded "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" future to prevent superfluous allocations."}],"type":"paragraph"}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop"]]},"sections":[],"variants":[{"paths":["\/documentation\/hummingbird\/eventloop\/makesucceededvoidfuture()"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","externalID":"s:7NIOCore9EventLoopP23makeSucceededVoidFutureAA0bcG0CyytGyF","symbolKind":"method","title":"makeSucceededVoidFuture()","modules":[{"name":"Hummingbird"}],"required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeSucceededVoidFuture","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"roleHeading":"Instance Method"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/makeSucceededVoidFuture()"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop/makeSucceededVoidFuture()":{"role":"symbol","url":"\/documentation\/hummingbird\/eventloop\/makesucceededvoidfuture()","abstract":[{"text":"Return a succeeded ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" future.","type":"text"}],"required":true,"type":"topic","title":"makeSucceededVoidFuture()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeSucceededVoidFuture","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/makeSucceededVoidFuture()"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"type":"topic","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"role":"symbol","title":"EventLoopFuture","url":"\/documentation\/hummingbird\/eventloopfuture","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"kind":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","url":"\/documentation\/hummingbird\/eventloop","type":"topic","abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"code":"Channel","type":"codeVoice"},{"text":"s until itâ€™s closed.","type":"text"}]}}}