{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/makeSucceededVoidFuture()","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/eventloop\/makesucceededvoidfuture()"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop"]]},"abstract":[{"type":"text","text":"Return a succeeded "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" future."}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeSucceededVoidFuture","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"required":true,"roleHeading":"Instance Method","role":"symbol","symbolKind":"method","title":"makeSucceededVoidFuture()","externalID":"s:7NIOCore9EventLoopP23makeSucceededVoidFutureAA0bcG0CyytGyF","modules":[{"name":"Hummingbird"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeSucceededVoidFuture","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoopFuture","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Semantically, this function is equivalent to calling ","type":"text"},{"type":"codeVoice","code":"makeSucceededFuture(())"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Contrary to ","type":"text"},{"type":"codeVoice","code":"makeSucceededFuture"},{"text":", ","type":"text"},{"type":"codeVoice","code":"makeSucceededVoidFuture"},{"text":" is a customization point for ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":"s which","type":"text"},{"text":" ","type":"text"},{"text":"allows ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":"s to cache a pre-succeeded ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" future to prevent superfluous allocations.","type":"text"}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop/makeSucceededVoidFuture()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeSucceededVoidFuture","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop\/makeSucceededVoidFuture()","title":"makeSucceededVoidFuture()","kind":"symbol","required":true,"role":"symbol","url":"\/documentation\/hummingbird\/eventloop\/makesucceededvoidfuture()","abstract":[{"text":"Return a succeeded ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" future.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoop":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoop","kind":"symbol","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until itâ€™s closed.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","title":"EventLoop","url":"\/documentation\/hummingbird\/eventloop"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EventLoopFuture":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"url":"\/documentation\/hummingbird\/eventloopfuture","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"}}}