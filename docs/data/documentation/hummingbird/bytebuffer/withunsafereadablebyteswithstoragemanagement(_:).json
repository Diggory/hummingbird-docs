{"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)"]}],"sections":[],"abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"‘s readable bytes. You may hold a pointer to those bytes","type":"text"},{"text":" ","type":"text"},{"text":"even after the closure returned iff you model the lifetime of those bytes correctly using the ","type":"text"},{"code":"Unmanaged","type":"codeVoice"},{"text":" ","type":"text"},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV","text":"Unmanaged","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The closure that will accept the yielded bytes and the ","type":"text"},{"code":"storageManagement","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"body"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value returned by "},{"type":"codeVoice","code":"body"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you escape the pointer from the closure, you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" call "},{"type":"codeVoice","code":"storageManagement.retain()"},{"type":"text","text":" to get ownership to"},{"type":"text","text":" "},{"type":"text","text":"the bytes and you also must call "},{"type":"codeVoice","code":"storageManagement.release()"},{"type":"text","text":" if you no longer require those bytes. Calls to"},{"type":"text","text":" "},{"type":"codeVoice","code":"retain"},{"type":"text","text":" and "},{"type":"codeVoice","code":"release"},{"type":"text","text":" must be balanced."}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)"},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"roleHeading":"Instance Method","title":"withUnsafeReadableBytesWithStorageManagement(_:)","modules":[{"name":"Hummingbird"}],"externalID":"s:7NIOCore10ByteBufferV44withUnsafeReadableBytesWithStorageManagementyxxSW_s9UnmanagedVyyXlGtKXEKlF","role":"symbol","symbolKind":"method"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV","text":"Unmanaged","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","url":"\/documentation\/hummingbird\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"‘s readable bytes. You may hold a pointer to those bytes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"title":"ByteBuffer","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"url":"\/documentation\/hummingbird\/bytebuffer","kind":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}]}}}