{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"]]},"metadata":{"role":"symbol","externalID":"s:7NIOCore10ByteBufferV5clearyyF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"title":"clear()","symbolKind":"method","modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Method"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()"},"variants":[{"paths":["\/documentation\/hummingbird\/bytebuffer\/clear()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This method will allocate if the underlying storage is referenced by another "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". Even if an"},{"type":"text","text":" "},{"type":"text","text":"allocation is necessary this will be cheaper as the copy of the storage is elided."}],"type":"paragraph"}],"name":"Note"}]}],"abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","url":"\/documentation\/hummingbird\/bytebuffer","type":"topic","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear()":{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear()","title":"clear()","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"url":"\/documentation\/hummingbird\/bytebuffer\/clear()","role":"symbol"}}}