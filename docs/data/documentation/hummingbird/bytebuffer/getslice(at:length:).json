{"sections":[],"abstract":[{"text":"Returns a slice of size ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes, starting at ","type":"text"},{"code":"index","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" this is invoked on and the","type":"text"},{"text":" ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" returned will share the same underlying storage. However, the byte at ","type":"text"},{"code":"index","type":"codeVoice"},{"text":" in this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"will correspond to index ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" in the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" of the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will be ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" will be ","type":"text"},{"code":"length","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"index","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":"?","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The index the requested slice starts at."}]}],"name":"index"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The length of the requested slice.","type":"text"}]}],"name":"length"}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" containing the selected bytes as readable bytes or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if the selected bytes were","type":"text"},{"text":" ","type":"text"},{"text":"not readable in the initial ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"The selected bytes must be readable or else ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" will be returned.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/bytebuffer\/getslice(at:length:)"]}],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Hummingbird"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"getSlice(at:length:)","symbolKind":"method","externalID":"s:7NIOCore10ByteBufferV8getSlice2at6lengthACSgSi_SitF","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/getSlice(at:length:)":{"abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"type":"codeVoice","code":"index"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"code":"index","type":"codeVoice"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" in the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" of the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"0","type":"codeVoice"},{"type":"text","text":", the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"length","type":"codeVoice"},{"type":"text","text":"."}],"title":"getSlice(at:length:)","role":"symbol","url":"\/documentation\/hummingbird\/bytebuffer\/getslice(at:length:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/getSlice(at:length:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"title":"ByteBuffer","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"url":"\/documentation\/hummingbird\/bytebuffer","kind":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"}}}