{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The closure that will accept the yielded bytes and return the number of bytes written.","type":"text"}],"type":"paragraph"}],"name":"body"}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"The number of bytes written.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"In almost all cases you should use ","type":"text"},{"code":"writeWithUnsafeMutableBytes","type":"codeVoice"},{"text":" which will move the write pointer instead of this method","type":"text"}],"type":"paragraph"}]},{"style":"warning","name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Do not escape the pointer from the closure for later use.","type":"text"}]}]}]}],"metadata":{"externalID":"s:7NIOCore10ByteBufferV30withUnsafeMutableWritableBytesyxxSwKXEKlF","modules":[{"name":"Hummingbird"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"roleHeading":"Instance Method","title":"withUnsafeMutableWritableBytes(_:)","role":"symbol","symbolKind":"method"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"capacity"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":"). Before reading those bytes you must first","type":"text"},{"text":" ","type":"text"},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"variants":[{"paths":["\/documentation\/hummingbird\/bytebuffer\/withunsafemutablewritablebytes(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"url":"\/documentation\/hummingbird\/bytebuffer\/withunsafemutablewritablebytes(_:)","title":"withUnsafeMutableWritableBytes(_:)","role":"symbol","type":"topic","abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"code":"capacity","type":"codeVoice"},{"text":" - ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":"). Before reading those bytes you must first","type":"text"},{"text":" ","type":"text"},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"title":"ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","url":"\/documentation\/hummingbird\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"role":"symbol","type":"topic"}}}