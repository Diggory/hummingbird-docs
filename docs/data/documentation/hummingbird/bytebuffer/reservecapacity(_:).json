{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"minimumCapacity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The minimum number of bytes this buffer must be able to store."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will ensure that the buffer has space for at least as many bytes as requested."},{"type":"text","text":" "},{"type":"text","text":"This includes any bytes already stored, and completely disregards the reader\/writer indices."},{"type":"text","text":" "},{"type":"text","text":"If the buffer already has space to store the requested number of bytes, this method will be"},{"type":"text","text":" "},{"type":"text","text":"a no-op."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/hummingbird\/bytebuffer\/reservecapacity(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"title":"reserveCapacity(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:7NIOCore10ByteBufferV15reserveCapacityyySiF","modules":[{"name":"Hummingbird"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"role":"symbol","title":"ByteBuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/hummingbird\/bytebuffer"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/reserveCapacity(_:)":{"role":"symbol","title":"reserveCapacity(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/reserveCapacity(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/bytebuffer\/reservecapacity(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"}}}