{"abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"minimumCapacity","content":[{"inlineContent":[{"type":"text","text":"The minimum capacity that will be (re)allocated for this buffer"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This method will allocate if the underlying storage is referenced by another ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Even if an","type":"text"},{"text":" ","type":"text"},{"text":"allocation is necessary this will be cheaper as the copy of the storage is elided.","type":"text"}]}],"type":"aside","name":"Note"}]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use an `Int` as the argument","type":"text"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-7qskn"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Method","title":"clear(minimumCapacity:)","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","platforms":[],"externalID":"s:7NIOCore10ByteBufferV5clear15minimumCapacityys6UInt32V_tF"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer/clear(minimumCapacity:)-7qskn":{"abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"title":"clear(minimumCapacity:)","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer\/clear(minimumCapacity:)-7qskn"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ByteBuffer":{"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"title":"ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ByteBuffer","url":"\/documentation\/hummingbird\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"}}}