{"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/hummingbird\/hbparser\/read(_:)-3ddyp"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"read(_:)","roleHeading":"Instance Method","modules":[{"name":"HummingbirdLambda","relatedModules":["Hummingbird"]}],"externalID":"s:11Hummingbird8HBParserV4readySbs7UnicodeO6ScalarVKF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s7UnicodeO","kind":"typeIdentifier","text":"Unicode"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO6ScalarV","kind":"typeIdentifier","text":"Scalar"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"extendedModule":"Hummingbird","role":"symbol","symbolKind":"method"},"sections":[],"abstract":[{"text":"Read the current character and return if it is as intended. If character test returns true then move forward 1","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParser"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"char"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO","text":"Unicode"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO6ScalarV","text":"Scalar"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]}]},{"kind":"parameters","parameters":[{"name":"char","content":[{"inlineContent":[{"text":"character to compare against","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"inlineContent":[{"text":"If current character was the one we expected","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"style":"note","name":"Throws","content":[{"inlineContent":[{"type":"text","text":".overflow"}],"type":"paragraph"}],"type":"aside"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParser\/read(_:)-3ddyp"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBParser/read(_:)-3ddyp":{"type":"topic","title":"read(_:)","url":"\/documentation\/hummingbird\/hbparser\/read(_:)-3ddyp","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParser\/read(_:)-3ddyp","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Unicode","kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO"},{"text":".","kind":"text"},{"text":"Scalar","kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO6ScalarV"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","abstract":[{"text":"Read the current character and return if it is as intended. If character test returns true then move forward 1","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBParser":{"abstract":[{"text":"Reader object for parsing String buffers","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HBParser"}],"title":"HBParser","navigatorTitle":[{"kind":"identifier","text":"HBParser"}],"url":"\/documentation\/hummingbird\/hbparser"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","role":"collection","type":"topic","abstract":[{"text":"Lightweight, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol"}}}