{"metadata":{"role":"symbol","modules":[{"name":"Hummingbird"}],"roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAddressResolvingHost","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier"}],"symbolKind":"method","title":"makeAddressResolvingHost(_:port:)","externalID":"s:7NIOCore13SocketAddressO04makeC13ResolvingHost_4portACSS_SitKFZ"},"abstract":[{"text":"Creates a new ","type":"text"},{"type":"codeVoice","code":"SocketAddress"},{"text":" for the given host (which will be resolved) and port.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAddressResolvingHost","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"host","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","text":"SocketAddress","kind":"typeIdentifier"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"name":"host","content":[{"type":"paragraph","inlineContent":[{"text":"the hostname which should be resolved.","type":"text"}]}]},{"name":"port","content":[{"inlineContent":[{"type":"text","text":"the port itself"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"the ","type":"text"},{"code":"SocketAddress","type":"codeVoice"},{"text":" for the host \/ port pair.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"content":[{"type":"paragraph","inlineContent":[{"text":"This is a blocking call, so please avoid calling this from an ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":".","type":"text"}]}],"type":"aside","name":"Warning","style":"warning"},{"content":[{"type":"paragraph","inlineContent":[{"text":"a ","type":"text"},{"code":"SocketAddressError.unknown","type":"codeVoice"},{"text":" if we could not resolve the ","type":"text"},{"code":"host","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"SocketAddressError.unsupported","type":"codeVoice"},{"text":" if the address itself is not supported (yet).","type":"text"}]}],"type":"aside","name":"Throws","style":"note"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/hummingbird\/socketaddress\/makeaddressresolvinghost(_:port:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress\/makeAddressResolvingHost(_:port:)"},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","title":"Hummingbird","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"url":"\/documentation\/hummingbird\/socketaddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}],"navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}],"title":"SocketAddress","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress/makeAddressResolvingHost(_:port:)":{"role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAddressResolvingHost","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier"}],"title":"makeAddressResolvingHost(_:port:)","url":"\/documentation\/hummingbird\/socketaddress\/makeaddressresolvinghost(_:port:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress\/makeAddressResolvingHost(_:port:)","abstract":[{"text":"Creates a new ","type":"text"},{"code":"SocketAddress","type":"codeVoice"},{"text":" for the given host (which will be resolved) and port.","type":"text"}]}}}