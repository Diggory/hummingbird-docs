{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"externalID":"s:7NIOCore13SocketAddressO04makeC13ResolvingHost_4portACSS_SitKFZ","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAddressResolvingHost"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"port"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress"}],"modules":[{"name":"Hummingbird"}],"roleHeading":"Type Method","role":"symbol","symbolKind":"method","title":"makeAddressResolvingHost(_:port:)"},"variants":[{"paths":["\/documentation\/hummingbird\/socketaddress\/makeaddressresolvinghost(_:port:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"SocketAddress"},{"type":"text","text":" for the given host (which will be resolved) and port."}],"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAddressResolvingHost","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"host","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","kind":"typeIdentifier"}],"languages":["swift"]}]},{"parameters":[{"name":"host","content":[{"type":"paragraph","inlineContent":[{"text":"the hostname which should be resolved.","type":"text"}]}]},{"name":"port","content":[{"inlineContent":[{"text":"the port itself","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"the ","type":"text"},{"code":"SocketAddress","type":"codeVoice"},{"text":" for the host \/ port pair.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"aside","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"This is a blocking call, so please avoid calling this from an ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}]}],"style":"warning"},{"type":"aside","name":"Throws","content":[{"inlineContent":[{"text":"a ","type":"text"},{"code":"SocketAddressError.unknown","type":"codeVoice"},{"text":" if we could not resolve the ","type":"text"},{"code":"host","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"SocketAddressError.unsupported","type":"codeVoice"},{"text":" if the address itself is not supported (yet).","type":"text"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress\/makeAddressResolvingHost(_:port:)","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress/makeAddressResolvingHost(_:port:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress\/makeAddressResolvingHost(_:port:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAddressResolvingHost"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress","kind":"typeIdentifier"}],"kind":"symbol","title":"makeAddressResolvingHost(_:port:)","type":"topic","url":"\/documentation\/hummingbird\/socketaddress\/makeaddressresolvinghost(_:port:)","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"SocketAddress"},{"text":" for the given host (which will be resolved) and port.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/SocketAddress":{"navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}],"title":"SocketAddress","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/SocketAddress","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}],"url":"\/documentation\/hummingbird\/socketaddress","abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}],"kind":"symbol"}}}