{"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"The "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" and "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":" types both contain an "},{"code":"HBExtensions","type":"codeVoice"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}],"type":"paragraph"},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above adds the member variable ","type":"text"},{"type":"codeVoice","code":"myExt"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" class. I use the ","type":"text"},{"type":"codeVoice","code":"KeyPath"},{"text":" to the variable as the key. While it would be possible to use another ","type":"text"},{"type":"codeVoice","code":"KeyPath"},{"text":" as the key in most situations it doesnâ€™t really make sense.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing ","type":"text"},{"code":"HBApplication.myExt","type":"codeVoice"},{"text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set.","type":"text"}]},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For extensions to ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" to include a ","type":"text"},{"code":"AWSClient","type":"codeVoice"},{"text":" from the package ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/soto-project\/soto"},{"text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you.","type":"text"}]},{"code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note, In this example I have placed everything inside a containing struct ","type":"text"},{"type":"codeVoice","code":"AWS"},{"text":", so the KeyPath ","type":"text"},{"type":"codeVoice","code":"\\.aws.client"},{"text":" needs to include the name of containing member variable ","type":"text"},{"type":"codeVoice","code":"aws"},{"text":" in it as well.","type":"text"}]},{"type":"heading","level":3,"text":"Reference","anchor":"Reference"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","isActive":true}]}]}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","metadata":{"role":"article","modules":[{"name":"Hummingbird"}],"title":"Extending Hummingbird","roleHeading":"Article"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"type":"topic","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","kind":"article","url":"\/documentation\/hummingbird\/error-handling","role":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Encoding-and-Decoding":{"title":"Encoding and Decoding","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","role":"collectionGroup","url":"\/documentation\/hummingbird\/encoding-and-decoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","url":"\/documentation\/index","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"title":"Persistent data","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistent-data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"kind":"article"},"https://github.com/soto-project/soto":{"type":"link","title":"Soto","titleInlineContent":[{"type":"codeVoice","code":"Soto"}],"identifier":"https:\/\/github.com\/soto-project\/soto","url":"https:\/\/github.com\/soto-project\/soto"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","url":"\/documentation\/hummingbird\/router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBExtensions":{"kind":"symbol","navigatorTitle":[{"text":"HBExtensions","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBExtensions","kind":"identifier"}],"title":"HBExtensions","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBExtensions","url":"\/documentation\/hummingbirdauth\/hbextensions","type":"topic","abstract":[{"type":"text","text":"Extend objects with additional member variables"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]}}}