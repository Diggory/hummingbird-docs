{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" and "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" types both contain an "},{"type":"codeVoice","code":"HBExtensions"},{"type":"text","text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key."}]},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above adds the member variable "},{"type":"codeVoice","code":"myExt"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" class. I use the "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" to the variable as the key. While it would be possible to use another "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" as the key in most situations it doesnâ€™t really make sense."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"type":"codeVoice","code":"HBApplication.myExt"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}]},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For extensions to "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" to include a "},{"type":"codeVoice","code":"AWSClient"},{"type":"text","text":" from the package "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/soto-project\/soto"},{"type":"text","text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you."}]},{"type":"codeListing","syntax":"swift","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, In this example I have placed everything inside a containing struct "},{"type":"codeVoice","code":"AWS"},{"type":"text","text":", so the KeyPath "},{"type":"codeVoice","code":"\\.aws.client"},{"type":"text","text":" needs to include the name of containing member variable "},{"type":"codeVoice","code":"aws"},{"type":"text","text":" in it as well."}]},{"anchor":"Reference","level":3,"type":"heading","text":"Reference"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions"}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Extending Hummingbird","role":"article","modules":[{"name":"Hummingbird"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","type":"topic","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"role":"collectionGroup","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/persistent-data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Encoding-and-Decoding":{"role":"collectionGroup","title":"Encoding and Decoding","abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/encoding-and-decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBExtensions":{"role":"symbol","title":"HBExtensions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensions"}],"abstract":[{"type":"text","text":"Extend objects with additional member variables"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"url":"\/documentation\/hummingbird\/hbextensions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"role":"article","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/error-handling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"collectionGroup","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/router"},"https://github.com/soto-project/soto":{"title":"Soto","titleInlineContent":[{"type":"codeVoice","code":"Soto"}],"type":"link","identifier":"https:\/\/github.com\/soto-project\/soto","url":"https:\/\/github.com\/soto-project\/soto"}}}