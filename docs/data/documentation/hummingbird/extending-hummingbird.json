{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird"},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"HBApplication"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" types both contain an ","type":"text"},{"type":"codeVoice","code":"HBExtensions"},{"text":" object that allows you to extend them with your own objects. The extension objects are stored in a dictionary with a KeyPath as their key.","type":"text"}],"type":"paragraph"},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt) }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The code above adds the member variable "},{"code":"myExt","type":"codeVoice"},{"type":"text","text":" to the "},{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" class. I use the "},{"code":"KeyPath","type":"codeVoice"},{"type":"text","text":" to the variable as the key. While it would be possible to use another "},{"code":"KeyPath","type":"codeVoice"},{"type":"text","text":" as the key in most situations it doesnâ€™t really make sense."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example above the member variable is an optional, to ensure you will always get a valid value when referencing "},{"type":"codeVoice","code":"HBApplication.myExt"},{"type":"text","text":". You can set the variable to be non-optional but you will have to ensure you set the variable before ever accessing it, otherwise your application will crash. You can add an error message to be displayed if a variable is accessed before being set."}],"type":"paragraph"},{"code":["extension HBApplication {","    public var myExt: String? {","        get { self.extensions.get(\\.myExt, error: \"Cannot access myExt before setting it.\") }","        set { self.extensions.set(\\.myExt, value: newValue) }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For extensions to ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" you also get the added bonus of being able to add a shutdown call for when the application is shutdown. In the example below we have extended ","type":"text"},{"code":"HBApplication","type":"codeVoice"},{"text":" to include a ","type":"text"},{"code":"AWSClient","type":"codeVoice"},{"text":" from the package ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/soto-project\/soto","type":"reference"},{"text":". It is required you shutdown the client before it is deleted. The extension shutdown can be used to do this for you.","type":"text"}]},{"syntax":"swift","code":["extension HBApplication {","    public struct AWS {","        public var client: AWSClient {","            get { application.extensions.get(\\.aws.client) }","            nonmutating set {","                application.extensions.set(\\.aws.client, value: newValue) { client in","                    \/\/ shutdown AWSClient","                    try client.syncShutdown()","                }","            }","        }","        let application: HBApplication","    }","","    public var aws: AWS { return .init(application: self) }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note, In this example I have placed everything inside a containing struct ","type":"text"},{"code":"AWS","type":"codeVoice"},{"text":", so the KeyPath ","type":"text"},{"code":"\\.aws.client","type":"codeVoice"},{"text":" needs to include the name of containing member variable ","type":"text"},{"code":"aws","type":"codeVoice"},{"text":" in it as well.","type":"text"}]},{"type":"heading","text":"Reference","anchor":"Reference","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","isActive":true}]}]}],"type":"unorderedList"}]}],"metadata":{"title":"Extending Hummingbird","roleHeading":"Article","modules":[{"name":"Hummingbird"}],"role":"article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"https://github.com/soto-project/soto":{"identifier":"https:\/\/github.com\/soto-project\/soto","type":"link","titleInlineContent":[{"code":"Soto","type":"codeVoice"}],"url":"https:\/\/github.com\/soto-project\/soto","title":"Soto"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","type":"topic","kind":"article","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBExtensions":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBExtensions","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBExtensions"}],"url":"\/documentation\/hummingbird\/hbextensions","kind":"symbol","title":"HBExtensions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBExtensions"}],"abstract":[{"type":"text","text":"Extend objects with additional member variables"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/error-handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","role":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Encoding-and-Decoding":{"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"title":"Encoding and Decoding","role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/encoding-and-decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"role":"collectionGroup","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","title":"Persistent data","url":"\/documentation\/hummingbird\/persistent-data"}}}