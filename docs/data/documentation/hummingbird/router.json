{"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The router that comes with Hummingbird uses a Trie based lookup. Routes are added using the function ","type":"text"},{"type":"codeVoice","code":"on"},{"text":". You provide the URI path, the method and the handler function. Below is a simple route which returns “Hello” in the body of the response.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.router.on(\"\/hello\", method: .GET) { request in","    return \"Hello\"","}"]},{"type":"paragraph","inlineContent":[{"text":"If you don’t provide a path then the default is for it to be “\/”.","type":"text"}]},{"type":"heading","anchor":"Methods","level":3,"text":"Methods"},{"type":"paragraph","inlineContent":[{"text":"There are shortcut functions for common HTTP methods. The above can be written as","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.router.get(\"\/hello\") { request in","    return \"Hello\"","}"]},{"type":"paragraph","inlineContent":[{"text":"There are shortcuts for ","type":"text"},{"code":"put","type":"codeVoice"},{"text":", ","type":"text"},{"code":"post","type":"codeVoice"},{"text":", ","type":"text"},{"code":"head","type":"codeVoice"},{"text":", ","type":"text"},{"code":"patch","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"delete","type":"codeVoice"},{"text":" as well.","type":"text"}]},{"type":"heading","anchor":"Response-generators","level":3,"text":"Response generators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Route handlers are required to return either a type conforming to the "},{"type":"codeVoice","code":"HBResponseGenerator"},{"type":"text","text":" protocol or an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" of a type conforming to "},{"type":"codeVoice","code":"HBResponseGenerator"},{"type":"text","text":". An "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" is an object that will fulfilled with their value at a later date in an asynchronous manner. The "},{"type":"codeVoice","code":"HBResponseGenerator"},{"type":"text","text":" protocol requires an object to be able to generate an "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":". For example "},{"type":"codeVoice","code":"String"},{"type":"text","text":" has been extended to conform to "},{"type":"codeVoice","code":"HBResponseGenerator"},{"type":"text","text":" by returning an "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" with status "},{"type":"codeVoice","code":".ok"},{"type":"text","text":",  a content-type header of "},{"type":"codeVoice","code":"text-plain"},{"type":"text","text":" and a body holding the contents of the "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Extend String to conform to ResponseGenerator","extension String: HBResponseGenerator {","    \/\/\/ Generate response holding string","    public func response(from request: HBRequest) -> HBResponse {","        let buffer = request.allocator.buffer(string: self)","        return HBResponse(status: .ok, headers: [\"content-type\": \"text\/plain; charset=utf-8\"], body: .byteBuffer(buffer))","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"In addition to ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"HTTPResponseStatus","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" have also been extended to conform to ","type":"text"},{"code":"HBResponseGenerator","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to extend "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" objects to generate "},{"type":"codeVoice","code":"HBResponses"},{"type":"text","text":" by conforming these objects to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". The object will use "},{"type":"codeVoice","code":"HBApplication.encoder"},{"type":"text","text":" to encode these objects. If an object conforms to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":" then also so do arrays of these objects and dictionaries."}]},{"type":"heading","anchor":"Parameters","level":3,"text":"Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can extract parameters out of the URI by prefixing the path with a colon. This indicates that this path section is a parameter. The parameter name is the string following the colon. You can get access to the parameters extracted from the URI with "},{"type":"codeVoice","code":"HBRequest.parameters"},{"type":"text","text":". If there are no URI parameters in the path, accessing "},{"type":"codeVoice","code":"HBRequest.parameters"},{"type":"text","text":" will cause a crash, so don’t use it if you haven’t specified a parameter in the route path. This example extracts an id from the URI and uses it to return a specific user. so “\/user\/56” will return user with id 56."}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.router.get(\"\/user\/:id\") { request in","    let id = request.parameters.get(\"id\", as: Int.self) else { throw HBHTTPError(.badRequest) }","    return getUser(id: id)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above if I fail to access the parameter as an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" then I throw an error. If you throw an "},{"type":"codeVoice","code":"HBHTTPError"},{"type":"text","text":" it will get converted to a valid HTTP response."}]},{"type":"heading","anchor":"Groups","level":3,"text":"Groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Routes can be grouped together in a "},{"code":"HBRouterGroup","type":"codeVoice"},{"type":"text","text":".  These allow for you to prefix a series of routes with the same path and more importantly apply middleware to only those routes. The example below is a group that includes five handlers all prefixed with the path “\/todos”."}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.router.group(\"\/todos\")","    .put(use: createTodo)","    .get(use: listTodos)","    .get(\":id\", getTodo)","    .patch(\":id\", editTodo)","    .delete(\":id\", deleteTodo)"]},{"type":"heading","anchor":"Route-handlers","level":3,"text":"Route handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A route handler "},{"code":"HBRouteHandler","type":"codeVoice"},{"type":"text","text":" allows you to encapsulate all the components required for a route, and provide separation of the extraction of input parameters from the request and the processing of those parameters. An example could be structrured as follows"}]},{"type":"codeListing","syntax":"swift","code":["struct AddOrder: HBRouteHandler {","    struct Input: Decodable {","        let name: String","        let amount: Double","    }","    struct Output: HBResponseEncodable {","        let id: String","    }","    let input: Input","    let user: User","    ","    init(from request: HBRequest) throws {","        self.input = try request.decode(as: Input.self)","        self.user = try request.auth.require(User.self)","    }","    func handle(request: HBRequest) -> EventLoopFuture<Output> {","        let order = Order(user: self.user.id, details: self.input)","        return order.save(on: request.db)","            .map { .init(id: order.id) }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Here you can see the ","type":"text"},{"code":"AddOrder","type":"codeVoice"},{"text":" route handler encapsulates everything you need to know about the add order route. The ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" structs are defined and any additional input parameters that need extracted from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":". The input parameters are extracted in the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" and then the request is processed in the ","type":"text"},{"code":"handle","type":"codeVoice"},{"text":" function. In this example we need to decode the ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" and using the authentication framework from ","type":"text"},{"code":"HummingbirdAuth","type":"codeVoice"},{"text":" we get the authenticated user.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following will add the handler to the application"}]},{"type":"codeListing","syntax":"swift","code":["application.router.put(\"order\", use: AddOrder.self)"]},{"type":"heading","anchor":"Streaming-request-body","level":3,"text":"Streaming request body"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default Hummingbird will collate the contents of your request body into one ByteBuffer. You can access this via "},{"type":"codeVoice","code":"HBRequest.body.buffer"},{"type":"text","text":". If you’d prefer to stream the content of the request body, you can add a "},{"type":"codeVoice","code":".streamBody"},{"type":"text","text":" option to the route handler to receive a streaming body instead of a single "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". Inside the route handler you access this stream via "},{"type":"codeVoice","code":"HBRequest.body.stream"},{"type":"text","text":". The request body parts are then accessed either via "},{"type":"codeVoice","code":"consume"},{"type":"text","text":" function which will return everything that has been streamed so far or a "},{"type":"codeVoice","code":"consumeAll"},{"type":"text","text":" function which takes a closure processing each part. Here is an example which reads the request buffer and returns it size"}]},{"type":"codeListing","syntax":"swift","code":["application.router.post(\"size\", options: .streamBody) { request -> EventLoopFuture<String> in","    guard let stream = request.body.stream else { ","        return request.failure(.badRequest)","    }","    var size = 0","    return stream.consumeAll(on: request.eventLoop) { buffer in","        size += buffer.readableBytes","        return request.eventLoop.makeSucceededFuture(())","    }","    .map { size.description }","}"]},{"type":"heading","anchor":"Editing-response-in-handler","level":3,"text":"Editing response in handler"},{"type":"paragraph","inlineContent":[{"text":"The standard way to provide a custom response from a route handler is to return a ","type":"text"},{"code":"HBResponse","type":"codeVoice"},{"text":" from that handler. This method loses a lot of the automation of encoding responses, generating the correct status code etc.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is another method though that allows you to edit a response even when returning something other than a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":". First you need to flag your route to say it is editing the response using the option "},{"type":"codeVoice","code":".editResponse"},{"type":"text","text":". Once you have set this option you can edit your response via "},{"type":"codeVoice","code":"HBRequest.response"},{"type":"text","text":". This allows you to add new headers, replace generated headers or set the status code. Below is a route replacing the generated "},{"type":"codeVoice","code":"content-type"},{"type":"text","text":" header and setting the status code."}]},{"type":"codeListing","syntax":"swift","code":["application.router.post(\"test\", options: .editResponse) { request -> String in","    request.response.headers.replaceOrAdd(name: \"content-type\", value: \"application\/json\")","    request.response.status = .accepted","    return #\"{\"test\": \"value\"}\"#","}"]}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data"],"title":"Articles","generated":true}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Router"},"kind":"article","topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"],"title":"Reference"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterBuilder":{"title":"HBRouterBuilder","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouterBuilder"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/hbrouterbuilder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterBuilder","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" that will follow these rules."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/error-handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","role":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","type":"topic","kind":"article","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Extending-Hummingbird":{"title":"Extending Hummingbird","url":"\/documentation\/hummingbird\/extending-hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","role":"article","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"url":"\/documentation\/hummingbird\/hbroutermethods","abstract":[{"text":"Conform to ","type":"text"},{"type":"codeVoice","code":"HBRouterMethods"},{"text":" to add standard router verb (get, post …) methods","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"title":"HBRouterMethods"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Encoding-and-Decoding":{"abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"title":"Encoding and Decoding","role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/encoding-and-decoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"role":"collectionGroup","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","title":"Persistent data","url":"\/documentation\/hummingbird\/persistent-data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"url":"\/documentation\/hummingbird\/hbroutergroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","kind":"symbol","title":"HBRouterGroup"}}}