{"seeAlsoSections":[{"title":"Router","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncCallbackResponder"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}],"title":"HBRouter","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:11Hummingbird8HBRouterP","modules":[{"name":"Hummingbird"}],"navigatorTitle":[{"kind":"identifier","text":"HBRouter"}]},"abstract":[{"type":"text","text":"Directs Requests to handlers based on the request uri."}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter\/add(_:method:responder:)"]}],"variants":[{"paths":["\/documentation\/hummingbird\/hbrouter"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","preciseIdentifier":"s:11Hummingbird11HBResponderP","text":"HBResponder"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","preciseIdentifier":"s:11Hummingbird15HBRouterMethodsP","text":"HBRouterMethods"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conforms to "},{"type":"codeVoice","code":"HBResponder"},{"type":"text","text":" so need to provide its own implementation of"},{"type":"text","text":" "},{"type":"codeVoice","code":"func apply(to request: Request) -> EventLoopFuture<Response>"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HBRouter"},{"type":"text","text":" requires an implementation of  the "},{"type":"codeVoice","code":"on(path:method:use)"},{"type":"text","text":" functions but because it"},{"type":"text","text":" "},{"type":"text","text":"also conforms to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" it is also possible to call the method specific functions "},{"type":"codeVoice","code":"get"},{"type":"text","text":", "},{"type":"codeVoice","code":"put"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"head"},{"type":"text","text":", "},{"type":"codeVoice","code":"post"},{"type":"text","text":" and "},{"type":"codeVoice","code":"patch"},{"type":"text","text":".  The route handler closures all return objects conforming to"},{"type":"text","text":" "},{"type":"codeVoice","code":"HBResponseGenerator"},{"type":"text","text":".  This allows us to support routes which return a multitude of types eg"}]},{"type":"codeListing","syntax":null,"code":["app.router.get(\"string\") { _ -> String in","    return \"string\"","}","app.router.post(\"status\") { _ -> HTTPResponseStatus in","    return .ok","}","app.router.data(\"data\") { request -> ByteBuffer in","    return request.allocator.buffer(string: \"buffer\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Routes can also return "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"’s. So you can support returning values from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous processes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" setup in "},{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" is the "},{"type":"codeVoice","code":"TrieRouter"},{"type":"text","text":" . This uses a"},{"type":"text","text":" "},{"type":"text","text":"trie to partition all the routes for faster access. It also supports wildcards and parameter extraction"}]},{"type":"codeListing","syntax":null,"code":["app.router.get(\"user\/*\", use: anyUser)","app.router.get(\"user\/:id\", use: userWithId)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these match routes which start with “\/user” and the next path segment being anything."},{"type":"text","text":" "},{"type":"text","text":"The second version extracts the path segment out and adds it to "},{"type":"codeVoice","code":"HBRequest.parameters"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"text","text":"key “id”."}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterGroup":{"role":"symbol","title":"HBRouterGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterGroup"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterGroup"}],"url":"\/documentation\/hummingbird\/hbroutergroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBCallbackResponder":{"role":"symbol","title":"HBCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBCallbackResponder"}],"abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBCallbackResponder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBCallbackResponder"}],"url":"\/documentation\/hummingbird\/hbcallbackresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"collectionGroup","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","type":"topic","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecodable":{"role":"symbol","title":"HBRequestDecodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecodable"}],"abstract":[{"type":"codeVoice","code":"HBRouteHandler"},{"type":"text","text":" which uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to initialize it"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecodable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecodable"}],"url":"\/documentation\/hummingbird\/hbrequestdecodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponder":{"role":"symbol","title":"HBResponder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponder"}],"abstract":[{"type":"text","text":"Protocol for object that produces a response given a request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponder"}],"url":"\/documentation\/hummingbird\/hbresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethods":{"role":"symbol","title":"HBRouterMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethods"}],"abstract":[{"type":"text","text":"Conform to "},{"type":"codeVoice","code":"HBRouterMethods"},{"type":"text","text":" to add standard router verb (get, post …) methods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethods","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethods"}],"url":"\/documentation\/hummingbird\/hbroutermethods"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouteHandler":{"role":"symbol","title":"HBRouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouteHandler"}],"abstract":[{"type":"text","text":"Object for handling requests."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouteHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouteHandler"}],"url":"\/documentation\/hummingbird\/hbroutehandler"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter/add(_:method:responder:)":{"role":"symbol","title":"add(_:method:responder:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"add"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"method"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPMethod","preciseIdentifier":"s:8NIOHTTP110HTTPMethodO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"responder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HBResponder","preciseIdentifier":"s:11Hummingbird11HBResponderP"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Add router entry"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter\/add(_:method:responder:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/hummingbird\/hbrouter\/add(_:method:responder:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncCallbackResponder":{"role":"symbol","title":"HBAsyncCallbackResponder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"abstract":[{"type":"text","text":"Responder that calls supplied closure"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncCallbackResponder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncCallbackResponder"}],"url":"\/documentation\/hummingbird\/hbasynccallbackresponder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouter":{"role":"symbol","title":"HBRouter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouter"}],"abstract":[{"type":"text","text":"Directs Requests to handlers based on the request uri."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouter"}],"url":"\/documentation\/hummingbird\/hbrouter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRouterMethodOptions":{"role":"symbol","title":"HBRouterMethodOptions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRouterMethodOptions"}],"abstract":[{"type":"text","text":"Options available to routes"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRouterMethodOptions","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRouterMethodOptions"}],"url":"\/documentation\/hummingbird\/hbroutermethodoptions"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBAsyncRouteHandler":{"role":"symbol","title":"HBAsyncRouteHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBAsyncRouteHandler"}],"abstract":[{"type":"text","text":"Route Handler using async\/await methods"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBAsyncRouteHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBAsyncRouteHandler"}],"url":"\/documentation\/hummingbird\/hbasyncroutehandler"}}}