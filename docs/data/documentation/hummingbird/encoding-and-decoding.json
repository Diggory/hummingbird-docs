{"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HBApplication"},{"type":"text","text":" has two member variables "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"decode(_:from)"},{"type":"text","text":" function that decodes a "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" which requires a "},{"type":"codeVoice","code":"encode(_:from)"},{"type":"text","text":" function that creates a "},{"type":"codeVoice","code":"HBResponse"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value and the original request that generated it."}]},{"type":"codeListing","syntax":"swift","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system except you have additional information from the "},{"type":"codeVoice","code":"HBRequest"},{"type":"text","text":" class on how you might want to decode\/encode your data."}]},{"anchor":"Setting-up-HBApplication","level":2,"type":"heading","text":"Setting up HBApplication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default implementations of "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" are "},{"type":"codeVoice","code":"Null"},{"type":"text","text":" implementations that will assert if used. So you have to setup your "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" before you can use "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" in Hummingbird. "},{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" includes two such implementations. "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application"}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows"}]},{"type":"codeListing","syntax":"swift","code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"]},{"anchor":"Decoding-Requests","level":2,"type":"heading","text":"Decoding Requests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" method in the following manner"}]},{"type":"codeListing","syntax":"swift","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Decoder.decode"},{"type":"text","text":" functions "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". I use the function "},{"type":"codeVoice","code":"HBRequest.failure"},{"type":"text","text":" to generate the failed "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"."}]},{"anchor":"Encoding-Responses","level":2,"type":"heading","text":"Encoding Responses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}]},{"type":"codeListing","syntax":"swift","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"anchor":"DecodingEncoding-based-on-Request-headers","level":2,"type":"heading","text":"Decoding\/Encoding based on Request headers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"codeVoice","code":"HBRequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        switch request.headers[\"content-type\"].first {","        case \"json\/application\", \"application\/json; charset=utf-8\":","            return try JSONDecoder().decode(type, from: request)","        case \"application\/x-www-form-urlencoded\":","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","metadata":{"modules":[{"name":"Hummingbird"}],"role":"collectionGroup","title":"Encoding and Decoding"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"role":"article","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/error-handling"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","type":"topic","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"role":"collectionGroup","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/persistent-data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"role":"symbol","title":"HBRequestDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBRequestDecoder"}],"abstract":[{"type":"text","text":"protocol for decoder deserializing from a Request body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBRequestDecoder"}],"url":"\/documentation\/hummingbird\/hbrequestdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"role":"symbol","title":"HBResponseEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}],"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"url":"\/documentation\/hummingbird\/hbresponseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Extending-Hummingbird":{"role":"article","title":"Extending Hummingbird","abstract":[{"type":"text","text":"How to extend core types of Hummingbird"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/extending-hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"collectionGroup","title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/router"}}}