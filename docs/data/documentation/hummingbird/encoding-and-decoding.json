{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"]}],"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"role":"collectionGroup","title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}]},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"code":"HBApplication","type":"codeVoice"},{"text":" has two member variables ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" which define how requests\/responses are decoded\/encoded. The ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" must conform to ","type":"text"},{"code":"HBRequestDecoder","type":"codeVoice"},{"text":" which requires a ","type":"text"},{"code":"decode(_:from)","type":"codeVoice"},{"text":" function that decodes a ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" must conform to ","type":"text"},{"type":"codeVoice","code":"HBResponseEncoder"},{"text":" which requires a ","type":"text"},{"type":"codeVoice","code":"encode(_:from)"},{"text":" function that creates a ","type":"text"},{"type":"codeVoice","code":"HBResponse"},{"text":" from a ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" value and the original request that generated it.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"]},{"type":"paragraph","inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" protocol that come with the ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system except you have additional information from the ","type":"text"},{"code":"HBRequest","type":"codeVoice"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}]},{"level":2,"type":"heading","text":"Setting up HBApplication","anchor":"Setting-up-HBApplication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default implementations of "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" are "},{"code":"Null","type":"codeVoice"},{"type":"text","text":" implementations that will assert if used. So you have to setup your "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" before you can use "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" in Hummingbird. "},{"code":"HummingbirdFoundation","type":"codeVoice"},{"type":"text","text":" includes two such implementations. "},{"code":"JSONEncoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application"}]},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"]},{"type":"paragraph","inlineContent":[{"code":"HummingbirdFoundation","type":"codeVoice"},{"text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"]},{"level":2,"type":"heading","text":"Decoding Requests","anchor":"Decoding-Requests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" method in the following manner"}]},{"syntax":"swift","type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"]},{"type":"paragraph","inlineContent":[{"text":"Like the standard ","type":"text"},{"type":"codeVoice","code":"Decoder.decode"},{"text":" functions ","type":"text"},{"type":"codeVoice","code":"HBRequest.decode"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". I use the function ","type":"text"},{"type":"codeVoice","code":"HBRequest.failure"},{"text":" to generate the failed ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":".","type":"text"}]},{"level":2,"type":"heading","text":"Encoding Responses","anchor":"Encoding-Responses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"code":"HBResponseEncodable","type":"codeVoice"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"code":"User","type":"codeVoice"},{"type":"text","text":" object from the above example we can do this"}]},{"syntax":"swift","type":"codeListing","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"level":2,"type":"heading","text":"Decoding\/Encoding based on Request headers","anchor":"DecodingEncoding-based-on-Request-headers"},{"type":"paragraph","inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"code":"HBRequestDecoder","type":"codeVoice"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"URLEncodedFormDecoder","type":"codeVoice"},{"text":" based on the “content-type” header.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        switch request.headers[\"content-type\"].first {","        case \"json\/application\", \"application\/json; charset=utf-8\":","            return try JSONDecoder().decode(type, from: request)","        case \"application\/x-www-form-urlencoded\":","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding","interfaceLanguage":"swift"},"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBResponseEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBResponseEncoder","role":"symbol","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HBResponseEncoder"}],"title":"HBResponseEncoder","url":"\/documentation\/hummingbird\/hbresponseencoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HBResponseEncoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Extending-Hummingbird":{"title":"Extending Hummingbird","url":"\/documentation\/hummingbird\/extending-hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","role":"article","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","type":"topic","kind":"article","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird","url":"\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HBRequestDecoder":{"abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","title":"HBRequestDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HBRequestDecoder","url":"\/documentation\/hummingbird\/hbrequestdecoder","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}],"type":"topic","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"role":"collectionGroup","type":"topic","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","title":"Persistent data","url":"\/documentation\/hummingbird\/persistent-data"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/error-handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","role":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"url":"\/documentation\/hummingbird\/router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"article","role":"collectionGroup","title":"Router"}}}