{"metadata":{"role":"collectionGroup","title":"Encoding and Decoding","modules":[{"name":"Hummingbird"}]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBResponseEncoder"],"title":"Reference"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Encoding-and-Decoding"},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"],"title":"Articles","generated":true}],"abstract":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to decode requests and encode responses."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"code":"HBApplication","type":"codeVoice"},{"type":"text","text":" has two member variables "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" which define how requests\/responses are decoded\/encoded. The "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" must conform to "},{"code":"HBRequestDecoder","type":"codeVoice"},{"type":"text","text":" which requires a "},{"code":"decode(_:from)","type":"codeVoice"},{"type":"text","text":" function that decodes a "},{"code":"HBRequest","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["public protocol HBRequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: HBRequest) throws -> T","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" must conform to "},{"code":"HBResponseEncoder","type":"codeVoice"},{"type":"text","text":" which requires a "},{"code":"encode(_:from)","type":"codeVoice"},{"type":"text","text":" function that creates a "},{"code":"HBResponse","type":"codeVoice"},{"type":"text","text":" from a "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"syntax":"swift","code":["public protocol HBResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: HBRequest) throws -> HBResponse","}"],"type":"codeListing"},{"inlineContent":[{"text":"Both of these look very similar to the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol that come with the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"HBRequest"},{"text":" class on how you might want to decode\/encode your data.","type":"text"}],"type":"paragraph"},{"anchor":"Setting-up-HBApplication","type":"heading","level":2,"text":"Setting up HBApplication"},{"inlineContent":[{"type":"text","text":"The default implementations of "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" are "},{"code":"Null","type":"codeVoice"},{"type":"text","text":" implementations that will assert if used. So you have to setup your "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" before you can use "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" in Hummingbird. "},{"code":"HummingbirdFoundation","type":"codeVoice"},{"type":"text","text":" includes two such implementations. "},{"code":"JSONEncoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" have been extended to conform to the relevant protocols so you can have JSON decoding\/encoding by adding the following when creating your application"}],"type":"paragraph"},{"syntax":"swift","code":["let app = HBApplication()","app.decoder = JSONDecoder()","app.encoder = JSONEncoder()"],"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdFoundation"},{"type":"text","text":" also includes a decoder and encoder for url encoded form data. To use this you setup the application as follows"}],"type":"paragraph"},{"syntax":"swift","code":["let app = HBApplication()","app.decoder = URLEncodedFormDecoder()","app.encoder = URLEncodedFormEncoder()"],"type":"codeListing"},{"anchor":"Decoding-Requests","type":"heading","level":2,"text":"Decoding Requests"},{"inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"type":"codeVoice","code":"HBRequest.decode"},{"type":"text","text":" method in the following manner"}],"type":"paragraph"},{"syntax":"swift","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","app.router.post(\"user\") { request -> EventLoopFuture<HTTPResponseStatus> in","    \/\/ decode user from request","    guard let user = try? request.decode(as: User.self) else {","        return request.failure(.badRequest)","    }","    \/\/ create user and if ok return `.ok` status","    return createUser(user, on: request.eventLoop)","        .map { _ in .ok }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Like the standard ","type":"text"},{"code":"Decoder.decode","type":"codeVoice"},{"text":" functions ","type":"text"},{"code":"HBRequest.decode","type":"codeVoice"},{"text":" can throw an error if decoding fails. In this situation when I received a decode error I return a failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". I use the function ","type":"text"},{"code":"HBRequest.failure","type":"codeVoice"},{"text":" to generate the failed ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Encoding-Responses","type":"heading","level":2,"text":"Encoding Responses"},{"inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"type":"codeVoice","code":"HBResponseEncodable"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}],"type":"paragraph"},{"syntax":"swift","code":["extension User: HBResponseEncodable {}","","app.router.get(\"user\") { request -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing"},{"anchor":"DecodingEncoding-based-on-Request-headers","type":"heading","level":2,"text":"Decoding\/Encoding based on Request headers"},{"inlineContent":[{"text":"Because the full request is supplied to the ","type":"text"},{"type":"codeVoice","code":"HBRequestDecoder"},{"text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"text":" based on the “content-type” header.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestDecoder: HBRequestDecoder {","    func decode<T>(_ type: T.Type, from request: HBRequest) throws -> T where T : Decodable {","        switch request.headers[\"content-type\"].first {","        case \"application\/json\", \"application\/json; charset=utf-8\":","            return try JSONDecoder().decode(type, from: request)","        case \"application\/x-www-form-urlencoded\":","            return try URLEncodedFormDecoder().decode(type, from: request)","        default:","            throw HBHTTPError(.badRequest)","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using a similar manner you could also create a "},{"type":"codeVoice","code":"HBResponseEncoder"},{"type":"text","text":" based on the “accepts” header in the request."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBResponseEncoder":{"url":"\/documentation\/hummingbirdauth\/hbresponseencoder","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HBResponseEncoder","kind":"identifier"}],"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"kind":"symbol","title":"HBResponseEncoder","navigatorTitle":[{"text":"HBResponseEncoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBResponseEncoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","url":"\/documentation\/index","role":"collection","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/HBRequestDecoder":{"url":"\/documentation\/hummingbirdauth\/hbrequestdecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HBRequestDecoder","kind":"identifier"}],"abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"kind":"symbol","title":"HBRequestDecoder","navigatorTitle":[{"text":"HBRequestDecoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/HBRequestDecoder","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Error-Handling":{"type":"topic","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Error-Handling","kind":"article","url":"\/documentation\/hummingbird\/error-handling","role":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Extending-Hummingbird":{"title":"Extending Hummingbird","role":"article","abstract":[{"text":"How to extend core types of Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Extending-Hummingbird","url":"\/documentation\/hummingbird\/extending-hummingbird","kind":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Persistent-Data":{"title":"Persistent data","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Persistent-Data","role":"collectionGroup","url":"\/documentation\/hummingbird\/persistent-data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"collectionGroup","url":"\/documentation\/hummingbird\/router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article"}}}